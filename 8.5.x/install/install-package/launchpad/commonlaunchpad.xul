<?xml version="1.0"?>


<!-- Licensed Materials - Property of IBM
     5648-F10 (C) Copyright International Business Machines Corp. 2014
     All Rights Reserved
     US Government Users Restricted Rights - Use, duplication or disclosure
     restricted by GSA ADP Schedule Contract with IBM Corp. -->



<!DOCTYPE window>

<window id="commonlaunchpad" 
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
	
    <script type="application/x-javascript" src="chrome://commonlaunchpad/content/privilegedActions.js"/>

    <script>
    	//This is for setting up the event handling between the browser and the extension 
		function processEvent(evt) 
	    {
			processPrivilegedRequest(evt);
	    }
	    document.addEventListener("privilegedActionRequest", function(e) {processEvent(e); }, false, true);
	    
	    try
		{
	      var IS_XUL = true;
	      
		  var env = Components.classes["@mozilla.org/process/environment;1"].getService(Components.interfaces.nsIEnvironment); 
		  var os = env.get("LaunchPadOS");

		  var envFile = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
		  envFile.initWithPath( env.get("TEMP").replace(/\\/, "\\\\") + "\\launchpad.env" );
		  //If LaunchPadOS is not defined, it probably means we're running firefox 2.0 on Windows 2003.  We'll have to 
		  //pull the environment from %TEMP%/launchpad.env
		  if (os == "") {

			//If %TEMP%\launchpad.env exists, load it and try to read the environment
			if (envFile.exists()) {
			  var nsIFileInputStream = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance( Components.interfaces.nsIFileInputStream);
			  nsIFileInputStream.init( envFile, 0x01, 00004, null);
			  var nsIBinaryInputStream = Components.classes["@mozilla.org/binaryinputstream;1"].createInstance( Components.interfaces.nsIBinaryInputStream);
			  nsIBinaryInputStream.setInputStream(nsIFileInputStream);
			  var fileContents = nsIBinaryInputStream.readBytes(nsIFileInputStream.available());          
			  var fileLines = fileContents.split(/\r*\n/);
			  //Set every variable (process or system var) to the appropriate value.
			  for (var index in fileLines) {
				var keyValuePair = fileLines[index].split(/=/);
				env.set(keyValuePair[0], keyValuePair[1]);
			  }
			  nsIFileInputStream.close();
			  nsIBinaryInputStream.close();       
			}
			else
			{
			  //If this happens, we have no chance of reading translated properties files
			  alert("There was a problem starting the launchpad");
			}
		  }
		  if (envFile.exists()) {
			envFile.remove(false);
		  }
		 }
		 catch (e){};
		 
		 try {
				document.search = document.location.search;
				if (document.search.indexOf(',') >= 0) {
					top.INITIALLOCALE = document.search.substring(1,document.search.indexOf(','));
					document.search = '?' + document.search.substring(document.search.indexOf(',')+1);
				} else {
					top.INITIALLOCALE = document.search.substring(1);
					document.search = '';
				}
				top.NOBROWSER = window.location.href.substring(0,window.location.href.lastIndexOf('/'))+'/'+top.INITIALLOCALE+'/noBrowser.html';
				var useragent = navigator.userAgent.toLowerCase();
				top.BROWSERVERSION = parseFloat(useragent.substring(useragent.indexOf("rv:")+3));
			} catch(e) { top.NOBROWSER = 'en/noBrowser.html'; }

			try {
				var profileManager = Components.classes["@mozilla.org/profile/manager;1"];
				var profile = profileManager.getService(Components.interfaces.nsIProfile);
				top.CURRENTPROFILE = profile.currentProfile;
				profile.deleteProfile(top.CURRENTPROFILE,false);
			} catch(e) {};			
    </script>    
    
    <script src="launchpad.js" language="javascript"/>
    <script src="globals.js" language="javascript"/>
    <script src="log.js" language="javascript"/>
    <script src="utils.js" language="javascript"/>
    <script src="OS.js" language="javascript"/>
    <script src="Firefox.js" language="javascript"/>
    <script src="properties.js" language="javascript"/>
    <script src="browsePrompt.js" language="javascript"/>
    <script src="diskLabels.js" language="javascript"/>
    <script src="wizard.js" language="javascript"/>
    <script src="update.js" language="javascript"/>
    <script src="license.js" language="javascript"/>
    <script src="hotkeys.js" language="javascript"/>
    <script src="jscpfunc.js" language="javascript"/>

	<script>
		try
		{	//If this happens, it means that diskLabels.js found a different compatible directory for diskLabel.id
			//than the one we started in
			if (top.getNativeFileName(top.diskMappings[top.diskLabel.id]) !=  top.getNativeFileName(top.STARTINGDIR)) {
				//If we found a compatible disk, then reset the STARTINGDIR.  Otherwise, just leave it 
				//and let the no browser code catch the problem.
				if (top.foundCompatibleStartDisk) {
				  top.STARTINGDIR = top.diskMappings[top.diskLabel.id];
				}			
				top.initializeProperties();
				top.initializeDiskLabelService();
			}
			
			var localeMappings = top.findProperty('engineLocales', self, null);
			var previousLocale = top.LOCALE;
			top.LOCALE = localeMappings[top.trim(top.secureGetEnv(new Function('return window'), "LaunchPadLocale").toLowerCase())];
			if ( top.LOCALE == null ) // if no mapping exists for the 5 character lang code, try the two digit code
			{
				top.LOCALE = localeMappings[(top.secureGetEnv(new Function('return window'), "LaunchPadLocale")).substring(0,2).toLowerCase()];
			}
			function contains(array, object) {
				var i = array.length;
				while (i--) {
					if (array[i] === object) {
					  return true;
					}
				}
				return false;
			}
			
			if (top.LOCALE == null || !contains(top.findProperty('validLocales', self, []), top.LOCALE)) // if everything fails, default to English
			{
				top.LOCALE = top.findProperty('fallBackLocale', self, null);
			}
	
			//The initial locale is set in IExplore.js/Mozilla.js.  However, at that point, the properties service
			//has not been loaded, so we can't determine if a region specific locale should be used.  So we use
			//as base locale.  Using a base locale means that any properties in global.properties will not be loaded
			//for the regional dialects.  So, after the locale is absolutely determined, we'll reload the global.prop files.
			if (top.LOCALE != previousLocale) {
				top.initializeProperties();
			}
		}
		catch(e)
		{
			alert(top.formatmsg(document.properties['errorLoadingLocaleProperties'], e.message));
		}		
	</script>    

	<iframe id="clpbrowser" src="chrome://commonlaunchpad/content/Firefox.html" style="height:750px;width:800px;background:Linen"/>

</window>