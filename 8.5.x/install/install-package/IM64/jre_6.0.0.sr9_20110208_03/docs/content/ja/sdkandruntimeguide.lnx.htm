<?xml version="1.0" encoding="Shift_JIS"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja-JP" xml:lang="ja-jp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS" />
<meta name="dc.language" scheme="rfc1766" content="ja-jp" />
<meta name="dc.date" scheme="iso8601" content="2007-09-25" />
<meta name="copyright" content="(C) Copyright IBM Corp. 2003, 2007" />
<meta name="security" content="public" />
<meta name="Robots" content="index,follow"/>
<meta http-equiv="PICS-Label" content='(PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true r (n 0 s 0 v 0 l 0) "http://www.classify.org/safesurf/" l gen true r (SS~~000 1))' />
<meta name="type" content="concept, reference, reference, task, task, task, task, task, task, task, task, task, task, task, task, reference, task, task, reference, task, task, task, reference, task, reference, task, reference, reference, task, reference, task, reference, task, task, reference, reference, reference, reference, task, reference, task, task, reference, task, task, task, reference, task, reference, task, task, reference, task, task, task, task, task, task, reference, reference, reference" />
<meta name="keywords" content="Red Hat Enterprise Linux (RHEL) 4, インストール, Red Hat Enterprise Linux (RHEL) 5, SELinux, アンインストール" />
<meta name="keywords" content="Red Hat Enterprise Linux (RHEL) 4Ii, tape archive, -agentlib:, -agentpath:, -assert, -cp, -classpath, -D, -help, -?, -javaagent:, -jre-restrict-search" />
<meta name="keywords" content="-no-jre-restrict-search, -showversion, -verbose:, -version:, -X, just-in-time, コンパイラー, just-in-time コンパイル, -Xinit, オプション, -Xnojit" />
<meta name="keywords" content="テスト, JIT, 指定, ガーベッジ・コレクション, -Xgcpolicy, 休止時間, 休止時間の削減, フルのヒープ, 環境, XML, XSL, クラス・データの共用, -Xshareclasses" />
<meta name="keywords" content="クラス共用オプション, -Xscmx, キャッシュの作成, キャッシュの読み込み, キャッシュのモニター, キャッシュの削除, パフォーマンス消費, メモリー消費, 制限" />
<meta name="keywords" content="クラス共用, 考慮事項, キャッシュ・サイズの制限, 実行時バイトコード変更, オペレーティング・システムの制限, 使用, SharedClassPermission, 適応" />
<meta name="keywords" content="クラス・ローダー, -Xcheck:memory" />
<title>SDK およびランタイム・ガイド</title>
<link rel="stylesheet" type="text/css" href="../ibmidwb.css" />
<link rel="stylesheet" type="text/css" href="../swg_info_common.css" />
</head>
<body class="revised">
<a id="Top_Of_Page" name="Top_Of_Page"></a><h1>*IBM SDK for Linux platforms, Java Technology Edition,&nbsp;バージョン 6</h1>
<h1>SDK およびランタイム・ガイド</h1>
<br />
<span class="ibmdocnum"></span><br />
<a name="notices_link"></a>
<div id="notices_link">
<div class="pblklblbox">
<span class="pblktitle">お願い</span>
<p>本書および本書で紹介する製品をご使用になる前に、<a href="#notices">特記事項</a>に記載されている情報をお読みください。</p></div></div>
<a name="copyright"></a>
<div id="copyright">
<span class="ednoticestitle">著作権情報</span>
<p>本書は、複数のプラットフォーム上の IBM SDK and Runtime Environment for Linux に適用されます。</p>
<p>本書が適用されるプラットフォームは以下のとおりです。
</p>
<ul>
<li>IBM 32-bit SDK and Runtime Environment for Linux on Intel architecture, Java Technology Editionバージョン 6</li>
<li>IBM 64-bit SDK and Runtime Environment for Linux on AMD64/EM64T
architecture, Java Technology Editionバージョン 6</li>
<li>IBM 32-bit SDK and Runtime Environment for Linux on System
i<sup>(TM)</sup> and System p<sup>(TM)</sup> architecture, Java Technology Editionバージョン 6</li>
<li>IBM 64-bit SDK and Runtime Environment for Linux on System
i and System p architecture, Java Technology Editionバージョン 6</li>
<li>IBM 31-bit SDK and Runtime Environment for Linux on System
z architecture, Java Technology
Editionバージョン 6</li>
<li>IBM 64-bit SDK and Runtime Environment for Linux on System
z architecture, Java Technology
Editionバージョン 6</li></ul><p class="indatacontent"> これに加えて、新しい版で明記されていない限り、これらの製品の上記以降のすべてのリリースおよびモディフィケーションに適用されます。</p>
<p>(C) Copyright Sun Microsystems, Inc. 1997, 2007, 901 San Antonio Rd., Palo Alto, CA 94303 USA. All rights reserved.</p></div>
<P>IBM 発行のマニュアルに関する情報のページ
<P>
<PRE>
<A HREF="http://www.ibm.com/jp/manuals/">http://www.ibm.com/jp/manuals/</A>
</PRE>
<P>こちらから、日本語版および英語版のオンライン・ライブラリーをご利用いただけます。
また、マニュアルに関するご意見やご感想を、上記ページよりお送りください。今後の参考にさせていただきます。
<P>(URL は、変更になる場合があります)
<P>
お客様の環境によっては、資料中の円記号がバックスラッシュと表示されたり、バックスラッシュが円記号と表示されたりする場合があります。
<BR>
<TABLE BORDER WIDTH="100%"><TR><TD><BR>
<DL><BR>
<P><DT><B>原　典：<BR>
</B><DD><BR>
<BR>
IBM SDK for Linux platforms, Java Technology Edition, Version 6<BR>
<BR>
SDK and Runtime Guide<BR>
<P><DT><B>発　行：<BR>
</B><DD>日本アイ・ビー・エム株式会社<BR>
<P><DT><B>担　当：<BR>
</B><DD>ナショナル・ランゲージ・サポート<BR>
</DL><BR>
</TD></TR></TABLE>
<div>
<div><strong>Copyright International Business Machines Corporation 2003, 2007. All rights reserved.</strong></div>
<p>(C) Copyright IBM Japan 2007</p></div>

<a name="wq2"></a>
<div id="wq2">
<h1>目次</h1>
<div class="head1"><a id="ToC_1" name="ToC_1" href="#preface" class="toclink">前書き</a></div>
<div class="head1"><a id="ToC_2" name="ToC_2" href="#overview" class="toclink">概説</a></div>
<div class="head2"><a id="ToC_3" name="ToC_3" href="#lnx_conventions" class="toclink">規則</a></div>
<div class="head2"><a id="ToC_4" name="ToC_4" href="#compatibility" class="toclink">バージョンの互換性</a></div>
<div class="head2"><a id="ToC_5" name="ToC_5" href="#migrating" class="toclink">他の IBM JVM からのマイグレーション</a></div>
<div class="head2"><a id="ToC_6" name="ToC_6" href="#zhardware" class="toclink">System z のサポート対象ハードウェア</a></div>
<div class="head1"><a id="ToC_7" name="ToC_7" href="#contents_sdk" class="toclink">SDK および Runtime Environment のコンテンツ</a></div>
<div class="head2"><a id="ToC_8" name="ToC_8" href="#jretools" class="toclink">Runtime Environment のクラスおよびツール</a></div>
<div class="head2"><a id="ToC_9" name="ToC_9" href="#sdktools" class="toclink">SDK ツールおよび参照情報</a></div>
<div class="head1"><a id="ToC_10" name="ToC_10" href="#lin_install_config" class="toclink">SDK and Runtime Environment のインストールおよび構成</a></div>
<div class="head2"><a id="ToC_11" name="ToC_11" href="#upgrading" class="toclink">SDK のアップグレード</a></div>
<div class="head2"><a id="ToC_12" name="ToC_12" href="#installredhat4" class="toclink">Red Hat Enterprise Linux (RHEL) 4 へのインストール</a></div>
<div class="head2"><a id="ToC_13" name="ToC_13" href="#installredhat5" class="toclink">Red Hat Enterprise Linux (RHEL) 5 へのインストール</a></div>
<div class="head3"><a id="ToC_14" name="ToC_14" href="#lin_redhat_selinux" class="toclink">RHEL 5 上の SELinux を使用した Java の実行</a></div>
<div class="head2"><a id="ToC_15" name="ToC_15" href="#lin_install" class="toclink">64 ビット・アーキテクチャーへの 32 ビット SDK のインストール</a></div>
<div class="head2"><a id="ToC_16" name="ToC_16" href="#lin_rpm_install" class="toclink">RPM ファイルからのインストール</a></div>
<div class="head2"><a id="ToC_17" name="ToC_17" href="#lin_tgz_install" class="toclink">.tgz ファイルからのインストール</a></div>
<div class="head2"><a id="ToC_18" name="ToC_18" href="#lin_jpackage_install" class="toclink">JPackage 互換フォーマットの使用</a></div>
<div class="head2"><a id="ToC_19" name="ToC_19" href="#lin_config" class="toclink">SDK and Runtime Environment for Linux の構成</a></div>
<div class="head3"><a id="ToC_20" name="ToC_20" href="#pathcons" class="toclink">パスの設定</a></div>
<div class="head3"><a id="ToC_21" name="ToC_21" href="#classpath" class="toclink">クラスパスの設定</a></div>
<div class="head2"><a id="ToC_22" name="ToC_22" href="#lin_uninstall" class="toclink">SDK and Runtime Environment for Linux のアンインストール</a></div>
<div class="head3"><a id="ToC_23" name="ToC_23" href="#uninstrpm" class="toclink">Red Hat Package Manager (RPM) パッケージのアンインストール</a></div>
<div class="head3"><a id="ToC_24" name="ToC_24" href="#uninsttar" class="toclink">Tape Archive (TAR) 圧縮パッケージ のアンインストール</a></div>
<div class="head1"><a id="ToC_25" name="ToC_25" href="#running_applications" class="toclink">Java アプリケーションの実行</a></div>
<div class="head2"><a id="ToC_26" name="ToC_26" href="#invint" class="toclink">java および javaw コマンド</a></div>
<div class="head3"><a id="ToC_30" name="ToC_30" href="#build_number" class="toclink">バージョン情報の取得</a></div>
<div class="head3"><a id="ToC_31" name="ToC_31" href="#specifying_options" class="toclink">Java オプションとシステム・プロパティーの指定</a></div>
<div class="head3"><a id="ToC_32" name="ToC_32" href="#standard_options" class="toclink">標準オプション</a></div>
<div class="head3"><a id="ToC_33" name="ToC_33" href="#globalization" class="toclink">java コマンドのグローバリゼーション</a></div>
<div class="head2"><a id="ToC_34" name="ToC_34" href="#jit" class="toclink">Just-In-Time (JIT) コンパイラー</a></div>
<div class="head3"><a id="ToC_35" name="ToC_35" href="#disjit" class="toclink">JIT の使用不可化</a></div>
<div class="head3"><a id="ToC_36" name="ToC_36" href="#enajit" class="toclink">JIT の使用可能化</a></div>
<div class="head3"><a id="ToC_37" name="ToC_37" href="#detjit" class="toclink">JIT が使用可能かどうかを判別する</a></div>
<div class="head2"><a id="ToC_38" name="ToC_38" href="#garbage" class="toclink">ガーベッジ・コレクション・ポリシーの指定</a></div>
<div class="head3"><a id="ToC_39" name="ToC_39" href="#garbage_options" class="toclink">ガーベッジ・コレクションのオプション</a></div>
<div class="head3"><a id="ToC_40" name="ToC_40" href="#garbage_pause" class="toclink">休止時間</a></div>
<div class="head3"><a id="ToC_41" name="ToC_41" href="#pausetimereduction" class="toclink">休止時間の削減</a></div>
<div class="head3"><a id="ToC_42" name="ToC_42" href="#garbage_full_heap" class="toclink">ヒープがフルの環境</a></div>
<div class="head2"><a id="ToC_43" name="ToC_43" href="#euro_symbol" class="toclink">ユーロ記号のサポート</a></div>
<div class="head2"><a id="ToC_44" name="ToC_44" href="#fallback_font" class="toclink">フォールバック・フォント構成ファイル</a></div><span id="changed">|</span>
<span id="changed">|</span><div class="head2"><a id="ToC_45" name="ToC_45" href="#input_method_extensions" class="toclink">インドおよびタイ語の入力方式の使用</a></div>
<div class="head1"><a id="ToC_46" name="ToC_46" href="#developing" class="toclink">SDK を使用した Java アプリケーションの開発</a></div><span id="changed">|</span>
<span id="changed">|</span><div class="head2"><a id="ToC_47" name="ToC_47" href="#xml_using" class="toclink">XML の使用</a></div><span id="changed">|</span>
<span id="changed">|</span><div class="head3"><a id="ToC_50" name="ToC_50" href="#xslt_migration_steps" class="toclink">XL-TXE-J のマイグレーション</a></div><span id="changed">|</span>
<span id="changed">|</span><div class="head3"><a id="ToC_51" name="ToC_51" href="#xml_reference" class="toclink">XML 参照情報</a></div>
<div class="head2"><a id="ToC_62" name="ToC_62" href="#debugger" class="toclink">Java アプリケーションのデバッグ</a></div>
<div class="head3"><a id="ToC_63" name="ToC_63" href="#jdb" class="toclink">Java Debugger (JDB)</a></div>
<div class="head2"><a id="ToC_64" name="ToC_64" href="#bit_check" class="toclink">アプリケーションが 32 ビットまたは 64 ビットのどちらの JVM で実行されているかを判別する</a></div>
<div class="head2"><a id="ToC_65" name="ToC_65" href="#signals" class="toclink">JVM のシグナルの処理方法</a></div>
<div class="head3"><a id="ToC_66" name="ToC_66" href="#sighand" class="toclink">JVM が使用するシグナル</a></div>
<div class="head3"><a id="ToC_67" name="ToC_67" href="#native_signals" class="toclink">ネイティブ・コード・ドライバーをシグナル・チェーニング・ライブラリーにリンクする</a></div>
<div class="head2"><a id="ToC_68" name="ToC_68" href="#usejni" class="toclink">JNI アプリケーションの作成</a></div>
<div class="head2"><a id="ToC_69" name="ToC_69" href="#blocked_threads" class="toclink">ブロック化コネクターのスレッド・レベルのリカバリーのサポート</a></div>
<div class="head2"><a id="ToC_70" name="ToC_70" href="#alloc_large_page" class="toclink">大規模ページのメモリー割り振りの構成</a></div>
<div class="head2"><a id="ToC_71" name="ToC_71" href="#corba" class="toclink">CORBA サポート</a></div>
<div class="head3"><a id="ToC_75" name="ToC_75" href="#corba_properties" class="toclink">ORB をトレースするためのシステム・プロパティー</a></div>
<div class="head3"><a id="ToC_79" name="ToC_79" href="#corba_tuning" class="toclink">ORB を調整するためのシステム・プロパティー</a></div>
<div class="head3"><a id="ToC_80" name="ToC_80" href="#corba_security" class="toclink">ORB の Java セキュリティー権限</a></div>
<div class="head3"><a id="ToC_81" name="ToC_81" href="#corba_classes" class="toclink">ORB 実装クラス</a></div>
<div class="head2"><a id="ToC_82" name="ToC_82" href="#rmi-iiop" class="toclink">RMI over IIOP</a></div>
<div class="head2"><a id="ToC_83" name="ToC_83" href="#rmi" class="toclink">RMI の Connection Handler Pool の実装</a></div>
<div class="head2"><a id="ToC_84" name="ToC_84" href="#bigd" class="toclink">拡張 BigDecimal</a></div>
<div class="head1"><a id="ToC_85" name="ToC_85" href="#deploying" class="toclink">Plug-in、アプレット・ビューアー、および Web Start</a></div>
<div class="head2"><a id="ToC_86" name="ToC_86" href="#using_plugin" class="toclink"><strong><span class="bold-italic">(Linux IA 32 ビットおよび PPC32 のみ)</span></strong> Java Plug-in の使用</a></div>
<div class="head3"><a id="ToC_87" name="ToC_87" href="#suppbrowse" class="toclink">サポートされるブラウザー</a></div>
<div class="head3"><a id="ToC_88" name="ToC_88" href="#installing_plugin" class="toclink">Java Plug-in のインストールおよび構成</a></div>
<div class="head3"><a id="ToC_91" name="ToC_91" href="#plugin_dom" class="toclink">共通 Document Object Model (DOM) サポート</a></div>
<div class="head3"><a id="ToC_92" name="ToC_92" href="#plugin_dbcs" class="toclink">DBCS パラメーターの使用</a></div>
<div class="head2"><a id="ToC_93" name="ToC_93" href="#applets" class="toclink">アプレットの処理</a></div>
<div class="head3"><a id="ToC_94" name="ToC_94" href="#applet_viewer" class="toclink">アプレット・ビューアーでアプレットを実行する</a></div>
<div class="head3"><a id="ToC_95" name="ToC_95" href="#applet_debugging" class="toclink">アプレット・ビューアーでアプレットをデバッグする</a></div>
<div class="head2"><a id="ToC_96" name="ToC_96" href="#using_webstart" class="toclink"><strong><span class="bold-italic">(Linux IA 32 ビット、PPC32、および PPC64 のみ)</span></strong> Web Start の使用</a></div>
<div class="head3"><a id="ToC_97" name="ToC_97" href="#installing_webstart" class="toclink">Web Start の実行</a></div>
<div class="head3"><a id="ToC_98" name="ToC_98" href="#webstart_ssv" class="toclink"><strong><span class="bold-italic">(Linux IA 32 ビットのみ) </span></strong>WebStart Secure の静的バージョン管理</a></div>
<div class="head2"><a id="ToC_99" name="ToC_99" href="#shipping" class="toclink">Java アプリケーションの出荷</a></div>
<div class="head1"><a id="ToC_100" name="ToC_100" href="#classdatasharing" class="toclink">JVM 間でのクラス・データの共用</a></div>
<div class="head2"><a id="ToC_101" name="ToC_101" href="#shc_overview" class="toclink">クラス・データ共用の概要</a></div>
<div class="head2"><a id="ToC_108" name="ToC_108" href="#sharedclassesxoptions" class="toclink">クラス・データ共用の使用可能化と構成</a></div>
<div class="head2"><a id="ToC_109" name="ToC_109" href="#shc_admin" class="toclink">キャッシュの作成、読み込み、モニター、および削除</a></div>
<div class="head2"><a id="ToC_110" name="ToC_110" href="#shc_performance" class="toclink">パフォーマンスとメモリーの消費</a></div>
<div class="head2"><a id="ToC_111" name="ToC_111" href="#shc_limitations" class="toclink">クラス・データ共用を使用する際の考慮事項と制限</a></div>
<div class="head3"><a id="ToC_112" name="ToC_112" href="#cachesizelimits" class="toclink">キャッシュ・サイズの制限</a></div>
<div class="head3"><a id="ToC_113" name="ToC_113" href="#runtimebytecode" class="toclink">実行時バイトコード変更</a></div>
<div class="head3"><a id="ToC_114" name="ToC_114" href="#shc_os_limitations" class="toclink">オペレーティング・システムの制限</a></div>
<div class="head3"><a id="ToC_115" name="ToC_115" href="#usingsharedclasspermissions" class="toclink">SharedClassPermission の使用</a></div>
<div class="head2"><a id="ToC_116" name="ToC_116" href="#adaptingclassloaders" class="toclink">カスタム・クラス・ローダーの共用クラスへの適応</a></div>
<div class="head1"><a id="ToC_117" name="ToC_117" href="#jcommchapter" class="toclink">Java Communications API (JavaComm) の使用</a></div>
<div class="head2"><a id="ToC_118" name="ToC_118" href="#instcomm" class="toclink">圧縮ファイルからの Java Communications API のインストール</a></div>
<div class="head2"><a id="ToC_119" name="ToC_119" href="#instcomm_rpm" class="toclink">RPM ファイルからの Java Communications API のインストール</a></div>
<div class="head2"><a id="ToC_120" name="ToC_120" href="#fileloc" class="toclink">Java Communications API ファイルの場所</a></div>
<div class="head2"><a id="ToC_121" name="ToC_121" href="#javacomm_lnx_serial" class="toclink">シリアル・ポートとパラレル・ポートのアクセス・モードの変更</a></div>
<div class="head2"><a id="ToC_122" name="ToC_122" href="#javacomm_lnx_devices" class="toclink">javax.comm.properties ファイルでのデバイスの指定</a></div>
<div class="head2"><a id="ToC_123" name="ToC_123" href="#javacomm_thinkpad" class="toclink">IBM ThinkPad でのシリアル・ポートの使用可能化</a></div>
<div class="head2"><a id="ToC_124" name="ToC_124" href="#javacomm_printing" class="toclink">Java Communications API での印刷に関する制限</a></div>
<div class="head2"><a id="ToC_125" name="ToC_125" href="#javacomm_lnx_remove" class="toclink">Java Communications API のアンインストール</a></div>
<div class="head3"><a id="ToC_126" name="ToC_126" href="#javacomm_redhat_remove" class="toclink">Red Hat Package Manager (RPM) パッケージのアンインストール</a></div>
<div class="head3"><a id="ToC_127" name="ToC_127" href="#javacomm_tar_remove" class="toclink">Tape Archive (TAR) 圧縮パッケージのアンインストール</a></div>
<div class="head2"><a id="ToC_128" name="ToC_128" href="#javacomm_apidoc" class="toclink">Java Communications API ドキュメンテーション</a></div>
<div class="head1"><a id="ToC_129" name="ToC_129" href="#support" class="toclink">独立系ソフトウェア・ベンダーのサービスおよびサポート</a></div>
<div class="head1"><a id="ToC_130" name="ToC_130" href="#accessibility" class="toclink">アクセシビリティー</a></div>
<div class="head2"><a id="ToC_131" name="ToC_131" href="#access_keyboard" class="toclink">Swing での JComboBox コンポーネントのキーボードによる探索</a></div>
<div class="head2"><a id="ToC_132" name="ToC_132" href="#access_webstart" class="toclink">Web Start のアクセシビリティー (Linux IA 32 ビット、PPC32、および PPC64 のみ)</a></div>
<div class="head1"><a id="ToC_133" name="ToC_133" href="#rcf" class="toclink">本書に関するご意見</a></div>
<div class="head1"><a id="ToC_134" name="ToC_134" href="#xoptions" class="toclink">付録A. 非標準オプション</a></div>
<div class="head1"><a id="ToC_135" name="ToC_135" href="#limitations" class="toclink">付録B. 既知の制限</a></div>
<div class="head1"><a id="ToC_169" name="ToC_169" href="#notices" class="toclink">特記事項</a></div>
<div class="head2"><a id="ToC_170" name="ToC_170" href="#trademarks" class="toclink">商標</a></div>
</div>
<a name="preface"></a>
<h1 id="preface"><a href="#ToC_1">前書き</a></h1>
<div>
<p>本書には、IBM<sup>(R)</sup> SDK and Runtime Environment for Linux<sup>(R)</sup> platforms, Java<sup>(TM)</sup> Technology Edition, Version 6 の概説と、
Sun の実装と対比した IBM の実装の相違点に関する具体的な情報が記載されています。</p></div>
<p>本書は、Sun の Web サイト (<a href="http://java.sun.com" target="_blank">http://java.sun.com</a>) の詳細な資料と一緒にお読みください。</p>
<p>SDK および Runtime Environment for Linux をテスト済みのディストリビューションのリストについては、<a href="http://www.ibm.com/developerworks/java/jdk/linux/tested.html" target="_blank">http://www-106.ibm.com/developerworks/java/jdk/linux/tested.html</a> を参照してください。</p>
<p><strong>(Intel<sup>(R)</sup> 32 ビット・プラットフォームのみ) </strong>以下の仮想化環境がサポートされています。
</p>
<ul>
<li>VMWare</li>
<li>Xen</li>
<li>Microsoft<sup>(R)</sup> Virtual
Server</li></ul>
<p>IBM Virtual Machine for Java について詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<p>このユーザー・ガイドは、リリースの一部であり、その特定のリリースにのみ適用可能です。使用しているリリースに適切なユーザー・ガイドであることを確認してください。</p>
<p>用語「Runtime Environment」と「Java 仮想マシン」は、本書では同じ意味で使用されています。</p>
<p><font color="RED"><span id="changed">|</span>本書のこのバージョンでの技術的な変更は、小さな変更や明らかな変更を除き、インフォメーション・センターでは青色シェブロンで示され、HTML やカラー印刷コピーでは、変更箇所の左側に赤の縦線が表示され、PDF では変更箇所の左側に縦線が表示されています。</font></p>
<p>このプログラム・コードは、航空機オンライン制御、航空管制、航空ナビゲーション、航空通信などを含む (がこれに制限されない) リアルタイム・アプリケーション、および核施設の設計、建設、稼働、または保守における使用を想定しておらず、また、そのような使用のために設計されたものでもありません。</p>
<a name="overview"></a>
<h1 id="overview"><a href="#ToC_2">概説</a></h1>
<div>
<p>IBM SDK は、Java 6 Core
Application Program Interface (API) に準拠したアプレットやアプリケーションを作成して実行するための開発環境です。</p></div>
<p>SDK には、Java アプリケーションの実行のみを可能にする、Runtime Environment for Linux が
含まれています。SDK をインストールしている場合には、Runtime Environment が組み込まれています。</p>
<p>Runtime Environment には、Java 仮想マシンと、デバッグ不可能な .so ファイルと、クラス・ファイルなどのサポート・ファイルが含まれています。Runtime Environment には、SDK にあるクラスのサブセットのみが含まれているため、実行時に Javaプログラムをサポートすることはできますが、Java プログラムのコンパイルはできません。Runtime Environment for Linux には、<strong>appletviewer</strong> または Java コンパイラー (<strong>javac</strong>) などの開発ツールや、開発システム専用のクラスは一切含まれていません。</p>
<p>さらに、IA32、PPC32/PPC64、および AMD64/EM64T プラットフォームの場合は、Java Communications のアプリケーション・プログラミング・インターフェース (API) パッケージ
が Runtime Environment for Linux と一緒に使用するために提供されています。
これについては、<a href="#jcommchapter">Java Communications API (JavaComm) の使用</a>を参照してください。</p>
<p>license_<em>xx</em>.html ファイルには、Runtime Environment for Linux ソフトウェアのご使用条件が含まれています (<em>xx</em> は言語の省略語です)。ご使用条件を
表示あるいは印刷するには、Web ブラウザーでこのファイルをオープンしてください。</p>
<a name="lnx_conventions"></a>
<h2 id="lnx_conventions"><a href="#ToC_3">規則</a></h2>
<div>
<p>本書では、SDK のデフォルト・インストール・ディレクトリーに言及する場合、/opt/ibm/java-i386-60/ を使用します。
Linux IA 32 ビットを使用していない場合、デフォルト・インストール・ディレクトリーは異なります。</p></div>
<p>以下のリストに示すプラットフォームでは、それぞれデフォルトのインストール・ディレクトリーが異なります。このため、/opt/ibm/java-i386-60/ が出現した場合には、使用しているプラットフォームのディレクトリーに置き換えてください。 
</p>
<ul>
<li>Linux IA 32 ビット: /opt/ibm/java-i386-60/</li>
<li>Linux AMD
64 ビット: /opt/ibm/java-x86_64-60/</li>
<li>Linux PPC
32 ビット: /opt/ibm/java-ppc-60/</li>
<li>Linux PPC
64 ビット: /opt/ibm/java-ppc64-60/</li>
<li>Linux System
z<sup>(TM)</sup> 31 ビット: /opt/ibm/java-s390-60/</li>
<li>Linux System
z 64 ビット: /opt/ibm/java-s390x-60/</li></ul>
<p>本書の例では、Korn シェル・コマンドを使用します。</p>
<a name="compatibility"></a>
<h2 id="compatibility"><a href="#ToC_4">バージョンの互換性</a></h2>
<div>
<p>以前のバージョンの SDK で稼働したアプレットまたはアプリケーションは、一般に、IBM SDK for Linux, v6 でも正しく動作します。
このリリースでコンパイルしたクラスについて、前のリリースでの動作は保証できません。</p></div>
<p>リリース間での互換性について詳しくは、以下の Sun の Web サイトを参照してください。</p>
<p><a href="http://java.sun.com/javase/6/webnotes/compatibility.html" target="_blank"><font color="RED"><span id="changed">|</span>http://java.sun.com/javase/6/webnotes/compatibility.html</font></a></p>
<p><a href="http://java.sun.com/j2se/5.0/compatibility.html" target="_blank">http://java.sun.com/j2se/5.0/compatibility.html</a></p>
<p><a href="http://java.sun.com/j2se/1.4/compatibility.html" target="_blank">http://java.sun.com/j2se/1.4/compatibility.html</a></p>
<p><a href="http://java.sun.com/j2se/1.3/compatibility.html" target="_blank">http://java.sun.com/j2se/1.3/compatibility.html</a></p>
<p>他の製品 (IBM WebSphere<sup>(R)</sup> Application Server など) の一部として SDK を使用していて、以前のレベルの SDK (v5.0 など) からアップグレードする場合、直列化されたクラスに互換性がないことがあります。ただし、クラスは Service Refresh 間で互換性を持ちます。</p>
<a name="migrating"></a>
<h2 id="migrating"><a href="#ToC_5">他の IBM JVM からのマイグレーション</a></h2>
<div>
<p>バージョン 5.0 から、IBM Runtime Environment for Linux には、新しいバージョンの IBM Virtual Machine for Java と Just-In-Time (JIT) コンパイラーが含まれています。</p></div>
<p>以前の
IBM Runtime Environment からマイグレーションする場合は、以下のことに注意してください。</p>
<ul>
<li>Sun JVM の編成をより緊密に一致させるため、JVM 共用ライブラリー libjvm.soは、jre/lib/&lt;arch&gt;/j9vm および jre/lib/&lt;arch&gt;/classic に保管されるようになりました。</li>
<li>バージョン 5.0 以降、JVM Monitoring Interface (JVMMI) は使用できなくなっています。代わりに、JVMMI アプリケーションに再書き込みして JVM Tool Interface (JVMTI) を使用する必要があります。JVMTI は、機能的には JVMMI と同等ではありません。
JVMTI に関して詳しくは、<a href="http://java.sun.com/javase/6/docs/technotes/guides/jvmti/" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jvmti/</a> および「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</li>
<li>バージョン 5.0 以降、JNI の実装は JNI 仕様に準拠していますが、Version 1.4.2 の実装とは異なります。
オブジェクトを pin (固定) するのではなく、
オブジェクトのコピーを戻します。この違いにより、JNI アプリケーション・コードでエラーが発生する可能性があります。
JNI コードのデバッグについて詳しくは、<a href="#xoptions">付録A. 非標準オプション</a>の
<strong>-Xcheck:jni</strong> を参照してください。</li>
<li>バージョン 5.0 以降、<strong>-verbose:gc</strong> を使用して得られるガーベッジ・コレクター詳細ログのフォーマットおよびコンテンツは変更されています。現在、データは、XML 形式です。
データ内容には、JVM でのガーベッジ・コレクションの実装に対する変更が反映され、
出力される統計のほとんどが変更されています。
詳細 GC 出力を処理するプログラムがある場合、新規フォーマットとデータで動作するように変更する必要があります。
新しい詳細 GC データ例は、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</li>
<li>IBM JRE の SDK 1.4 バージョンでは、JVM 固有クラスが core.jar というファイルに含まれていました。バージョン 5.0 以降は、vm.jar というファイルに含まれています。</li>
<li>IBM JRE の以前のバージョンでは、rt.jar というファイルが jre/lib ディレクトリーに含まれていました。バージョン1.4 以降、このファイルは jre/lib ディレクトリーにある複数の JAR ファイルによって置き換えられています。</li>
<li><font color="RED"><span id="changed">|</span>業界互換性および非推奨 API の追加情報については、<a href="http://java.sun.com/javase/6/webnotes/compatibility.html" target="_blank">Sun の Java 6 互換性文書</a>および、<a href="http://java.sun.com/javase/6/docs/api/deprecated-list.html" target="_blank">Sun の Java 6 非推奨 API リスト</a>を参照してください。</font></li>
<li><strong>-verbose:Xclassdep</strong> を使用して呼び出されるクラス依存関係のトレースはサポートされていません。<strong>-verbose:Xclassdep</strong> を指定すると、JVM は、エラー・メッセージを出し、始動しません。</li></ul>
<a name="zhardware"></a>
<h2 id="zhardware"><a href="#ToC_6">System z のサポート対象ハードウェア</a></h2>
<div>
<p>System z31-bit SDK および 64-bit SDK と Runtime Environment は、System
z9<sup>(TM)</sup> および zSeries<sup>(R)</sup>ハードウェア上で稼働します。</p></div>
<p>SDK および Runtime Environment は、以下のサーバーまたは同等のサーバー上で稼働します。
</p>
<ul>
<li>z9-109</li>
<li>z990</li>
<li>z900</li>
<li>z890</li>
<li>z800</li></ul>
<a name="contents_sdk"></a>
<h1 id="contents_sdk"><a href="#ToC_7">SDK および Runtime Environment のコンテンツ</a></h1>
<div>
<p>SDK には、いくつかの開発ツールと Java Runtime Environment (JRE) が含まれています。この節では、SDK ツールと Runtime Environment のコンテンツについて説明します。</p></div>
<p>全体が Java で書かれたアプリケーションでは、IBM SDK のディレクトリー構造 (あるいは、それらのディレクトリー内のファイル) に対する依存関係が<strong>皆無</strong>であるべきです。SDK のディレクトリー構造 (あるいは、それらのディレクトリー内のファイル) に対する依存関係があると、
アプリケーションの移植性の問題が生じる場合があります。</p>
<p>この SDK for Linux に組み込まれているドキュメンテーションは、ユーザー・ガイド、Javadoc、および付随するライセンス、著作権ファイル、javadoc、および demo ディレクトリーのみです。Sun の Web サイト (<a href="http://java.sun.com" target="_blank">http://java.sun.com</a>) にアクセスして Sun のソフトウェア・ドキュメンテーションを表示するか、あるいは、この Web サイトから Sun の
ソフトウェア・ドキュメンテーション・パッケージをダウンロードすることができます。</p>
<a name="jretools"></a>
<h2 id="jretools"><a href="#ToC_8">Runtime Environment のクラスおよびツール</a></h2>
<div>
<p>標準的な Runtime Environment と一緒に使用できるクラスおよびツールのリストです。</p></div>
<p></p>
<ul>
<li>コア・クラス -- これは、プラットフォーム用にコンパイルされたクラス・ファイルで、
コンパイラーとインタープリターがアクセスできるように zip された状態のままである必要があります。このクラスは変更しないで、サブクラスを作成して必要なところをオーバーライドするようにしてください。</li>
<li>JRE ツール -- 以下のツールは、Runtime Environment の一部で、
特に指定されない限り、/opt/ibm/java-i386-60/jre/bin ディレクトリーにあります。

<dl class="parml">
<dt class="bold">ikeyman (iKeyman GUI ユーティリティー)</dt>
<dd>これにより、鍵、証明書、および認証要求を管理できます。詳しくは、
付随する「<em>Security Guide</em> (英語)」および
<a href="http://www.ibm.com/developerworks/java/jdk/security" target="_blank">http://www.ibm.com/developerworks/java/jdk/security</a> を参照してください。また、SDK には、
このユーティリティーのコマンド行バージョンもあります。
</dd>
<dt class="bold">java (Java インタープリター)</dt>
<dd>Java クラスを実行します。Java インタープリターが、Java プログラム言語で書かれたプログラムを実行します。
</dd>
<dt class="bold">javaw (Java インタープリター)</dt>
<dd><strong>java</strong> コマンドと同様の方法で Java クラスを実行しますが、コンソール・ウィンドウは使用しません。
</dd>
<dt class="bold"><strong><span class="bold-italic">(Linux IA 32 ビット、PPC32、および PPC64 のみ) </span></strong>javaws (Java Web Start)</dt>
<dd>Java アプリケーションの配置と自動保守を可能にします。詳しくは、『<a href="#installing_webstart">Web Start の実行</a>』を参照してください。
</dd>
<dt class="bold">jextract (ダンプ抽出)</dt>
<dd>システム生成ダンプを jdmpview で使用できる共通フォーマットに変換します。詳しくは、『<a href="#sdktools__jdmpview">jdmpview</a>』を参照してください。
</dd>
<dt class="bold">keytool (鍵および証明書管理ツール)</dt>
<dd>秘密鍵の鍵ストア (データベース) とそれに関連した X.509 証明書チェーン (対応する公開鍵を認証する) を
管理します。
</dd>
<dt class="bold">kinit</dt>
<dd>Kerberos 発券許可証を取得し、キャッシュに入れます。
</dd>
<dt class="bold">klist</dt>
<dd>ローカル信任状キャッシュおよびキー・テーブル内の項目を表示します。
</dd>
<dt class="bold">ktab</dt>
<dd>ローカル・キー・テーブルに保管されているプリンシパル名およびサービス・キーを管理します。
</dd>
<dt class="bold">pack200</dt>
<dd>Java gzip 圧縮プログラムを使用して、JAR ファイルを pack200 圧縮ファイルに変換します。
</dd>
<dt class="bold">policytool (ポリシー・ファイルの作成と管理ツール)</dt>
<dd>ご使用のインストール済み環境での Java セキュリティー・ポリシーを定義する外部ポリシー構成ファイルを作成し変更します。
</dd>
<dt class="bold">rmid (RMI アクティベーション・システム・デーモン)</dt>
<dd>オブジェクトを登録し、Java 仮想マシン (JVM) で活動化できるように、アクティベーション・システム・デーモンを開始します。
</dd>
<dt class="bold">rmiregistry (Java リモート・オブジェクト・レジストリー)</dt>
<dd>現行ホストの指定ポートにリモート・オブジェクト・レジストリーを作成し、開始します。
</dd>
<dt class="bold">tnameserv (Common Object Request Broker
Architecture (CORBA) 一時ネーミング・サービス)</dt>
<dd>CORBA 一時ネーミング・サービスを開始します。
</dd>
<dt class="bold">unpack200</dt>
<dd>pack200 で作成された圧縮ファイルを JAR ファイルに変換します。
</dd>
</dl></li></ul>
<a name="sdktools"></a>
<h2 id="sdktools"><a href="#ToC_9">SDK ツールおよび参照情報</a></h2>
<div>
<p>標準 SDK に含まれているツールと参照情報のリストです。</p></div>
<p></p>
<dl class="parml">
<dt class="bold">以下のツールは SDK の一部として /opt/ibm/java-i386-60/bin ディレクトリーに配置されています。</dt>
<dd>
<dl class="parml">
<dt class="bold">appletviewer (Java アプレット・ビューアー)</dt>
<dd>Web ブラウザーの外部でアプレットをテスト、実行します。
</dd>
<dt class="bold">apt (注釈処理ツール)</dt>
<dd>検査中の指定された一連のソース・ファイル内に存在する注釈に基づいて、注釈プロセッサーを検索および実行します。
</dd>
<dt class="bold">extcheck (Extcheck ユーティリティー)</dt>
<dd>ターゲット JAR ファイルと現在インストール済みの拡張 JAR ファイル間のバージョンの矛盾を検出します。
</dd>
<dt class="bold"><strong><span class="bold-italic">(Linux IA 32 ビット、PPC32、および PPC64 のみ) </span></strong>HtmlConverter (Java Plug-in HTML Converter)</dt>
<dd>アプレットを含む HTML ページを Java Plug-in を使用できるフォーマットに変換します。
</dd>
<dt class="bold">idlj (IDL から Java コンパイラーへ) </dt>
<dd>指定の IDL ファイルから Java バインディングを生成します。
</dd>
<dt class="bold">ikeycmd (iKeyman コマンド行ユーティリティー)</dt>
<dd>鍵、証明書、および認証要求をコマンド行で管理できます。詳しくは、
付随する「<em>Security Guide</em> (英語)」および
<a href="http://www.ibm.com/developerworks/java/jdk/security" target="_blank">http://www.ibm.com/developerworks/java/jdk/security</a> を参照してください。
</dd>
<dt class="bold">jar (Java アーカイブ・ツール)</dt>
<dd>複数ファイルを単一の Java Archive (JAR) ファイルに結合させます。
</dd>
<dt class="bold">jarsigner (JAR 署名および検証ツール)</dt>
<dd>JAR ファイルの署名を生成し、署名付き JAR ファイルの署名を検証します。
</dd>
<dt class="bold">java-rmi.cgi (HTTP-to-CGI 要求転送ツール)</dt>
<dd>RMI-over-HTTP 要求を受信し、任意のポートで listen している RMI サーバーにそれらを転送します。
</dd>
<dt class="bold">javac (Java コンパイラー) </dt>
<dd>Java プログラミング言語で書かれたプログラムをバイトコード (コンパイル済み Java コード) に
コンパイルします。
</dd>
<dt class="bold">javadoc (Java ドキュメンテーション・ジェネレーター)</dt>
<dd>Java ソース・ファイルから API ドキュメンテーションの HTML ページを生成します。
</dd>
<dt class="bold">javah (C ヘッダーおよびスタブ・ファイル・ジェネレーター)</dt>
<dd>これにより、ネイティブ・メソッドを Java プログラミング言語で書かれたコードに関連付けることができます。
</dd>
<dt class="bold">javap (クラス・ファイルの逆アセンブラー)</dt>
<dd>コンパイル済みファイルを逆アセンブルし、バイトコード表記を表示できます。
</dd>
<dt class="bold">javaw (Java インタープリター)</dt>
<dd><strong>java</strong> コマンドと同様の方法で Java クラスを実行しますが、コンソール・ウィンドウは使用しません。
</dd>
<dt class="bold"><strong><span class="bold-italic">(Linux IA 32 ビット、PPC32、および PPC64 のみ) </span></strong>javaws (Java Web Start)</dt>
<dd>Java アプリケーションの配置と自動保守を可能にします。詳しくは、『<a href="#installing_webstart">Web Start の実行</a>』を参照してください。
</dd>
<dt class="bold">jconsole (JConsole モニターおよび管理ツール)</dt>
<dd>GUI を使用してローカル JVM とリモート JVM をモニターします。JMX に準拠しています。
</dd>
<dt class="bold">jdb (Java デバッガー)</dt>
<dd>Java プログラムのデバッグに役立ちます。
</dd>
<dt class="bold"><a id="sdktools__jdmpview" name="sdktools__jdmpview"></a>jdmpview (クロスプラットフォーム・ダンプ・フォーマッター)</dt>
<dd>ダンプを分析します。詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。
</dd>
<dt class="bold">native2ascii (Native-To-ASCII コンバーター)</dt>
<dd>ネイティブ・エンコード・ファイルを Latin 1 または Unicode またはその両方にエンコードされている
文字を含む ASCII ファイルに変換します。
</dd>
<dt class="bold">rmic (Java Remote Method Invocation (RMI) スタブ・コンバーター)</dt>
<dd>リモート・オブジェクトのスタブ、スケルトン、およびタイを生成します。Internet Inter-ORB Protocol (RMI-IIOP)
上の RMI サポートも含みます。
</dd>
<dt class="bold">schemagen</dt>
<dd>Javaクラスで参照される名前空間ごとにスキーマ・ファイルを作成します。
</dd>
<dt class="bold">serialver (直列化バージョン・コマンド)</dt>
<dd>新しいクラスへのコピーに適切な形式で、1 つ以上のクラスの
serialVersionUID を戻します。
</dd>
<dt class="bold">wsgen</dt>
<dd>JAX-WS Web サービスで使用する JAX-WS 移植可能成果物を生成します。
</dd>
<dt class="bold">wsimport</dt>
<dd>WSDL ファイルから JAX-WS 移植可能成果物を生成します。
</dd>
<dt class="bold">xjc</dt>
<dd>XML スキーマ・ファイルをコンパイルします。
</dd>
</dl>
</dd>
<dt class="bold">インクルード・ファイル</dt>
<dd>JNI プログラムの C ヘッダー
</dd>
<dt class="bold">デモ</dt>
<dd>demo ディレクトリーには、ユーザーが使用できるサンプル・ソース・コード、デモ、アプリケーション、
およびアプレットが入った多くのサブディレクトリーがあります。<span><font color="RED"><span id="changed">|</span>バージョン 6 以降、RMI-IIOP デモは SDK に含まれていません。</font></span>
</dd>
<dt class="bold">著作権</dt>
<dd>SDK for Linux ソフトウェアの著作権表示。
</dd>
<dt class="bold">ライセンス</dt>
<dd>
<p>ライセンス・ファイル
/opt/ibm/java-i386-60/docs/content/<em>&lt;locale&gt;</em>/LA_<em>&lt;locale&gt;</em>には、SDK for Linux ソフトウェアのご使用条件が含まれています (<em>&lt;locale&gt;</em> は使用するロケールの名前です。例えば en)。ご使用条件を
表示あるいは印刷するには、Web ブラウザーでこのファイルをオープンしてください。</p>
</dd>
</dl>
<a name="lin_install_config"></a>
<h1 id="lin_install_config"><a href="#ToC_10">SDK and Runtime Environment のインストールおよび構成</a></h1>
<div>
<p>IBM Java SDK and Runtime Environment は、RPM または .tgz ファイルからインストールできます。マシン上のすべてのユーザーに、この Java インストール済み環境へのアクセス権限を付与するのでない限り .tgz によるインストール方法を使用してください。
root アクセス権限を持っていない場合は .tgz ファイルを使用してください。</p></div>
<p>RPM ファイルを使用してインストールする場合は、Java ファイルは、/opt/ibm/java-i386-60/ にインストールされます。
本書の例は、Java が、このディレクトリーにインストールされていることを前提としています。</p>
<a name="upgrading"></a>
<h2 id="upgrading"><a href="#ToC_11">SDK のアップグレード</a></h2>
<div>
<p>SDK を前のリリースからアップグレードする場合は、アップグレードを開始する前に、
すべての構成ファイルおよびセキュリティー・ポリシー・ファイルをバックアップしてください。</p></div>
<p>
<p>これらのファイルはアップグレード処理中に上書きされた可能性があるため、
アップグレードの後に、それらのリストアまたは再構成が必要な場合があります。
ファイルのフォーマットやオプションが変わった可能性があるため、
元のファイルをリストアする前に、新しいファイルの構文を確認してください。</p></p>
<a name="installredhat4"></a>
<h2 id="installredhat4"><a href="#ToC_12">Red Hat Enterprise Linux (RHEL) 4 へのインストール</a></h2>
<div>
<p>SDK は共用ライブラリーに依存しますが、これらのライブラリーは、デフォルトでは Red Hat Enterprise Linux (RHEL) 用にインストールされません。</p></div><a id="idx1" name="idx1"></a><a id="idx2" name="idx2"></a>
<p>
<p>RHEL 4 では、これらのライブラリーを含む RPM は、次のとおりです。</p></p>
<ul>
<li><tt class="xph">compat-libstdc++-33-3.2.3</tt> および <tt class="xph">xorg-x11-deprecated-libs-6.8.1</tt>
(zSeries 以外のプラットフォーム)</li>
<li><tt class="xph">compat-libstdc++-295-2.95.3</tt> および <tt class="xph">xorg-x11-deprecated-libs-6.8.1</tt> (zSeries)</li></ul>
<p>RHEL 4 のインストール中にこれらのライブラリーを組み込むには、次のようにします。</p>
<ol type="1">
<li>「<strong>パッケージのデフォルト (Package Defaults)</strong>」画面で、「<strong>インストールするパッケージ・セットのカスタマイズ (Customize the set of packages to be installed)</strong>」を選択します。</li>
<li>「<strong>パッケージ・グループ選択 (Package Group Selection)</strong>」画面の「<strong>X Window システム (X Windows System)</strong>」の下で「<strong>詳細 (Details)</strong>」を選択し、<tt class="xph">xorg-x11-deprecated-libs</tt> が選択されていることを確認します。</li>
<li>「<strong>開発 (Development)</strong>」オプションの下で、「<strong>レガシー・ソフトウェア開発 (Legacy Software Development)</strong>」を選択します。</li></ol>
<a name="installredhat5"></a>
<h2 id="installredhat5"><a href="#ToC_13">Red Hat Enterprise Linux (RHEL) 5 へのインストール</a></h2>
<div>
<p>SDK は共用ライブラリーに依存しますが、これらのライブラリーは、デフォルトでは Red Hat Enterprise Linux (RHEL) 用にインストールされません。</p></div><a id="idx3" name="idx3"></a><a id="idx4" name="idx4"></a><a id="idx5" name="idx5"></a>
<p>
<p>RHEL 5 では、これらのライブラリーを含む RPM は、次のとおりです。</p></p>
<ul>
<li><tt class="xph">libXp-1.0.0-8</tt> (すべてのプラットフォーム)</li>
<li><tt class="xph">compat-libstdc++-33-3.2.3</tt> (zSeries 以外のプラットフォーム)</li>
<li><tt class="xph">compat-libstdc++-296-2.95.3</tt>  (zSeries)</li></ul>
<p>RHEL 5 のインストール中にこれらのライブラリーを組み込むには、次のようにします。</p>
<ol type="1">
<li>ソフトウェア選択画面で、「<strong>今すぐカスタマイズ (Customize now)</strong>」を選択します。</li>
<li>次の画面の左側のパネルで「<strong>基本システム (Base System)</strong>」を選択し、右側のパネルで「<strong>レガシー・ソフトウェア・サポート (Legacy Software Support)</strong>」を選択します。
これらを選択することにより、compat-libstdc++ パッケージがインストールされます。</li>
<li>libXp パッケージが必要ですが、インストール GUI からインストール用に選択することはできません。インストールが完了したら、シェルを開いて Red Hat インストール・メディア上の libXpパッケージを見つけ、それをインストールしてください。
例えば、32 ビット Intel プラットフォームにインストールするには、<tt class="xph">rpm -i /media/cdrom/Server/libXp-1.0.0-8.i386.rpm</tt> を実行します。</li></ol>
<a name="lin_redhat_selinux"></a>
<h3 id="lin_redhat_selinux"><a href="#ToC_14">RHEL 5 上の SELinux を使用した Java の実行</a></h3>
<div>
<p>SELinux が使用可能になっている Red Hat Enterprise Linux Version 5 上で IBM SDK for Java を実行するには、Java をデフォルト・ディレクトリーにインストールするか、コマンドを入力する必要があります。</p></div><a id="idx6" name="idx6"></a>
<p>
<p>Java がデフォルト・ディレクトリーにインストールされていない場合は、次のコマンドを入力します。</p>
<pre class="xmp">chcon -R -t texrel_shlib_t &lt;path_of_sdk&gt;</pre>
<p>ここで、<tt class="xph">&lt;path_of_sdk&gt;</tt> は、Java のインストール先のパスです。</p>
<p>SELinux について手詳しくは、Red Hat 資料の『<a href="http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/Deployment_Guide-en-US/ch-selinux.html" target="_blank">Introduction to SELinux</a>』を参照してください。</p></p>
<a name="lin_install"></a>
<h2 id="lin_install"><a href="#ToC_15">64 ビット・アーキテクチャーへの 32 ビット SDK のインストール</a></h2>
<div>
<p>SDK を実行するには、SDK (32 ビットまたは 64 ビット) で必要なすべてのライブラリーの正しいバージョンをインストールする必要があります。</p></div>
<p>
<p>RHEL4 では、64 ビット・バージョンのパッケージは、「<strong>Compatibility Arch Support</strong>」パッケージ・グループにあります。</p>
<p>RPM ツールを使用して、インストール済みのパッケージのバージョンを確認できます。これを行うには、RPM コマンドに <tt class="xph">--queryformat "%{NAME}.%{ARCH}&yen;n"</tt> オプションを追加します。例えば、次のようにします。</p></p>
<pre class="xmp">/home/username : rpm --queryformat "%{NAME}.%{ARCH}\n" -q libstdc++
libstdc++.x86_64
libstdc++.i386</pre>
<a name="lin_rpm_install"></a>
<h2 id="lin_rpm_install"><a href="#ToC_16">RPM ファイルからのインストール</a></h2>
<div>
<p>RPM ファイルからインストールするための手順です。</p></div>
<p>rpm ツールを使用して JVM をアップグレードするには、旧バージョンをすべてアンインストールする必要があります。JVM の 2 つのバージョンを別々の場所にインストールするには、rpm --force オプションを使用してバージョンの競合を無視するか、JVM を .tgz ファイルからインストールします。</p>
<ol type="1">
<li>root でログオンしていること確認して、シェル・プロンプトをオープンします。</li>
<li>シェル・プロンプトで <tt class="xph">rpm -ivh &lt;RPM file&gt;</tt> と入力します。 例えば、次のようにします。


<pre class="xmp">rpm -ivh ibm-java2-&lt;arch&gt;-sdk-6.0-0.0.&lt;arch&gt;.rpm</pre>または

<pre class="xmp">rpm -ivh ibm-java2-&lt;arch&gt;-jre-6.0-0.0.&lt;arch&gt;.rpm</pre>


<p>ここで、<tt class="xph">&lt;arch&gt;</tt> は、アーキテクチャー (i386、x86_64、ppc、ppc64、s390、または s390x) を表します。</p></li></ol>
<a name="lin_tgz_install"></a>
<h2 id="lin_tgz_install"><a href="#ToC_17">.tgz ファイルからのインストール</a></h2>
<div>
<p>.tgz ファイルからインストールするための手順です。</p></div>
<ol type="1">
<li>Java パッケージ・ファイルを保管するディレクトリーを作成します。本書の例は、/opt/ibm/java-i386-60/ にインストールされていることを前提としています。
この後で、/opt/ibm/java-i386-60/ を Java のインストール先ディレクトリーで置き換えてください。</li>
<li>シェル・プロンプトで、<tt class="xph">tar -zxvf &lt;.tgz file&gt;</tt> と入力します。 

<pre class="xmp">tar -zxvf ibm-java2-sdk-60-linux-&lt;arch&gt;.tgz</pre>または

<pre class="xmp">tar -zxvf ibm-java2-jre-60-linux-&lt;arch&gt;.tgz</pre>


<p>ここで、<tt class="xph">&lt;arch&gt;</tt> はアーキテクチャー (i386、x86_64、ppc、ppc64、s390、または s390x) を表します。</p></li>
<li>Security-Enhanced Linux (SELinux) を実行している場合は、システムに Java 共用ライブラリーを認識させる必要があります。 次のように入力します。


<pre class="xmp">chcon -R -t texrel_shlib_t /opt/ibm/java2-i386-60/jre
chcon -R -t texrel_shlib_t /opt/ibm/java2-i386-60/bin
chcon -R -t texrel_shlib_t /opt/ibm/java2-i386-60/lib</pre></li></ol>
<a name="lin_jpackage_install"></a>
<h2 id="lin_jpackage_install"><a href="#ToC_18">JPackage 互換フォーマットの使用</a></h2>
<div>
<p>IBM Java パッケージは、JPackage 互換フォーマットでも使用可能です。</p></div>
<p>
<p> SDK の管理を簡略化するために、SDK のさまざまなコンポーネントを別個の RPM として使用できるようになりました。これらのコンポーネントは、基本 Java Runtime Environment、Development Kit、Plug-in、JDBC、Demo、Sound、Source、および Fonts です。システム上の複数の Java RPM の管理を可能にする "jpackage-utils" RPM (<a href="http://jpackage.org" target="_blank">http://jpackage.org</a> からダウンロード可能) も、IBM SDK の前提条件です。JPackage 仕様について詳しくは、<a href="http://jpackage.org" target="_blank">http://jpackage.org</a> を参照してください。</p></p>
<a name="lin_config"></a>
<h2 id="lin_config"><a href="#ToC_19">SDK and
Runtime Environment for Linux の構成</a></h2>
<div>
<p>Red Hat Advanced Server でのフォント・エンコードの不整合</p></div>
<a name="wq16"></a>
<div class="note-noindent" id="wq16">
<span class="notetitle">注:</span> <span class="notebody"><strong><span class="bold-italic">(Linux IA 32 ビット中国語ユーザーのみ)</span></strong> Red Hat Advanced Server でのフォントのエンコードに不整合があるため、中国語をデフォルト言語とする環境にインストールを行う場合は、デフォルト言語を英語にしてインストールし、そのインストールが完了してから中国語に変更するようにしてください。そうしないと、中国語のフォントが表示されない可能性があります。</span></div>
<a name="pathcons"></a>
<h3 id="pathcons"><a href="#ToC_20">パスの設定</a></h3>
<div>
<p><strong>PATH</strong> 環境変数を変更すると、ご使用のパスにある既存の Java ランチャーがすべてオーバーライドされます。</p></div>
<p>
<p><strong>PATH</strong> 環境変数により、Linux は、どの現行ディレクトリーからでも javac、java、および javadoc などのプログラムおよびユーティリティーを見つけられるようになります。ご使用の <strong>PATH</strong> の現行値を表示するには、コマンド・プロンプトで次のように入力します。</p>
<pre class="xmp">echo $PATH</pre>
<p>ご使用のパスに Java ランチャーを追加するには、次のようにします。
</p>
<ol type="1">
<li>ホーム・ディレクトリーにあるシェル始動ファイル (ご使用のシェルによりますが、通常は、.bashrc) を編集し、
<strong>PATH</strong> 環境変数に絶対パスを追加してください。例えば、次のようにします。
<pre class="xmp">export PATH=/opt/ibm/java-i386-60/bin:/opt/ibm/java-i386-60/jre/bin:$PATH</pre></li>
<li>再びログオンするか、または、更新したシェル・スクリプトを実行して、新しい <strong>PATH</strong> 環境変数をアクティブにします。</li></ol></p>
<p>
<p>パスを設定した後は、任意のディレクトリーからコマンド・プロンプトでツールの名前を入力することにより、ツールを実行できます。例えば、ファイル Myfile.Java をコンパイルするには、コマンド・プロンプトで、以下のように入力します。</p></p>
<pre class="xmp">javac Myfile.Java</pre>
<a name="classpath"></a>
<h3 id="classpath"><a href="#ToC_21">クラスパスの設定</a></h3>
<div>
<p>クラスパスにより、SDK ツール (java、javac、および javadoc など) は Java クラス・ライブラリーがある場所がわかります。</p></div>
<p>
<p>以下に該当する場合のみ、クラスパスを明示的に設定する必要があります。
</p>
<ul>
<li>例えば、独自に作成したものなど異なるライブラリーまたはクラス・ファイルが必要であり、それが現行ディレクトリーにない場合。</li>
<li>bin および lib ディレクトリーの位置を変更して、同じ親ディレクトリーが既にない場合。</li>
<li>同一システム上に、異なるランタイム環境を使用する複数のアプリケーションを作成し実行する予定の場合。</li></ul>
<p><strong>CLASSPATH</strong> 環境変数の現行値を表示するには、シェル・プロンプトで次のコマンドを入力します。</p>
<pre class="xmp">    echo $CLASSPATH</pre>
<p>別にインストール済みの他のバージョンも含めて、
異なるランタイム環境を使用する複数のアプリケーションを作成し実行する場合、<strong>CLASSPATH</strong> および <strong>PATH</strong> をアプリケーションごとに明示的に設定する必要があります。複数アプリケーションを
同時に実行し、異なるランタイム環境を使用する場合、それぞれのアプリケーションが固有のシェル・プロンプトで実行される必要があります。</p></p>
<a name="lin_uninstall"></a>
<h2 id="lin_uninstall"><a href="#ToC_22">SDK and Runtime Environment for Linux のアンインストール</a></h2>
<div>
<p>SDK and Runtime Environment for Linux を除去するためのプロセスは、実行したインストールのタイプによって異なります。</p></div>
<p>手順については、『<a href="#uninstrpm">Red Hat Package Manager (RPM) パッケージのアンインストール</a>』または『<a href="#uninsttar">Tape Archive (TAR) 圧縮パッケージのアンインストール</a>』を参照してください。</p>
<a name="uninstrpm"></a>
<h3 id="uninstrpm"><a href="#ToC_23">Red Hat Package Manager (RPM) パッケージのアンインストール</a></h3>
<div>
<p>Red Hat Package Manager (RPM) パッケージをアンインストールするための手順です。</p></div><a id="idx7" name="idx7"></a><a id="idx8" name="idx8"></a><a id="idx9" name="idx9"></a>
<p>
<p>インストール可能 RPM パッケージをインストールしてある場合、SDK or Runtime Environment for Linux をアンインストールするには、次のようにします。</p></p>
<ol type="1">
<li>インストール済みの RPM パッケージを確認するために、<tt class="xph">rpm -qa |grep -i java</tt> と入力します。 

<p>インストール済みのすべての IBM Java パッケージのリストが表示されます。例えば、次のようになります。</p>
<pre class="xmp">ibm-java2-&lt;arch&gt;-jre-6.0-0.0.<em>&lt;arch&gt;</em>
ibm-java2-&lt;arch&gt;-sdk-6.0-0.0.<em>&lt;arch&gt;</em></pre>



<p>この出力は、次のような <tt class="xph">rpm -e</tt> コマンドを使用してアンインストールできるパッケージを示しています。</p>
<pre class="xmp">rpm -e ibm-java2-&lt;arch&gt;-jre-6.0-0.0.<em>&lt;arch&gt;</em>
rpm -e ibm-java2-&lt;arch&gt;-sdk-6.0-0.0.<em>&lt;arch&gt;</em></pre>



<p>あるいは、kpackage や yast2 などのグラフィック・ツールを使用することもできます。</p></li>
<li><strong>PATH</strong> ステートメントから SDK and Runtime Environment のインストール先のディレクトリーを除去します。</li>
<li>(Linux IA 32 ビットおよび PPC32 のみ) Java Plug-in をインストールしてある場合は、Web ブラウザー・ディレクトリーから Java Plug-in ファイルを除去します。</li></ol>
<a name="uninsttar"></a>
<h3 id="uninsttar"><a href="#ToC_24">Tape Archive (TAR) 圧縮パッケージ のアンインストール</a></h3>
<div>
<p>圧縮パッケージから抽出された IBM SDK for Linux, v6 を除去するためのステップのリストです。</p></div><a id="idx10" name="idx10"></a><a id="idx11" name="idx11"></a>
<ol type="1">
<li>SDK または Runtime Environment のインストール先ディレクトリーから、Runtime Environment ファイルまたは Runtime Environment ファイルを除去します。</li>
<li><strong>PATH</strong> ステートメントから、SDK または Runtime Environment のインストール先ディレクトリーを除去します。</li>
<li>再びログオンするか、または、更新したシェル・スクリプトを実行して、新しい <strong>PATH</strong> 設定をアクティブにします。</li>
<li>(Linux IA 32 ビットおよび AMD64/EM64T のみ) Java Plug-in をインストールしてある場合は、Web ブラウザー・ディレクトリーから Java Plug-in ファイルを除去します。</li></ol>
<a name="running_applications"></a>
<h1 id="running_applications"><a href="#ToC_25">Java アプリケーションの実行</a></h1>
<div>
<p>Java アプリケーションは、java ランチャーまたは JNI を使用して開始できます。設定値は、コマンド行引数、環境変数、およびプロパティー・ファイルを使用して Java アプリケーションに受け渡されます。</p></div>
<a name="invint"></a>
<h2 id="invint"><a href="#ToC_26">java および javaw コマンド</a></h2>
<div>
<p>java および javaw コマンドの簡単な概要です。</p></div>
<p>
<a name="wq24"></a>
<h3 id="wq24">目的</h3>
<p>java および javaw ツールは、Java Runtime
Environment を開始し、指定されたクラスをロードすることによって、Java アプリケーションを起動します。</p>
<p>javaw コマンドは、javaw には関連するコンソール・ウィンドウがないことを除いて、java と同一です。
コマンド・プロンプト・ウィンドウを表示したくない場合には javaw を使用してください。javaw ランチャーは、起動に失敗した場合に、エラー情報を含むダイアログ・ボックスを表示します。</p></p>
<p>
<a name="wq25"></a>
<h3 id="wq25">使用法</h3>
<p>JVM は、初期クラス (および使用されるその他のクラス) を、ブートストラップ・クラスパス、
インストールされた拡張機能、ユーザー・クラスパスの 3 カ所で検索します。クラス名または JAR ファイル名の後に指定する引数が、main 関数に渡されます。</p>
<p>java および javaw コマンドの構文は次のとおりです。</p></p>
<pre class="xmp">java [ <em>options</em> ] <em>&lt;class&gt;</em> [ <em>arguments ...</em> ]
java [ <em>options</em> ] -jar <em>&lt;file.jar&gt;</em> [ <em>arguments ...</em> ]
javaw [ <em>options</em> ] <em>&lt;class&gt;</em> [ arguments ... ]
javaw [ <em>options</em> ] -jar <em>&lt;file.jar&gt;</em> [ <em>arguments ...</em> ]</pre>
<p>
<a name="wq26"></a>
<h3 id="wq26">パラメーター</h3></p>
<dl class="parml">
<dt class="bold">[<em>options</em>]</dt>
<dd>ランタイム環境に渡されるコマンド行オプション。
</dd>
<dt class="bold"><em>&lt;class&gt;</em></dt>
<dd>始動クラス。クラスは main() メソッドを含む必要があります。
</dd>
<dt class="bold"><em>&lt;file.jar&gt;</em></dt>
<dd>呼び出す JAR ファイルの名前。<strong>-jar</strong> オプションでのみ使用されます。
指定された jar ファイルにはアプリケーションのクラスおよびリソース・ファイルが入っていて、始動クラスは Main-Class マニフェスト・ヘッダーで示される必要があります。
</dd>
<dt class="bold">[<em>arguments ...</em>]</dt>
<dd>始動クラスの main() 関数に渡されるコマンド行引数。
</dd>
</dl>
<a name="build_number"></a>
<h3 id="build_number"><a href="#ToC_30">バージョン情報の取得</a></h3>
<div>
<p>ご使用の Java インストール済み環境の IBM ビルドおよびバージョン番号は、<strong>-version</strong> オプションを使用して取得します。<span><font color="RED"><span id="changed">|</span><strong>-Xjarversion</strong> オプションを使用すると、クラスパスにあるすべての jar ファイルのバージョン情報も取得できます。</font></span></p></div>
<ol type="1">
<li>シェル・プロンプトを開きます。</li>
<li>以下のコマンドを入力します。 
<pre class="xmp">    java -version</pre> 以下に類似した情報が表示されます。




<pre class="xmp">java version "1.6.0-internal"
Java(TM) SE Runtime Environment (build 20070329_01)
IBM J9 VM (build 2.4, J2RE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260-20070326_12091 (JIT enabled)
J9VM - 20070326_12091_lHdSMR
JIT  - dev_20070326_1800
GC   - 20070319_AA)</pre>


ビルド日とバージョンが変更されます。</li></ol>
<p><font color="RED"><span id="changed">|</span>
<span id="changed">|</span><p>また、以下のコマンドを入力すると、クラスパス、ブート・クラスパス、および拡張ディレクトリーにあるすべての利用可能な jar ファイルのバージョン情報を表示することもできます。</p></p>
<span id="changed">|</span><pre class="xmp">java -Xjarversion</pre>
<span id="changed">|</span><p>以下に類似した情報が表示されます。</p>
<span id="changed">|</span><pre class="xmp">...
<span id="changed">|</span>/opt/ibm/java-i386-60/jre/lib/ext/ibmpkcs11impl.jar  VERSION: 1.0 build_20070125
<span id="changed">|</span>/opt/ibm/java-i386-60/jre/lib/ext/dtfjview.jar
<span id="changed">|</span>/opt/ibm/java-i386-60/jre/lib/ext/xmlencfw.jar  VERSION: 1.00, 20061011  LEVEL: -20061011
<span id="changed">|</span>
<span id="changed">|</span>...</pre>
<span id="changed">|</span><p>利用可能な情報はそれぞれ jar ファイルごとに異なり、jar ファイルのマニフェストにある Implementation-Version および Build-Level プロパティーから取得されます。</p></font>
<a name="specifying_options"></a>
<h3 id="specifying_options"><a href="#ToC_31">Java オプションとシステム・プロパティーの指定</a></h3>
<div>
<p>オプション・ファイルや環境変数を使用して、コマンド行に Java オプションおよびシステム・プロパティーを指定できます。</p></div>
<p>Java オプションを指定するこれらのメソッドは、優先順位の順序でリストされます。</p>
<ol type="1">
<li>コマンド行でオプションまたはプロパティーを指定します。 例えば、次のようにします。

<pre class="xmp">java -Dmysysprop1=tcpip -Dmysysprop2=wait -Xdisablejavadump MyJavaClass</pre></li>
<li>オプションを含むファイルを作成し、<strong>-Xoptionsfile=</strong><em>&lt;file&gt;</em> を使用してそれをコマンド行で指定します。</li>
<li>オプションを含む <strong>IBM_JAVA_OPTIONS</strong> という環境変数を作成します。 例えば、次のようにします。

<pre class="xmp">export IBM_JAVA_OPTIONS="-Dmysysprop1=tcpip -Dmysysprop2=wait -Xdisablejavadump"</pre></li></ol>
<p>
<p>コマンド行では、右端のオプションが左端のオプションより優先されます。
例えば、</p></p>
<pre class="xmp">java -Xint -Xjit myClass</pre>
<p> というオプションを指定したとします。
この場合、<strong>-Xjit</strong> オプションが優先されます。</p>
<a name="standard_options"></a>
<h3 id="standard_options"><a href="#ToC_32">標準オプション</a></h3>
<div>
<p>標準オプションの定義</p></div><a id="idx12" name="idx12"></a><a id="idx13" name="idx13"></a><a id="idx14" name="idx14"></a><a id="idx15" name="idx15"></a><a id="idx16" name="idx16"></a><a id="idx17" name="idx17"></a><a id="idx18" name="idx18"></a><a id="idx19" name="idx19"></a><a id="idx20" name="idx20"></a><a id="idx21" name="idx21"></a><a id="idx22" name="idx22"></a><a id="idx23" name="idx23"></a><a id="idx24" name="idx24"></a><a id="idx25" name="idx25"></a><a id="idx26" name="idx26"></a>
<p></p>
<dl class="parml">
<dt class="bold"><strong>-agentlib</strong>:<em>&lt;libname&gt;</em>[=<em>&lt;options&gt;</em>]</dt>
<dd>ネイティブ・エージェント・ライブラリー <em>&lt;libname&gt;</em> をロードします。例えば、<strong>-agentlib:hprof</strong> のようにします。詳しくは、コマンド行で <strong>-agentlib:jdwp=help</strong> と <strong>-agentlib:hprof=help</strong> を指定してください。
</dd>
<dt class="bold"><strong>-agentpath</strong>:<em>libname</em>[=<em>&lt;options&gt;</em>]</dt>
<dd>絶対パス名でネイティブ・エージェント・ライブラリーをロードします。
</dd>
<dt class="bold"><strong>-cp</strong> <em>&lt;</em>:<em> で区切られたディレクトリーおよび zip または jar ファイル&gt;</em></dt>
<dd>アプリケーション・クラスおよびリソースの検索パスを設定します。<strong>-classpath</strong> および <strong>-cp</strong> を使用せず、<strong>CLASSPATH</strong> 環境変数を設定しない場合、デフォルトでは、ユーザー・クラスパスは現行ディレクトリー (.) になります。
</dd>
<dt class="bold"><strong>-classpath</strong> <em>&lt;</em>: <em> で区切られたディレクトリーおよび zip または jar ファイル&gt;</em></dt>
<dd>アプリケーション・クラスおよびリソースの検索パスを設定します。<strong>-classpath</strong> および <strong>-cp</strong> を使用せず、<strong>CLASSPATH</strong> 環境変数を設定しない場合、デフォルトでは、ユーザー・クラスパスは現行ディレクトリー (.) になります。
</dd>
<dt class="bold"><strong>-D</strong><em>&lt;property name&gt;</em>=<em>&lt;value&gt;</em></dt>
<dd>システム・プロパティーを設定します。
</dd>
<dt class="bold"><strong>-help または -?</strong></dt>
<dd>使用法メッセージを表示します。
</dd>
<dt class="bold"><strong>-javaagent</strong>:<em>&lt;jarpath&gt;</em>[=<em>&lt;options&gt;</em>] </dt>
<dd>Java プログラミング言語エージェントをロードします。詳しくは、java.lang.instrument API の資料を参照してください。
</dd>
<dt class="bold"><strong>-jre-restrict-search</strong></dt>
<dd>バージョン検索でユーザーのプライベート JRE を含めます。
</dd>
<dt class="bold"><strong>-no-jre-restrict-search</strong></dt>
<dd>バージョン検索でユーザーのプライベート JRE を除外します。
</dd>
<dt class="bold"><strong>-showversion</strong></dt>
<dd>製品のバージョンを表示して継続します。
</dd>
<dt id="standard_options__verbose" class="bold">
<a name="standard_options__verbose"></a><strong>-verbose</strong>:<em>&lt;option&gt;</em></dt>
<dd>詳細出力を使用可能にします。使用可能なオプションは以下のとおりです。

<dl class="parml">
<dt class="bold"><strong>class</strong></dt>
<dd>ロードされたクラスごとに、stderr に項目を書き込みます。
</dd>
<dt class="bold"><strong>gc</strong></dt>
<dd>詳細なガーベッジ・コレクション情報を stderr に書き込みます。出力を制御するには、 <a href="#xoptions__xverbosegclog"><strong>-Xverbosegclog</strong></a> を使用してください。詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。
</dd>
<dt class="bold"><strong>jni</strong></dt>
<dd>アプリケーションと JVM によって呼び出される JNI サービスを説明する情報を stderr に書き込みます。
</dd>
<dt class="bold"><strong>sizes</strong></dt>
<dd>アクティブなメモリー使用量設定について説明する情報を stderr に書き込みます。
</dd>
<dt class="bold"><strong>stack</strong></dt>
<dd>各スレッドの Java および C のスタック使用量について説明する情報を stderr に書き込みます。
</dd>
</dl>
</dd>
<dt class="bold"><strong>-version</strong></dt>
<dd>製品バージョンを印刷します。
</dd>
<dt class="bold"><strong>-version</strong>:<em>&lt;value&gt;</em></dt>
<dd>指定されたバージョンの実行を要求します。例えば「1.5」などです。
</dd>
<dt class="bold"><strong>-X</strong></dt>
<dd>非標準オプションのヘルプを表示します。
</dd>
</dl>
<a name="globalization"></a>
<h3 id="globalization"><a href="#ToC_33">java コマンドのグローバリゼーション</a></h3>
<div>
<p>java および javaw ランチャー
では、現行ロケールの文字セット内の任意の文字を含む引数およびクラス名が受け入れられます。また、Java エスケープ・シーケンスを使用して、クラス名と引数に任意の Unicode 文字を指定することもできます。</p></div>
<p>これを行うには、<strong>-Xargencoding</strong> コマンド行オプションを使用します。</p>
<dl class="parml">
<dt class="bold"><strong>-Xargencoding</strong></dt>
<dd>引数エンコード方式を使用します。Unicode 文字を指定するには、エスケープ・シーケンスを <tt>&yen;u####</tt> の形式で使用します。ここで # は 16 進数字 (0 から 9、A から F) です。
</dd>
<dt class="bold"><strong>-Xargencoding:utf8</strong></dt>
<dd>UTF8 エンコード方式を使用します。
</dd>
<dt class="bold"><strong>-Xargencoding:latin</strong></dt>
<dd>ISO8859_1 エンコード方式を使用します。
</dd>
</dl>
<p>例えば、「HelloWorld」というクラスを 2 つの大文字について Unicode エンコード方式を使用して指定する場合、
次のコマンドを使用します。</p>
<pre class="xmp">java -Xargencoding '&yen;u0048ello&yen;u0057orld'</pre>
<p>java および javaw コマンドは、翻訳されたメッセージを示します。これらのメッセージは、Java が稼働しているロケールに基づいて異なります。java が戻す、エラーの詳細説明やその他のデバッグ情報は、英語で表示されます。</p>
<a name="jit"></a>
<h2 id="jit"><a href="#ToC_34">Just-In-Time (JIT) コンパイラー</a></h2>
<div>
<p>IBM Just-In-Time (JIT) コンパイラーは、Java アプリケーションやアプレットで実行中に頻繁に使用される
バイトコード・シーケンスのマシン・コードを動的に生成します。<span>JIT v6 コンパイラーは、コンパイラーの研究によって新しい最適化を実現し、
前のバージョンの JIT に実装されていた最適化を改良して、ハードウェアをより大きく活用しています。</span></p></div><a id="idx27" name="idx27"></a><a id="idx28" name="idx28"></a><a id="idx29" name="idx29"></a><a id="idx30" name="idx30"></a><a id="idx31" name="idx31"></a>
<p>IBM SDK
および Runtime Environment には共に JIT が含まれており、ユーザー・アプリケーションや SDK ツールでも、
デフォルトで使用可能に設定されています。通常、明示的に JIT を起動する必要はありません。Java バイトコードからマシン・コードへのコンパイルは、透過的に行われます。
JIT を使用不可に設定すると、問題を切り分けるのに役立ちます。Java アプリケーションまたはアプレットを実行中に問題が発生した場合には、問題を切り分けるために JIT を使用不可にすることができます。JIT を使用不可にするのは、一時的な手段のみにしてください。JIT は、パフォーマンスを最適化するために必要です。</p>
<p>JIT についての詳細は、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<a name="disjit"></a>
<h3 id="disjit"><a href="#ToC_35">JIT の使用不可化</a></h3>
<div>
<p>JIT はいくつかの異なる方法で使用不可に設定できます。どちらのコマンド行オプションも、<strong>JAVA_COMPILER</strong> 環境変数をオーバーライドします。</p></div>
<p>JIT をオフにすることは、Java アプリケーションをデバッグするときの問題の切り分けに役立つ、一時的な手段です。</p>
<ul>
<li>java アプリケーションを実行する前に、<strong>JAVA_COMPILER</strong> 環境変数に
<tt>NONE</tt> または空ストリングを設定します。 シェル・プロンプトで、次のように入力します。

<pre class="xmp">export JAVA_COMPILER=NONE</pre></li>
<li>JVM コマンド行で <strong>-D</strong> オプションを使用して、
<strong>java.compiler</strong> プロパティーに <tt>NONE</tt> または空ストリングを設定します。 シェル・プロンプトで、次のように入力します。

<pre class="xmp">java -Djava.compiler=NONE <em>&lt;class&gt;</em></pre></li>
<li>JVM コマンド行で <strong>-Xint</strong> オプションを使用します。 シェル・プロンプトで、次のように入力します。

<pre class="xmp">java -Xint <em>&lt;class&gt;</em></pre></li></ul>
<a name="enajit"></a>
<h3 id="enajit"><a href="#ToC_36">JIT の使用可能化</a></h3>
<div>
<p>デフォルトでは JIT は使用可能になっています。JIT は、以下のいくつかの異なる方法で明示的に使用可能にできます。どちらのコマンド行オプションも、<strong>JAVA_COMPILER</strong> 環境変数をオーバーライドします。</p></div>
<ul>
<li>Java アプリケーションを実行する前に、<strong>JAVA_COMPILER</strong> 環境変数に <tt>jitc</tt> を設定します。 シェル・プロンプトで、以下を入力します。

<pre class="xmp">export JAVA_COMPILER=jitc</pre> <strong>JAVA_COMPILER</strong> 環境変数が空ストリングの場合、JIT は使用不可のままになります。環境変数を使用不可に設定するには、シェル・プロンプトで以下を入力します。


<pre class="xmp">unset JAVA_COMPILER</pre></li>
<li>JVM コマンド行で <strong>-D</strong> オプションを使用して、<strong>java.compiler</strong> プロパティーに <tt>jitc</tt> を設定します。 シェル・プロンプトで、以下を入力します。

<pre class="xmp">java -Djava.compiler=jitc <em>&lt;class&gt;</em></pre></li>
<li>JVM コマンド行で <strong>-Xjit</strong> オプションを使用します。 <strong>-Xint</strong> オプションを同時に指定<strong>しないでください</strong>。 シェル・プロンプトで、以下を入力します。

<pre class="xmp">java -Xjit <em>&lt;class&gt;</em></pre></li></ul>
<a name="detjit"></a>
<h3 id="detjit"><a href="#ToC_37">JIT が使用可能かどうかを判別する</a></h3>
<div>
<p>JIT の状況は <strong>-version</strong> オプションを使用して判別できます。</p></div><a id="idx32" name="idx32"></a><a id="idx33" name="idx33"></a>
<p>java ランチャーを <strong>-version</strong> オプションで実行します。
シェル・プロンプトで、次のように入力します。 </p>
<pre class="xmp">java -version</pre> 
<p>JIT が使用できない場合には、以下の内容のメッセージが表示されます。</p>

<pre class="xmp">(JIT disabled)</pre>

<p>JIT が使用できる場合には、以下の内容のメッセージが表示されます。</p>

<pre class="xmp">(JIT enabled)</pre>
<p>JIT に付いての詳細は、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<a name="garbage"></a>
<h2 id="garbage"><a href="#ToC_38">ガーベッジ・コレクション・ポリシーの指定</a></h2>
<div>
<p>ガーベッジ・コレクターは、Java が使用するメモリーおよび JVM 内で稼働するアプリケーションが使用するメモリーを管理します。</p></div><a id="idx34" name="idx34"></a>
<p>ガーベッジ・コレクターはストレージの要求を受け取ると、ヒープ内の未使用メモリーを「割り振り」のプロセスに引き当てます。また、ガーベッジ・コレクターは、もはや参照されていないメモリー領域を確認し、それらを再利用のために
解放します。これが「コレクション」です。</p>
<p>コレクション・フェーズは、メモリーの割り振り障害がトリガーとなって起動されます。割り振り障害は、
ストレージ要求に対してスペースが残っていない場合に発生するか、または、明示的な System.gc() 呼び出しによっても
引き起こされます。</p>
<p>ガーベッジ・コレクションは、アプリケーションのパフォーマンスに大きく影響するので、IBM 仮想マシンは、ガーベッジ・コレクション実行の方法を最適化するためにさまざまな
メソッドを提供して、アプリケーションへの影響を削減するようにしています。</p>
<p>ガーベッジ・コレクションに関する詳細情報は、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<a name="garbage_options"></a>
<h3 id="garbage_options"><a href="#ToC_39">ガーベッジ・コレクションのオプション</a></h3>
<div>
<p><strong>-Xgcpolicy</strong> オプションは、ガーベッジ・コレクターの振る舞いを制御します。これは、アプリケーションおよびシステム全体のスループットと
ガーベッジ・コレクションに起因する休止時間とのトレードオフを図ります。</p></div><a id="idx35" name="idx35"></a><a id="idx36" name="idx36"></a><a id="idx37" name="idx37"></a>
<p>
<p>このオプションのフォーマットと値は次のとおりです。
</p>
<dl class="parml">
<dt class="bold"><strong>-Xgcpolicy:optthruput</strong></dt>
<dd>(デフォルトおよび推奨値。) 非常に高いスループットをアプリケーションに提供しますが、
代償として時折休止します。
</dd>
<dt class="bold"><strong>-Xgcpolicy:optavgpause</strong></dt>
<dd>ガーベッジ・コレクション休止に費やされる時間を削減し、
ヒープ・サイズの増加がガーベッジ・コレクション休止の長さに与える影響を制限します。非常に大規模なヒープが構成にある場合には、<strong>optavgpause</strong> を使用します。
</dd>
<dt class="bold"><strong>-Xgcpolicy:gencon</strong></dt>
<dd>並行と世代別の GC を組み合わせた使用を要求し、
ガーベッジ・コレクションの休止に費やされる時間を最小にするよう支援します。
</dd>
<dt class="bold"><strong>-Xgcpolicy:subpool</strong></dt>
<dd>(PPC および zSeries のみ。) 改良されたオブジェクト割り振りアルゴリズムを使用して、
ヒープでのオブジェクトの割り振り時にパフォーマンスを向上させます。このオプションは、大規模な SMP システムでパフォーマンスを向上させる可能性があります。
</dd>
</dl></p>
<a name="garbage_pause"></a>
<h3 id="garbage_pause"><a href="#ToC_40">休止時間</a></h3>
<div>
<p>アプリケーションがオブジェクトを作成しようとして、その要求がヒープ内の使用可能スペースの理由ですぐに実現しない場合に、ガーベッジ・コレクターは、参照されていないオブジェクト (ガーベッジ) を
識別してそれらを削除し、ヒープの状態を、即時および後続の割り振り要求にすぐに応じられる状態に
戻す必要があります。</p></div><a id="idx38" name="idx38"></a><a id="idx39" name="idx39"></a>
<p>そうしたガーベッジ・コレクションの繰り返しにより、アプリケーション・コードの実行時に
予期しない休止が時々起こることがあります。アプリケーションは大きく複雑になってきており、
ヒープもそれに応じて大規模になっているので、
このガーベッジ・コレクション休止時間は長さも重要度も増す傾向にあります。</p>
<p>デフォルトの
ガーベッジ・コレクション値の <strong>-Xgcpolicy:optthruput</strong> では、
非常に高いスループットがアプリケーションにもたらされますが、
こうした一時休止 (ヒープ・サイズとガーベッジの質により数ミリ秒からかなりの秒数まであり得る) が
代償になっています。</p>
<a name="pausetimereduction"></a>
<h3 id="pausetimereduction"><a href="#ToC_41">休止時間の削減</a></h3>
<div>
<p>JVM では、並行ガーベッジ・コレクションと世代別ガーベッジ・コレクションという 2 つの手法を使用して休止時間を削減します。</p></div><a id="idx40" name="idx40"></a><a id="idx41" name="idx41"></a>
<p><strong>-Xgcpolicy:optavgpause</strong> コマンド行オプションは、並行ガーベッジ・コレクションの
使用を要求し、ガーベッジ・コレクションの一時休止にあてられる時間を大幅に削減します。
並行ガーベッジ・コレクション (GC) は、一部のガーベッジ・コレクション・アクティビティーを
通常のプログラム実行と並行して行うことにより、ヒープのコレクションが原因で起きる中断を最小限に
して、一時休止時間の削減を図ります。
また、<strong>-Xgcpolicy:optavgpause</strong> オプションは、ヒープ・サイズの増加が
ガーベッジ・コレクション休止の長さに与える影響を制限します。
<strong>-Xgcpolicy:optavgpause</strong> オプションは、大容量のヒープを抱える構成の場合に
非常に有効です。
休止時間を削減することによって、アプリケーションのスループットがある程度縮小される場合があります。</p>
<p>並行ガーベッジ・コレクション時に、比較的長く存続していて収集できないオブジェクトの識別に
かなりの時間が無駄に使われています。ガーベッジ・コレクションがリサイクル可能性の最も高いオブジェクトのみに集中すれば、一部のアプリケーションの休止時間をさらに削減することができます。
世代別 GC は、ヒープを 2 つの「世代」(「新しい世代」と「古い世代」) の領域に分けることにより、休止時間を削減します。オブジェクトはその経過時間によって、この領域のどちらかに入れられます。
新しい世代領域は、2 領域の小さい方で、若いオブジェクトが入ります。一方、古い世代領域は、
大きい方で、古いオブジェクトが入ります。オブジェクトは、まず新しい世代領域に割り振られて、
長期間存続した場合には、最終的に古い世代領域にレベル上げされます。</p>
<p>世代別 GC は、長期間存続しない多くのオブジェクトに依存しています。世代別 GC は、
多くのリサイクル可能なスペースを保有する、新しい世代領域のストレージを再利用することに
活動を集中させて、一時休止時間を削減します。
ヒープ全体をコレクションするために時折でも長い休止時間をとるのではなく、新しい世代を
より頻繁に収集するので、新しい世代領域が小さければ、休止時間も比較的短くなります。
しかし、世代別 GC は、時間が経過すると存続期間が長いオブジェクトが非常に多くなり
古い世代領域がフルになる可能性があるという欠点があります。
そうした状態が発生したときに一時休止時間を最小限にするために、並行 GC と世代別 GC を組み合わせて
使用してください。
<strong>-Xgcpolicy:gencon</strong> オプションで、ガーベッジ・コレクションの一時休止の時間を
最小限にするために、並行 GC と世代別 GC を組み合わせて使用することを要求します。</p>
<a name="garbage_full_heap"></a>
<h3 id="garbage_full_heap"><a href="#ToC_42">ヒープがフルの環境</a></h3>
<div>
<p>Java ヒープがフルに近く、再利用できるガーベッジが少ししかない場合、即時使用可能なスペースがないため、新規オブジェクト用の要求がすぐには満たされないことがあります。</p></div><a id="idx42" name="idx42"></a><a id="idx43" name="idx43"></a>
<p>ヒープが容量いっぱいに近い状態で操作されている場合、どちらのガーベッジ・コレクション・オプションが使用されているのかに関係なく、アプリケーション・パフォーマンスは悪くなります。また、さらにヒープ・スペースの要求が続けば、アプリケーションは OutOfMemoryError を受け取り、その例外がキャッチされ処理されなければ、JVM は終了します。この時点で、JVM は診断時に使用できる Javadump ファイルを生成します。このような状態の場合、<strong>-Xmx</strong> オプションを使用してヒープ・サイズを増やすか、
使用中のオブジェクトの数を減らすことをお勧めします。</p>
<p>詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<a name="euro_symbol"></a>
<h2 id="euro_symbol"><a href="#ToC_43">ユーロ記号のサポート</a></h2>
<div>
<p>IBM SDK および Runtime Environment は、2002 年 1 月 1 日以降、欧州通貨共同体 (EMU) の国々のデフォルトの通貨
としてユーロを設定しています。<span>2008 年 1 月 1 日以降、キプロスおよびマルタのデフォルトの通貨としてもユーロが設定されます。</span></p></div>
<p>各国の以前の通貨を使用する場合は、Java コマンド行で <strong>-Duser.variant=PREEURO</strong> を指定してください。</p>
<p>英国、デンマーク、あるいはスウェーデンのロケールを使用している場合で、ユーロを使用するには、
Java コマンド行で <strong>-Duser.variant=EURO</strong> を指定してください。</p>
<a name="fallback_font"></a>
<h2 id="fallback_font"><a href="#ToC_44">フォールバック・フォント構成ファイル</a></h2>
<div>
<p>Linux フォールバック・フォント構成ファイル (fontconfig.RedHat.bfc および fontconfig.SuSE.bfc) は、新しいエンタープライズ Linux ディストリビューションに適したフォント設定を提供するためにインストールされています。</p></div>
<p>これらのファイルは、便宜的に提供されているに過ぎません。これらのファイルが存在するからといって、新しい Linux ディストリビューションが、IBM SDK and Runtime Environment for Linux platforms, Java Technology Edition, Version 6 のサポート対象プラットフォームであることを意味するものではありません。</p><font color="RED"><span id="changed">|</span>
<span id="changed">|</span><a name="input_method_extensions"></a>
<span id="changed">|</span><h2 id="input_method_extensions"><a href="#ToC_45">インドおよびタイ語の入力方式の使用</a></h2>
<span id="changed">|</span><div>
<span id="changed">|</span><p>バージョン 6 では、インドおよびタイ語の入力方式はデフォルトでは使用できません。インドおよびタイ語の入力方式を使用するには、入力方式の jar ファイルを Java 拡張パスに手動で組み込む必要があります。</p></div>
<span id="changed">|</span><p>バージョン 5.0 では、入力方式の jar ファイルは <a name="input_method_extensions__ext"></a><span id="input_method_extensions__ext">jre/lib/ext</span> ディレクトリーに含まれており、JVM によって自動的にロードされていました。バージョン 6 では、入力方式の jar ファイルは <a name="input_method_extensions__im"></a><span id="input_method_extensions__im">jre/lib/im</span> ディレクトリーに含まれており、インドおよびタイ語の入力方式を使用可能にするには、これを Java 拡張パスに手動で追加する必要があります。これは、以下のいずれかの方法を使用して実現できます。</p>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>indicim.jar ファイルおよび thaiim.jar ファイルを、jre/lib/im ディレクトリーから jre/lib/ext ディレクトリーにコピーします。</li>
<span id="changed">|</span><li>jre/lib/im ディレクトリーを拡張ディレクトリーのシステム・プロパティーに追加します。 以下のコマンド行オプションを使用します。
<span id="changed">|</span>
<span id="changed">|</span><pre class="xmp">java -Djava.ext.dirs=/opt/ibm/java-i386-60/jre/lib/ext:/opt/ibm/java-i386-60/jre/lib/im <em>&lt;class&gt;</em></pre></li></ul>
<span id="changed">|</span><p>
<span id="changed">|</span><p>SDK または Runtime Environment を別のディレクトリーにインストールした場合、SDK または Runtime Environment をインストールした
<span id="changed">|</span>ディレクトリーで /opt/ibm/java-i386-60/ を置き換えてください。</p></p></font>
<a name="developing"></a>
<h1 id="developing"><a href="#ToC_46">SDK を使用した Java アプリケーションの開発</a></h1>
<div>
<p>SDK for Linux には、Java ソフトウェア開発に必要な多数のツールおよびライブラリーが含まれています。</p></div>
<p> 使用可能なツールの詳細については、<a href="#sdktools">SDK ツールおよび参照情報</a>を参照してください。</p><font color="RED"><span id="changed">|</span>
<span id="changed">|</span><a name="xml_using"></a>
<span id="changed">|</span><h2 id="xml_using"><a href="#ToC_47">XML の使用</a></h2>
<span id="changed">|</span><div>
<span id="changed">|</span><p>IBM SDK には、XML4J パーサー、XL XP-J パーサー、XL TXE-J 1.0 XSLT コンパイラー、XSLT4J XSLT インタープリターが組み込まれています。
<span id="changed">|</span>これらのツールを使用すると、XML 処理の実装とは関係なく、XML 文書を解析、検証、変換、およびシリアライズできます。</p></div><a id="idx44" name="idx44"></a><a id="idx45" name="idx45"></a>
<span id="changed">|</span><p>
<span id="changed">|</span><p> ファクトリー・ファインダーを使用して抽象ファクトリー・クラスの実装を検出します (<a href="#xml_using__select_processor">XML プロセッサーの選択</a>を参照)。
<span id="changed">|</span>ファクトリー・ファインダーを使用することにより、Java コードを変更せずに、他の XML ライブラリーを選択できます。</p></p>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq40"></a>
<span id="changed">|</span><h3 id="wq40">使用可能な XML ライブラリー</h3>
<span id="changed">|</span><p>IBM SDK for Java には、以下の XML ライブラリーが含まれています。</p></p>
<span id="changed">|</span><dl>
<span id="changed">|</span><dt class="bold">XML4J 4.5</dt>
<span id="changed">|</span><dd>
<span id="changed">|</span><p>XML4J は、以下の規格をサポートしている検証パーサーです。
<span id="changed">|</span></p>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>XML 1.0 (第 4 版)</li>
<span id="changed">|</span><li>XML 1.0 (第 2 版) の名前空間</li>
<span id="changed">|</span><li>XML 1.1 (第 2 版)</li>
<span id="changed">|</span><li>XML 1.1 (第 2 版) の名前空間</li>
<span id="changed">|</span><li>W3C XML Schema 1.0 (第 2 版)</li>
<span id="changed">|</span><li>XInclude 1.0 (第 2 版)</li>
<span id="changed">|</span><li>OASIS XML Catalogs 1.0</li>
<span id="changed">|</span><li>SAX 2.0.2</li>
<span id="changed">|</span><li>DOM Level 3 Core, Load and Save</li>
<span id="changed">|</span><li>DOM Level 2 Core, Events, Traversal and Range</li>
<span id="changed">|</span><li>JAXP 1.4</li></ul>
<span id="changed">|</span>
<span id="changed">|</span><p>XML4J 4.5 は Apache Xerces-J 2.9.0 に基づいています。詳しくは、<a href="http://xerces.apache.org/xerces2-j/" target="_blank">http://xerces.apache.org/xerces2-j/</a> を参照してください。</p>
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold">XL XP-J 1.1</dt>
<span id="changed">|</span><dd>
<span id="changed">|</span><p>XL XP-J 1.1 は 高性能非検証パーサーであり、XML 1.0 および XML 1.1 文書のプル解析とストリーミング・シリアライゼーションのための双方向 API である StAX 1.0 (JSR 173) をサポートしています。XL XP-J 1.1 でサポートされている内容についての詳細は、<a href="#xlxpj_reference">XL XP-J 参照情報</a>を参照してください。</p>
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold">XL TXE-J 1.0.1 Beta</dt>
<span id="changed">|</span><dd>
<span id="changed">|</span><p>バージョン 5.0 では、IBM SDK for Java に XSLT4J のコンパイラーとインタープリターが組み込まれていました。
<span id="changed">|</span>XSLT4J インタープリターがデフォルトで使用されていました。</p>
<span id="changed">|</span>
<span id="changed">|</span><p>バージョン
<span id="changed">|</span>6 では、IBM SDK for Java に XL TXE-J が組み込まれています。XL TXE-J には、XSLT4J 2.7.8 インタープリターと新規 XSLT コンパイラーが組み込まれています。
<span id="changed">|</span>この新規コンパイラーはデフォルトで使用されます。XSLT4J コンパイラーはすでに
<span id="changed">|</span>IBM SDK
<span id="changed">|</span>for Java に組み込まれていません。XL TXE-J へのマイグレーションについては、<a href="#xslt_migration_steps">XL-TXE-J のマイグレーション</a>を参照してください。</p>
<span id="changed">|</span>
<span id="changed">|</span><p>XL TXE-J は、次の規格をサポートしています。
<span id="changed">|</span></p>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>XSLT 1.0</li>
<span id="changed">|</span><li>XPath 1.0</li>
<span id="changed">|</span><li>JAXP 1.4</li></ul>
<span id="changed">|</span></dd>
<span id="changed">|</span></dl>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="xml_using__select_processor"></a>
<span id="changed">|</span><h3 id="xml_using__select_processor">XML プロセッサーの選択</h3>
<span id="changed">|</span><p>XML プロセッサーの選択は、
<span id="changed">|</span>サービス・プロバイダーを使用して実行されます。ファクトリー・ファインダーを使用している場合、Java は以下の場所で、使用するサービス・プロバイダーを検索します。
<span id="changed">|</span></p>
<span id="changed">|</span><ol type="1">
<span id="changed">|</span><li>サービス・プロバイダーと同じ名前を持つシステム・プロパティー</li>
<span id="changed">|</span><li><strong>XMLEventFactory、XMLInputFactory、XMLOutputFactory のみ:</strong> /opt/ibm/java-i386-60/jre/lib/stax.properties ファイル内のサービス・プロバイダーの値</li>
<span id="changed">|</span><li><strong>その他のファクトリーの場合:</strong> /opt/ibm/java-i386-60/jre/lib/jaxp.properties ファイル内のサービス・プロバイダーの値</li>
<span id="changed">|</span><li>META-INF/services/&lt;service.provider&gt;ファイルの内容</li>
<span id="changed">|</span><li>デフォルトのサービス・プロバイダー</li></ol>
<span id="changed">|</span><p>以下のサービス・プロバイダーは、Java が使用する XML 処理ライブラリーを制御します。
<span id="changed">|</span></p>
<span id="changed">|</span><dl class="parml">
<span id="changed">|</span><dt class="bold"><strong>javax.xml.parsers.SAXParserFactory</strong></dt>
<span id="changed">|</span><dd>SAX パーサーを選択します。デフォルトでは、XML4J ライブラリーの org.apache.xerces.jaxp.SAXParserFactoryImpl が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.parsers.DocumentBuilderFactory</strong></dt>
<span id="changed">|</span><dd>文書ビルダーを選択します。デフォルトでは、XML4J ライブラリーの org.apache.xerces.jaxp.DocumentBuilderFactoryImpl が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.datatype.DatatypeFactory</strong></dt>
<span id="changed">|</span><dd>データ型ファクトリーを選択します。デフォルトでは、XML4J ライブラリーの org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.stream.XMLEventFactory</strong></dt>
<span id="changed">|</span><dd>StAX イベント・ファクトリーを選択します。デフォルトでは、XL XP-J ライブラリーの com.ibm.xml.xlxp.api.stax.XMLEventFactoryImpl が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.stream.XMLInputFactory</strong></dt>
<span id="changed">|</span><dd>StAX パーサーを選択します。デフォルトでは、XL XP-J ライブラリーの com.ibm.xml.xlxp.api.stax.XMLInputFactoryImpl が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.stream.XMLOutputFactory</strong></dt>
<span id="changed">|</span><dd>StAX シリアライザーを選択します。デフォルトでは、XL XP-J ライブラリーの com.ibm.xml.xlxp.api.stax.XMLOutputFactoryImpl が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.transform.TransformerFactory</strong></dt>
<span id="changed">|</span><dd>XSLT プロセッサーを選択します。可能な値は以下のとおりです。
<span id="changed">|</span>
<span id="changed">|</span><dl class="parml">
<span id="changed">|</span><dt class="bold">com.ibm.xtq.xslt.jaxp.compiler.TransformerFactoryImpl</dt>
<span id="changed">|</span><dd>XL TXE-J  コンパイラーを使用します。これはデフォルトです。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold">org.apache.xalan.processor.TransformerFactoryImpl</dt>
<span id="changed">|</span><dd>XSLT4J インタープリターを使用します。
<span id="changed">|</span></dd>
<span id="changed">|</span></dl>
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.validation.SchemaFactory:http://www.w3.org/2001/XMLSchema</strong></dt>
<span id="changed">|</span><dd>W3C XML Schema 言語のスキーマ・ファクトリーを選択します。デフォルトでは、XML4J ライブラリーの org.apache.xerces.jaxp.validation.XMLSchemaFactory が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span><dt class="bold"><strong>javax.xml.xpath.XPathFactory</strong></dt>
<span id="changed">|</span><dd>XPath プロセッサーを選択します。デフォルトでは、XSLT4J ライブラリーの org.apache.xpath.jaxp.XPathFactoryImpl が使用されます。
<span id="changed">|</span></dd>
<span id="changed">|</span></dl></p>
<span id="changed">|</span><a name="xslt_migration_steps"></a>
<span id="changed">|</span><h3 id="xslt_migration_steps"><a href="#ToC_50">XL-TXE-J のマイグレーション</a></h3>
<span id="changed">|</span><div>
<span id="changed">|</span><p>デフォルト XSLT プロセッサーは、XSLT4J インタープリターから XL TXE-J コンパイラーに置き換わりました。新しいライブラリーに対応するようにアプリケーションを準備するには、次の手順で操作します。</p></div>
<span id="changed">|</span><p>
<span id="changed">|</span><p>同じ変換を複数回適用する場合、XL TXE-J コンパイラーは XSLT4J インタープリターよりも高速です。各変換を一度ずつしか実行しない場合は、XL TXE-J コンパイラーのほうが XSLT4J インタープリターよりも低速です。これは、コンパイルと最適化のオーバーヘッドが原因です。</p>
<span id="changed">|</span><p>XSLT4J インタープリターを引き続き XSLT プロセッサーとして使用するには、<strong>javax.xml.transform.TransformerFactory</strong> サービス・プロバイダーを
<span id="changed">|</span>org.apache.xalan.processor.TransformerFactoryImpl に設定してください。</p>
<span id="changed">|</span><p>XL-TXE-J コンパイラーにマイグレーションするには、次の手順で操作します。</p></p>
<span id="changed">|</span><ol type="1">
<span id="changed">|</span><li><strong>javax.xml.transform.TransformerFactory</strong> サービス・プロバイダーを設定する場合、 com.ibm.xtq.xslt.jaxp.compiler.TransformerFactoryImpl を使用します。</li>
<span id="changed">|</span><li>XSLT4J コンパイラーによって生成されたクラス・ファイルを再生成します。XL TXE-J では、XSLT4J コンパイラーによって生成されたクラス・ファイルを実行できません。</li>
<span id="changed">|</span><li>コンパイラーにより生成される一部のメソッドが、JVM メソッドのサイズ制限を超えることがあります。この場合、コンパイラーはサイズ制限を超過したメソッドを小さなメソッドに分割する操作を試行します。
<span id="changed">|</span>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>コンパイラーによりメソッドが正常に分割されると、次の警告が表示されます:「一部の生成された関数が JVM メソッドのサイズ制限を超過し、自動的に小さい関数に分割されました。パフォーマンスを向上させるには、非常に大きいテンプレートを小さいテンプレートに分割したり、Process コマンドや Compile コマンドで 'splitlimit' オプションを使用したり、'http://www.ibm.com/xmlns/prod/xltxe-j/split-limit' TransformerFactory 属性を設定します。」という警告が表示されます。コンパイル済みクラスを使用できますが、分割制限を手動で制御することによってパフォーマンスを向上させることができます。</li>
<span id="changed">|</span><li>コンパイラーがメソッドを分割できないと、「com.ibm.xtq.bcel.generic.ClassGenException:
<span id="changed">|</span>Branch target offset too large for short」または「bytecode array size &gt; 65535 at offset=#####」という例外が表示されます。分割制限を手動で設定するか、または分割制限を小さくしてください。</li></ul> 分割制限を設定するには、Process コマンドまたは Compile コマンドを使用するときに <strong>-SPLITLIMIT</strong> オプションを使用するか、または transformer factory を使用するときに <strong>http://www.ibm.com/xmlns/prod/xltxe-j/split-limit</strong> transformerfactory 属性を使用します。分割制限は 100 から 2000 の間に設定できます。分割制限を手動で設定する場合、最善のパフォーマンスを得るには、設定可能な最大の分割制限を使用してください。</li>
<span id="changed">|</span><li>XL TXE-J は、XSLT4J コンパイラーよりも多くのメモリーを必要とします。メモリーが不足してきた場合、またはパフォーマンスが遅いように思える場合は、<strong>-Xmx</strong> オプションを使用してヒープ・サイズを大きくしてください。</li>
<span id="changed">|</span><li>新規属性キーを使用するようにアプリケーションをマイグレーションします。古い TransformerFactory 属性キーは使用してはいけません。古い名前は受け入れられますが、警告が出されます。 
<span id="changed">|</span>
<span id="changed">|</span><a name="wq44"></a>
<span id="changed">|</span><table id="wq44" width="90%" summary="" border="1" frame="border" rules="all">
<span id="changed">|</span><caption>表 1. 属性キーの XSL4J コンパイラーから XL TXE-J コンパイラー</caption>
<span id="changed">|</span><thead valign="bottom">
<span id="changed">|</span><tr valign="bottom">
<span id="changed">|</span><th id="wq45" align="left">XSL4J コンパイラー属性</th>
<span id="changed">|</span><th id="wq46" align="left">XL TXE-J コンパイラー属性</th>
<span id="changed">|</span></tr>
<span id="changed">|</span></thead>
<span id="changed">|</span><tbody valign="top">
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">translet-name</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/translet-name</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">destination-directory</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/destination-directory</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">package-name</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/package-name</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">jar-name</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/jar-name</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">generate-translet</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/generate-translet</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">auto-translet</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/auto-translet</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">use-classpath</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/use-classpath</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">debug</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/debug</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">indent-number</td>
<span id="changed">|</span><td headers="wq46">http://www.ibm.com/xmlns/prod/xltxe-j/indent-number</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq45">enable-inlining</td>
<span id="changed">|</span><td headers="wq46"><em>新規コンパイラーでは廃止</em></td>
<span id="changed">|</span></tr>
<span id="changed">|</span></tbody>
<span id="changed">|</span></table></li>
<span id="changed">|</span><li>オプション: 最高のパフォーマンスを実現するためには、再利用可能な XSLT 変換を再コンパイルしないようにしてください。 コンパイル済みの変換を再利用するためには、以下のいずれかの方法を使用します。
<span id="changed">|</span>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>ランタイム時にスタイルシートが変更されない場合は、ビルド・プロセスの一部としてテンプレートをコンパイルし、コンパイル済みのクラスをクラスパス上に配置します。
<span id="changed">|</span>org.apache.xalan.xsltc.Compile コマンドを使用してスタイルシートをコンパイルし、<strong>http://www.ibm.com/xmlns/prod/xltxe-j/use-classpath</strong> TransformerFactory  属性を <tt>true</tt> に設定して、クラスパスからクラスをロードするようにします。</li>
<span id="changed">|</span><li>アプリケーションを複数回実行するときに、同一のスタイルシートが使用される場合は、<strong>http://www.ibm.com/xmlns/prod/xltxe-j/auto-translet</strong> TransformerFactory 属性を <tt>true</tt> に設定すると、コンパイル済みスタイルシートが自動的にディスクに保存されて、再利用可能になります。コンパイラーは、コンパイル済みスタイルシートが使用可能な場合はそれを使用し、使用可能でない場合や期限切れの場合は、新規にスタイルシートをコンパイルします。<strong>http://www.ibm.com/xmlns/prod/xltxe-j/destination-directory</strong> TransformerFactory 属性を使用して、コンパイル済みスタイルシートを保管するために使用するディレクトリーを設定します。
<span id="changed">|</span>デフォルトでは、コンパイル済みスタイルシートは、スタイルシートと同じディレクトリーに保管されます。</li>
<span id="changed">|</span><li>アプリケーションが長期実行アプリケーションで、同一のスタイルシートを再利用する場合は、 TransformerFactory を使用してスタイルシートをコンパイルし、Templates オブジェクトを作成します。Templates オブジェクトを使用すると、スタイルシートを再コンパイルせずに Transformer オブジェクトを作成できます。
<span id="changed">|</span>Transformer オブジェクトも再利用は可能ですが、スレッド・セーフではありません。</li></ul></li></ol>
<span id="changed">|</span><a name="xml_reference"></a>
<span id="changed">|</span><h3 id="xml_reference"><a href="#ToC_51">XML 参照情報</a></h3>
<span id="changed">|</span><div>
<span id="changed">|</span><p>XL XP-J ライブラリーと XL TXE-J XML ライブラリーは、SDK バージョン 6 の新機能です。この参照情報では、これらのライブラリーでサポートされる機能について説明します。</p></div><span id="changed">|</span>
<span id="changed">|</span><a name="xlxpj_reference"></a>
<span id="changed">|</span><h4 id="xlxpj_reference">XL XP-J 参照情報</h4>
<span id="changed">|</span><div>
<span id="changed">|</span><p>XL XP-J 1.1 は 高性能非検証パーサーであり、XML 1.0 および XML 1.1 文書のプル解析とストリーミング・シリアライゼーションのための双方向 API である StAX 1.0 (JSR 173) をサポートしています。</p></div>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq47"></a>
<span id="changed">|</span><h5 id="wq47">サポートされない機能</h5>
<span id="changed">|</span><p>XL XP-J でサポートされない StAX のオプション機能を次に示します。
<span id="changed">|</span></p>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>XMLStreamReader または XMLEventReader を使用する場合の DTD 検証。
<span id="changed">|</span>XL XP-J パーサーは非検証パーサーです。</li>
<span id="changed">|</span><li>XMLStreamReader または XMLEventReader を使用する場合のロケーション情報。
<span id="changed">|</span>Location オブジェクトの getCharacterOffset()、getColumnNumber()、および getLineNumber() メソッドに対して照会を実行すると、文書内でのパーサーの現在位置に関係なく -1 が戻されます。</li></ul></p>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq48"></a>
<span id="changed">|</span><h5 id="wq48">XMLInputFactory 参照</h5>
<span id="changed">|</span><p>javax.xml.stream.XMLInputFactory 実装でサポートされているプロパティーを次に示します。これらのプロパティーの説明については、<a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLInputFactory.html" target="_blank">XMLInputFactoryJavadoc</a> を参照してください。</p></p>
<span id="changed">|</span><a name="wq49"></a>
<span id="changed">|</span><table id="wq49" width="100%" summary="" border="1" frame="border" rules="all">
<span id="changed">|</span><caption>表 2. </caption>
<span id="changed">|</span><thead valign="bottom">
<span id="changed">|</span><tr valign="bottom">
<span id="changed">|</span><th id="wq50" align="left">プロパティー名</th>
<span id="changed">|</span><th id="wq51" align="left">サポートの有無</th>
<span id="changed">|</span></tr>
<span id="changed">|</span></thead>
<span id="changed">|</span><tbody valign="top">
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.isValidating</strong></td>
<span id="changed">|</span><td headers="wq51">なし。XL XP-J スキャナーでは検証はサポートされていません。</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.isNamespaceAware</strong></td>
<span id="changed">|</span><td headers="wq51">あり (true および false がサポートされています)。DOMSource から作成された XMLStreamReader では、名前空間の処理は、DOM ツリーを作成するときに使用されたメソッドによって異なります。この値の効果はありません。</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.isCoalescing</strong></td>
<span id="changed">|</span><td headers="wq51">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.isReplacingEntityReferences</strong></td>
<span id="changed">|</span><td headers="wq51">あり。DOMSource から作成された XMLStreamReader では、DOM ツリーでエンティティーが既に置換されている場合はこのパラメーターの効果はありません。</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.isSupportingExternalEntities</strong></td>
<span id="changed">|</span><td headers="wq51">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.supportDTD</strong></td>
<span id="changed">|</span><td headers="wq51">なし。DTD は常にサポートされています。この値を false に設定しても効果がありません。</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.reporter</strong></td>
<span id="changed">|</span><td headers="wq51">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq50"><strong>javax.xml.stream.resolver</strong></td>
<span id="changed">|</span><td headers="wq51">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span></tbody>
<span id="changed">|</span></table>
<span id="changed">|</span><p>XL XP-J では、オプションのメソッド createXMLStreamReader(javax.xml.transform.Source) もサポートされています。このメソッドは、DOM ソースおよび SAX ソースからの StAX リーダーを作成できるようにします。</p>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq52"></a>
<span id="changed">|</span><h5 id="wq52">XMLStreamReader 参照</h5>
<span id="changed">|</span><p>javax.xml.stream.XMLStreamReader 実装でサポートされているプロパティーを次に示します。これらのプロパティーの説明については、<a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamReader.html" target="_blank">XMLStreamReader Javadoc</a> を参照してください。</p></p>
<span id="changed">|</span><a name="wq53"></a>
<span id="changed">|</span><table id="wq53" width="100%" summary="" border="1" frame="border" rules="all">
<span id="changed">|</span><caption>表 3. </caption>
<span id="changed">|</span><thead valign="bottom">
<span id="changed">|</span><tr valign="bottom">
<span id="changed">|</span><th id="wq54" align="left">プロパティー名</th>
<span id="changed">|</span><th id="wq55" align="left">サポートの有無</th>
<span id="changed">|</span></tr>
<span id="changed">|</span></thead>
<span id="changed">|</span><tbody valign="top">
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq54"><strong>javax.xml.stream.entities</strong></td>
<span id="changed">|</span><td headers="wq55">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq54"><strong>javax.xml.stream.notations</strong></td>
<span id="changed">|</span><td headers="wq55">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span></tbody>
<span id="changed">|</span></table>
<span id="changed">|</span><p>XL XP-J では、<strong>javax.xml.stream.isInterning</strong> プロパティーもサポートされています。このプロパティーは、API 呼び出しから戻された XML 名と名前空間 URI がパーサーにより拘束されていたかどうかを示すブール値を戻します。</p>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq56"></a>
<span id="changed">|</span><h5 id="wq56">XMLOutputFactory 参照</h5>
<span id="changed">|</span><p>javax.xml.stream.XMLOutputFactory 実装でサポートされるプロパティーを次に示します。これらのプロパティーの説明については、<a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLOutputFactory.html" target="_blank">XMLOutputFactory Javadoc</a> を参照してください。</p></p>
<span id="changed">|</span><a name="wq57"></a>
<span id="changed">|</span><table id="wq57" width="100%" summary="" border="1" frame="border" rules="all">
<span id="changed">|</span><caption>表 4. </caption>
<span id="changed">|</span><thead valign="bottom">
<span id="changed">|</span><tr valign="bottom">
<span id="changed">|</span><th id="wq58" align="left">プロパティー名</th>
<span id="changed">|</span><th id="wq59" align="left">サポートの有無</th>
<span id="changed">|</span></tr>
<span id="changed">|</span></thead>
<span id="changed">|</span><tbody valign="top">
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq58"><strong>javax.xml.stream.isRepairingNamespaces</strong></td>
<span id="changed">|</span><td headers="wq59">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span></tbody>
<span id="changed">|</span></table>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq60"></a>
<span id="changed">|</span><h5 id="wq60">XMLStreamWriter 参照</h5>
<span id="changed">|</span><p>javax.xml.stream.XMLStreamWriter 実装でサポートされているプロパティーを次に示します。これらのプロパティーの説明については、<a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html" target="_blank">XMLStreamWriter Javadoc</a> を参照してください。</p></p>
<span id="changed">|</span><a name="wq61"></a>
<span id="changed">|</span><table id="wq61" width="100%" summary="" border="1" frame="border" rules="all">
<span id="changed">|</span><caption>表 5. </caption>
<span id="changed">|</span><thead valign="bottom">
<span id="changed">|</span><tr valign="bottom">
<span id="changed">|</span><th id="wq62" align="left">プロパティー名</th>
<span id="changed">|</span><th id="wq63" align="left">サポートの有無</th>
<span id="changed">|</span></tr>
<span id="changed">|</span></thead>
<span id="changed">|</span><tbody valign="top">
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq62"><strong>javax.xml.stream.isRepairingNamespaces</strong></td>
<span id="changed">|</span><td headers="wq63">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span></tbody>
<span id="changed">|</span></table>
<span id="changed">|</span><p>XMLStreamWriter オブジェクトのプロパティーは読み取り専用です。</p><span id="changed">|</span>
<span id="changed">|</span><a name="xltxej_reference"></a>
<span id="changed">|</span><h4 id="xltxej_reference">XL TXE-J 参照情報</h4>
<span id="changed">|</span><div>
<span id="changed">|</span><p>XL TXE-J は、XSLT4J 2.7.8 インタープリターと XSLT コンパイラーが組み込まれた XSLT ライブラリーです。</p></div>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq64"></a>
<span id="changed">|</span><h5 id="wq64">機能の比較表</h5></p>
<span id="changed">|</span><a name="wq65"></a>
<span id="changed">|</span><table id="wq65" width="100%" summary="" border="1" frame="border" rules="all">
<span id="changed">|</span><caption>表 6. XSLT4J インタープリター、XSLT4J コンパイラー、XL TXE-J コンパイラーの機能の比較</caption>
<span id="changed">|</span><thead valign="bottom">
<span id="changed">|</span><tr valign="bottom">
<span id="changed">|</span><th id="wq66" width="46%" align="left">機能</th>
<span id="changed">|</span><th id="wq67" width="17%" align="left">XSLT4J インタープリター (組み込み)</th>
<span id="changed">|</span><th id="wq68" width="17%" align="left">XSLT4J コンパイラー (非組み込み)</th>
<span id="changed">|</span><th id="wq69" width="17%" align="left">XL TXE-J コンパイラー (組み込み)</th>
<span id="changed">|</span></tr>
<span id="changed">|</span></thead>
<span id="changed">|</span><tbody valign="top">
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.stream.StreamSource/feature 機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.stream.StreamResult/feature
<span id="changed">|</span>機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.dom.DOMSource/feature 機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.dom.DOMResult/feature 機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.sax.SAXSource/feature 機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.sax.SAXResult/feature 機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.stax.StAXSource/feature 機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.stax.StAXResult/feature 機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.sax.SAX TransformerFactory/feature
<span id="changed">|</span>機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.transform.sax.SAX TransformerFactory/feature/xmlfilter
<span id="changed">|</span>機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://javax.xml.XMLConstants/feature/secure-processing
<span id="changed">|</span>機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://xml.apache.org/xalan/features/incremental 属性</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://xml.apache.org/xalan/features/optimize 属性</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">http://xml.apache.org/xalan/properties/source-location
<span id="changed">|</span>属性</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">translet-name 属性</td>
<span id="changed">|</span><td headers="wq67">該当なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">destination-directory 属性</td>
<span id="changed">|</span><td headers="wq67">該当なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">package-name 属性</td>
<span id="changed">|</span><td headers="wq67">該当なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">jar-name 属性</td>
<span id="changed">|</span><td headers="wq67">該当なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">generate-translet 属性</td>
<span id="changed">|</span><td headers="wq67">該当なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">auto-translet 属性</td>
<span id="changed">|</span><td headers="wq67">該当なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">use-classpath 属性</td>
<span id="changed">|</span><td headers="wq67">該当なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">enable-inlining 属性</td>
<span id="changed">|</span><td headers="wq67">なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">なし (TL TXE-J では廃止)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">indent-number 属性</td>
<span id="changed">|</span><td headers="wq67">なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">debug 属性</td>
<span id="changed">|</span><td headers="wq67">なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり (新規名付き)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">Java 拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td colspan="2" headers="wq68 wq69">あり (短縮構文のみ。xalan:component/xalan:script
<span id="changed">|</span>構文はサポートされません。)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">JavaScript 拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">拡張エレメント</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">EXSLT 拡張機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり (動的は除く)</td>
<span id="changed">|</span><td headers="wq69">あり (動的は除く)</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">リダイレクト拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり (redirect:open および redirect:close は除く)</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">出力拡張</td>
<span id="changed">|</span><td headers="wq67">なし</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">nodeset 拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">NodeInfo 拡張機能</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">SQL ライブラリー拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">pipeDocument 拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">evaluate 拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">tokenize 拡張</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">なし</td>
<span id="changed">|</span><td headers="wq69">なし</td>
<span id="changed">|</span></tr>
<span id="changed">|</span><tr>
<span id="changed">|</span><td headers="wq66">XML 1.1</td>
<span id="changed">|</span><td headers="wq67">あり</td>
<span id="changed">|</span><td headers="wq68">あり</td>
<span id="changed">|</span><td headers="wq69">あり</td>
<span id="changed">|</span></tr>
<span id="changed">|</span></tbody>
<span id="changed">|</span></table>
<span id="changed">|</span><p>
<span id="changed">|</span><a name="wq70"></a>
<span id="changed">|</span><h5 id="wq70">注</h5>
<span id="changed">|</span><p>Process コマンドでは、StAX ストリーム処理を使用して変換を行うには <strong>-FLAVOR sr2sw</strong> を、StAX イベント処理の場合は <strong>-FLAVOR er2ew</strong> を使用してください。</p>
<span id="changed">|</span><p>新規コンパイラーは、
<span id="changed">|</span>org.apache.xalan.xsltc.dom.XSLTCDTMManager サービス・プロバイダーを検索しません。その代わり、StreamSource が使用されている場合、コンパイラーはハイパフォーマンス XML パーサーに切り替わります。</p>
<span id="changed">|</span><p>XL TXE-J では、インライン化は廃止されました。
<span id="changed">|</span></p>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>Process コマンドの <strong>-XN</strong> オプションは、サイレントに無視されます。</li>
<span id="changed">|</span><li>Compile コマンドの <strong>-n</strong> オプションは、サイレントに無視されます。</li>
<span id="changed">|</span><li><strong>enable-inlining</strong> TransformerFactory 属性は、サイレントに無視されます。</li></ul>
<span id="changed">|</span><p>org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl クラスはサポートされなくなりました。</p></p>
<span id="changed">|</span><a name="old_xerces"></a>
<span id="changed">|</span><h4 id="old_xerces">旧バージョンの Xerces または Xalan の使用</h4>
<span id="changed">|</span><div>
<span id="changed">|</span><p>旧バージョンの Xerces (2.0 より前) または Xalan (2.3 より前) を
<span id="changed">|</span>endorsed ディレクトリーに入れて使用している場合、アプリケーションを起動したときに NullPointerException が発生する可能性があります。
<span id="changed">|</span>この例外は、これらの古いバージョンが jaxp.properties ファイルを正しく処理しないために起きます。</p></div>
<span id="changed">|</span><p>
<span id="changed">|</span><p>この状態を避けるために、以下の次善策のいずれかを使用してください。
<span id="changed">|</span>
<span id="changed">|</span></p>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>最新の Java API for XML Programming (JAXP) 仕様 (http://java.sun.com/xml/jaxp/index.html) を
<span id="changed">|</span>実装しているアプリケーションを新規バージョンにアップグレードします。</li>
<span id="changed">|</span><li>/opt/ibm/java-i386-60/jre/lib から jaxp.properties ファイルを除去します。</li>
<span id="changed">|</span><li>/opt/ibm/java-i386-60/jre/lib にある jaxp.properties ファイルの項目のコメントを外します。</li>
<span id="changed">|</span><li><strong>-D</strong> コマンド行オプションを使用して、 <strong>javax.xml.parsers.SAXParserFactory</strong>、 <strong>javax.xml.parsers.DocumentBuilderFactory</strong>、または <strong>javax.xml.transform.TransformerFactory</strong> のシステム・プロパティーを設定します。</li>
<span id="changed">|</span><li>ご使用のアプリケーション・コードの中から、<strong>javax.xml.parsers.SAXParserFactory</strong>、<strong>javax.xml.parsers.DocumentBuilderFactory</strong>、
<span id="changed">|</span>または <strong>javax.xml.transform.TransformerFactory</strong> のシステム・プロパティーを設定します。
<span id="changed">|</span>例については、JAXP 1.4 の仕様を参照してください。</li>
<span id="changed">|</span><li><strong>IBM_JAVA_OPTIONS</strong> 環境変数を使用して、SAX パーサー、文書ビルダー、または TransformerFactory を明示的に設定します。
<span id="changed">|</span>例えば、次のようにします。
<span id="changed">|</span>
<span id="changed">|</span><pre class="xmp">export IBM_JAVA_OPTIONS=-Djavax.xml.parsers.SAXParserFactory=
<span id="changed">|</span>  org.apache.xerces.jaxp.SAXParserFactoryImpl </pre>または
<span id="changed">|</span><pre class="xmp">export IBM_JAVA_OPTIONS=-Djavax.xml.parsers.DocumentBuilderFactory=
<span id="changed">|</span>  org.apache.xerces.jaxp.DocumentBuilderFactoryImpl</pre>または
<span id="changed">|</span><pre class="xmp">export IBM_JAVA_OPTIONS=-Djavax.xml.transform.TransformerFactory=
<span id="changed">|</span>  org.apache.xalan.processor.TransformerFactoryImpl  </pre></li></ul></p></font>
<a name="debugger"></a>
<h2 id="debugger"><a href="#ToC_62">Java アプリケーションのデバッグ</a></h2>
<div>
<p>Java プログラムをデバッグするには、Java Debugger (JDB) アプリケーション、あるいは
SDK for Linux で提供される Java Platform Debugger Architecture (JPDA) を
使用して通信する他のデバッガーを使用できます。</p></div>
<p>Java を使用した問題診断について詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<a name="jdb"></a>
<h3 id="jdb"><a href="#ToC_63">Java Debugger (JDB)</a></h3>
<div>
<p>Java Debugger (JDB) は、SDK for Linux に組み込まれています。このデバッガーは、
jdb コマンドで呼び出されると、JPDA を使用して JVM に接続します。</p></div>
<p>
<p> Java アプリケーションをデバッグするには、以下のようにします。
</p>
<ol type="1">
<li id="jdb__jdb_start_jvm">
<a name="jdb__jdb_start_jvm"></a>JVM を以下のオプションを付けて開始します。

<pre class="xmp">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=<em>&lt;port&gt;</em> <em>&lt;class&gt;</em></pre>JVM は開始しても、Java アプリケーションを開始させるまでは、実行を中断します。</li>
<li>別のセッションで、デバッガーを JVM に接続できます。

<pre class="xmp">jdb -attach <em>&lt;port&gt;</em></pre>デバッガーが JVM に接続したら、一連のコマンドを実行して Java アプリケーションを
検査し制御することができます。例えば、<tt class="xph">run</tt> と入力して Java アプリケーションを
開始させることができます。</li></ol></p>
<p>
<p>JDB オプションについて詳しく調べるには、次のように入力します。</p>
<pre class="xmp">jdb -help</pre><p class="indatacontent">JDB コマンドについて詳しく調べるには、次のようにします。
</p>
<ol type="1">
<li><tt class="xph">jdb</tt> と入力します。</li>
<li>JDB のプロンプトで、<tt class="xph">help</tt> と入力します。</li></ol></p>
<p>
<p>また、JDB を使用して、リモート・マシンで実行中の Java アプリケーションもデバッグできます。
JPDA は、TCP/IP ソケットを使用してリモート JVM に接続します。
</p>
<ol type="1">
<li>JVM を以下のオプションを付けて開始します。

<pre class="xmp">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=<em>&lt;port&gt;</em> <em>&lt;class&gt;</em></pre>JVM は開始しても、Java アプリケーションを開始させるまでは、実行を中断します。</li>
<li>デバッガーをリモート JVM に接続させます。
<pre class="xmp">jdb -attach <em>&lt;host&gt;</em>:<em>&lt;port&gt;</em></pre></li></ol></p>
<p>
<p>Java Virtual Machine Debugging Interface (JVMDI) は、このリリースでサポートされていません。これは、Java Virtual Machine Tool Interface (JVMTI) に置き換えられています。</p></p>
<p>
<p>JDB と JPDA とその使用法について詳しくは、以下の Web サイトを参照してください。

</p>
<ul>
<li><a href="http://java.sun.com/products/jpda/" target="_blank">http://java.sun.com/products/jpda/</a></li>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/jpda/" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jpda/</a></li>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/jpda/jdb.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jpda/jdb.html</a></li></ul></p>
<a name="bit_check"></a>
<h2 id="bit_check"><a href="#ToC_64">アプリケーションが 32 ビットまたは 64 ビットのどちらの JVM で実行されているかを判別する</a></h2>
<div>
<p>Java アプリケーションの中には、それが 32 ビット JVM で実行されているか、
64 ビット JVM で実行されているかを判別可能でなければならないものがあります。例えば、アプリケーションにネイティブ・コード・ライブラリーがある場合、
32 ビットと
64 ビットの両方の稼働モードをサポートするプラットフォーム用に、
そのライブラリーは、32 ビットおよび 64 ビット形式で別々にコンパイルされる必要があります。
この場合、32 ビット・コードと 64 ビット・コードは混用できないため、
アプリケーションが実行時に正しいライブラリーをロードしなければなりません。</p></div>
<p>
<p>システム・プロパティー <strong>com.ibm.vm.bitmode</strong> を使用して、
アプリケーションは、JVM の稼働モードを判別することができます。
これは、以下の値を戻します。

</p>
<ul>
<li>32 - JVM は 32 ビット・モードで稼働 (System
z 上の Linux は 31 ビット・モード)</li>
<li>64 - JVM は 64 ビット・モードで稼働</li></ul><p class="indatacontent">アプリケーション・コード内から <strong>com.ibm.vm.bitmode</strong> プロパティーを検査するには、次の呼び出しを使用します。</p>
<pre class="xmp">System.getProperty("com.ibm.vm.bitmode");</pre></p>
<a name="signals"></a>
<h2 id="signals"><a href="#ToC_65">JVM のシグナルの処理方法</a></h2>
<div>
<p>JVM に関係のあるシグナルが生じると、シグナル・ハンドラーが呼び出されます。このシグナル・ハンドラーは、Java スレッドのために呼び出されたのか、または Java 以外のスレッドのために呼び出されたのかを判別します。</p></div>
<p>シグナルが Java スレッドのためのものである場合、JVM がシグナル処理の制御を行います。このシグナルの
アプリケーション・ハンドラーがインストールされていて、
<strong>-Xnosigchain</strong> コマンド行オプションを指定しなかった場合、このシグナルのアプリケーション・ハンドラーは
JVM の処理終了後に呼び出されます。</p>
<p>シグナルが Java 以外のスレッドのためのものであり、インストール済みのアプリケーションに、以前に JVM がそのシグナル用の独自のハンドラーをインストールしている場合、
制御はそのハンドラーに与えられます。そうでないと、シグナルが JVM または Java アプリケーションによって要求されても、シグナルは無視されるか、または、デフォルトのアクションがとられます。</p>
<p>例外およびエラーのシグナルの場合、JVM は以下のいずれかを行います。
</p>
<ul>
<li>状態を処理し、リカバリーする。あるいは、</li>
<li>以下を JVM が行った場合、制御されたシャットダウン・シーケンスに入る。

<ol type="1">
<li>障害発生時点の JVM の状態を記述するダンプを作成する。</li>
<li>そのシグナルのためのユーザー・アプリケーションのシグナル・ハンドラーを呼び出す。</li>
<li>アプリケーションがインストールした何らかの打ち切りフックを呼び出す。</li>
<li>クリーン・シャットダウンのために必要なクリーンアップを実行する。</li></ol></li></ul>上記のフックを指定するランチャーの作成に
ついて詳しくは、 <a href="http://www.ibm.com/developerworks/java/library/i-signalhandling/" target="_blank">http://www.ibm.com/developerworks/java/library/i-signalhandling/</a> を参照してください。この項目は Java V1.3.1 を対象に書かれたものですが、それ以降のバージョンにも適用されます。
<p>割り込みシグナルの場合にも JVM は制御されたシャットダウン・シーケンスに入りますが、この場合は、以下を行う正常終了として扱われます。

</p>
<ol type="1">
<li>そのシグナルのためのユーザー・アプリケーションのシグナル・ハンドラーを呼び出す。</li>
<li>すべてのアプリケーション・シャットダウン・フックを実行する。</li>
<li>アプリケーションがインストールした何らかの終了フックを呼び出す。</li>
<li>必要な JVM クリーンアップを実行する。</li></ol>
<p>このシャットダウンは、Java メソッド <tt class="xph">System.exit()</tt> を呼び出すことによって開始されるシャットダウンと同一です。</p>
<p>JVM が使用するその他のシグナルは内部制御の目的のものであり、終了の原因となることはありません。関係のある
唯一の制御シグナルは SIGQUIT であり、これにより Javadump が生成されます。</p>
<a name="sighand"></a>
<h3 id="sighand"><a href="#ToC_66">JVM が使用するシグナル</a></h3>
<div>
<p>シグナルのタイプには、例外、エラー、割り込みおよび制御があります。</p></div>
<p>
<p>下記の<a href="#sighand__sig_table">表 7</a> は、JVM が使用するシグナルを示したものです。
以下に、タイプまたは使用法ごとに表にグループ化したシグナルを示します。
</p>
<dl>
<dt class="bold">例外</dt>
<dd>致命的な状態が発生すると、常にオペレーティング・システムが同期して該当する例外シグナルを生じさせるもの。
</dd>
<dt class="bold">エラー</dt>
<dd>JVM がリカバリーできない状態を検出した場合で、JVM が SIGABRT を生じさせるもの。
</dd>
<dt class="bold">割り込み</dt>
<dd>シャットダウンを要求するために、JVM プロセスの外部から割り込みシグナルを非同期に生じさせるもの。
</dd>
<dt class="bold">制御</dt>
<dd>制御の目的で JVM が使用するその他のシグナル。
</dd>
</dl><p class="indatacontent">
</p>
<a name="sighand__sig_table"></a>
<table id="sighand__sig_table" width="100%" summary="" border="1" frame="border" rules="all">
<caption>表 7. JVM が使用するシグナル</caption>
<thead valign="bottom">
<tr>
<th id="wq84" width="25%" align="left">シグナル名</th>
<th id="wq85" width="25%" align="left">シグナル・タイプ</th>
<th id="wq86" width="25%" align="left">説明</th>
<th id="wq87" width="25%" align="left">-Xrs による使用不可</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq84">SIGBUS (7)</td>
<td headers="wq85">例外</td>
<td headers="wq86">メモリーに対する誤ったアクセス (データの調整ミス)</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGSEGV (11)</td>
<td headers="wq85">例外</td>
<td headers="wq86">メモリーに対する誤ったアクセス (アクセス不能メモリーへの書き込み)</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGILL (4)</td>
<td headers="wq85">例外</td>
<td headers="wq86">正しくない命令 (不明なマシン・インストラクション呼び出しの試行)</td>
<td align="center" headers="wq87">なし</td>
</tr>
<tr>
<td headers="wq84">SIGFPE (8)</td>
<td headers="wq85">例外</td>
<td headers="wq86">浮動小数点例外 (ゼロ除算)</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGABRT (6)</td>
<td headers="wq85">エラー</td>
<td headers="wq86">異常終了。JVM が JVM 障害を検出すると、このシグナルを生じさせます。</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGINT (2)</td>
<td headers="wq85">割り込み</td>
<td headers="wq86">対話式アテンション (CTRL-C)。 JVM は正常に終了します。</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGTERM (15)</td>
<td headers="wq85">割り込み</td>
<td headers="wq86">終了要求。JVM は正常に終了します。</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGHUP (1)</td>
<td headers="wq85">割り込み</td>
<td headers="wq86">ハングアップ。JVM は正常に終了します。</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGQUIT (3)</td>
<td headers="wq85">制御</td>
<td headers="wq86">端末用の終了シグナル。デフォルトでは、Javadump が起動されます。</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">SIGTRAP (5)</td>
<td headers="wq85">制御</td>
<td headers="wq86">JIT が使用します。</td>
<td align="center" headers="wq87">あり</td>
</tr>
<tr>
<td headers="wq84">__SIGRTMAX - 2</td>
<td headers="wq85">制御</td>
<td headers="wq86">SDK が使用します。</td>
<td align="center" headers="wq87">なし</td>
</tr>
<tr>
<td headers="wq84">SIGCHLD (17)</td>
<td headers="wq85">制御</td>
<td headers="wq86">内部制御のために SDK が使用します。</td>
<td align="center" headers="wq87">なし</td>
</tr>
</tbody>
</table></p>
<p>
<p><strong>-Xrs</strong> (シグナル使用の削減) オプションを使用して、
JVM がほとんどのシグナルを処理してしまうのを防止します。詳しくは、
<a href="http://java.sun.com/javase/6/docs/technotes/tools/windows/java.html" target="_blank">Sun の 『Java application launcher』ページ</a>を参照してください。</p></p>
<p>
<p>JVM スレッド上のシグナル 1 (SIGHUP)、2 (SIGINT)、4 (SIGILL)、7 (SIGBUS)、8 (SIGFPE)、11 (SIGSEGV)、および 15 (SIGTERM) により JVM はシャットダウンします。したがって、
アプリケーション・シグナル・ハンドラーでは、JVM を必要としなくなった場合を除き、
リカバリーを試みるべきではありません。</p></p>
<a name="native_signals"></a>
<h3 id="native_signals"><a href="#ToC_67">ネイティブ・コード・ドライバーをシグナル・チェーニング・ライブラリーにリンクする</a></h3>
<div>
<p>Runtime Environment にはシグナル・チェーニングが含まれています。シグナル・チェーニングにより、JVM は、独自のシグナル・ハンドラーをインストールするネイティブ・コードとの、より効率的な相互操作が可能となります。</p></div>
<p>
<p>シグナル・チェーニングにより、アプリケーションでは、システム・ライブラリーの前に共用ライブラリー libjsig.so に
リンクしてロードすることが可能になります。libjsig.so ライブラリーにより、signal()、sigset()、および sigaction() などの呼び出しが確実にインターセプトされ、それらのハンドラーが JVM のシグナル・ハンドラーを置き換えることがなくなります。代わりに、これらの呼び出しは、新しいシグナル・ハンドラーを保管するか、または JVM がインストールしたハンドラーの後にそれらを「チェーニング」します。後で、これらのシグナルのいずれかが生じ、JVM をターゲットとしたものではないことが分かった場合、プリインストールされたハンドラーが起動します。</p>
<p>sigaction() を使用するシグナル・ハンドラーをインストールしている場合、JVM がシグナルを使用するときに、一部の <strong>sa_flags</strong> は見ることができません。これらは、以下のものです。

</p>
<ul>
<li>SA_NOCLDSTOP - これは常に設定解除になっています。</li>
<li>SA_NOCLDWAIT - これは常に設定解除になっています。</li>
<li>SA_RESTART - これは常に設定されています。</li></ul>
<p>libjsig.so ライブラリーも、アプリケーションから JVM シグナル・ハンドラーを隠します。このため、JVM が開始した後で行われた signal()、sigset()、および sigaction() などの呼び出しでは、JVM のシグナル・ハンドラーへの参照を戻すことがなくなりますが、JVM の開始前にインストールされたハンドラーがあれば、代わりにそれを戻します。</p>
<p>libjsig.so を使用するには、以下のようにします。

</p>
<ul>
<li>以下のように、JVM を作成または組み込むアプリケーションとリンクします。

<pre class="xmp">gcc -L$JAVA_HOME/bin -ljsig -L$JAVA_HOME/bin/j9vm -ljvm java_application.c</pre>または</li>
<li>以下のように、<strong>LD_PRELOAD</strong> 環境変数を使用します。

<pre class="xmp">export LD_PRELOAD=$JAVA_HOME/bin/libjsig.so; java_application (bash and ksh)

setenv LD_PRELOAD=$JAVA_HOME/bin/libjsig.so; java_application (csh)</pre></li></ul>
<p>環境変数 <strong>JAVA_HOME</strong> は、SDK の場所 (例えば /opt/ibm/java-i386-60/) に設定してください。</p>
<p>libjsig.a を使用するには、以下のようにします。
</p>
<ul>
<li>以下のように、JVM を作成または組み込むアプリケーションとリンクします。

<pre class="xmp">cc_r -q64 &lt;other compile/link parameter&gt; -L/opt/ibm/java-i386-60/jre/bin -ljsig
-L/opt/ibm/java-i386-60/jre/bin/j9vm -ljvm java_application.c</pre> 
<a name="wq91"></a>
<div class="note-noindent" id="wq91">
<span class="notetitle">注:</span> <span class="notebody">通常、<tt class="xph">cc_r</tt> でコンパイラーまたはリンカーを起動している場合は、
その代わりに <tt class="xph">xlc_r</tt> または <tt class="xph">xlC_r</tt> を使用してください。</span></div></li></ul></p>
<a name="usejni"></a>
<h2 id="usejni"><a href="#ToC_68">JNI アプリケーションの作成</a></h2>
<div>
<p>ネイティブ・プログラムが JNI_CreateJavaVM() API 呼び出しで指定できる有効な JNI バージョン番号は、JNI_VERSION_1_2(0x00010002) および JNI_VERSION_1_4(0x00010004) です。</p></div>
<a name="wq92"></a>
<div class="note-noindent" id="wq92">
<span class="notetitle">制約事項:</span> <span class="notebody">Java Native Interface (JNI) の Version 1.1 はサポートされません。</span></div>
<p>このバージョン番号で決まるのは、使用する JNI ネイティブ・インターフェースのレベルのみです。
作成される JVM の実際のレベルは、JSE ライブラリーによって指定されます (つまり、v6)。
JNI インターフェース API は、JVM によって実装される言語仕様や、
クラス・ライブラリー API、その他の範囲の JVM 動作に<em>影響しません</em>。
詳しくは、『<a href="http://java.sun.com/javase/6/docs/technotes/guides/jni/" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jni/</a>』を参照してください。</p>
<p>32 ビット用に作成されたものと 64 ビット用に作成されたものの 2 つの JNI ライブラリーがアプリケーションで必要な場合、<strong>com.ibm.vm.bitmode</strong> システム・プロパティーを使用して、32 ビットまたは 64 ビット JVM のどちらで実行しているかを判別し、適切なライブラリーを選択します。</p>
<p>SDK でネイティブ・アプリケーションをコンパイルおよびリンクするには、次のコマンドを使用します。</p>
<pre class="xmp">gcc -I/opt/ibm/java-i386-60/include -L/opt/ibm/java-i386-60/jre/lib/&lt;arch&gt;/j9vm
-ljvm -ldl -lpthread &lt;JNI program filename&gt;</pre><strong>-ljvm</strong><p class="indatacontent"> オプションは、libjvm.so が、JVM を実装する共用ライブラリーであることを指定します。
<strong>-lpthread</strong> オプションは、ネイティブ
pthread サポートを使用することを指示します。pthread ライブラリーとリンクしないと、
JNI プログラムの実行時にセグメンテーション障害 (シグナル SIGSEGV) が発生する可能性があります。</p>
<a name="blocked_threads"></a>
<h2 id="blocked_threads"><a href="#ToC_69">ブロック化コネクターのスレッド・レベルのリカバリーのサポート</a></h2>
<div>
<p>ブロック化コネクターのスレッド・レベルのリカバリーをサポートするため、IBM 固有の新規 SDK クラスが com.ibm.jvm パッケージに 4 つ追加されました。新しいクラスは、core.jar 内に圧縮されています。</p></div>
<p>これらのクラスにより、ネットワーキング呼び出し、あるいは同期呼び出しでブロック化されたスレッドのブロックを解除できます。 これらのクラスを使用しない場合、アプリケーションは、
個別のブロックされたスレッドに割り込みをかけるのではなく、プロセス全体を終了させる必要があります。</p>
<p>これらのクラスは以下のとおりです。</p>
<dl class="parml">
<dt class="bold">public interface InterruptibleContext</dt>
<dd>2 つのメソッド isBlocked() および unblock() を定義します。
他の 3 つのクラスは InterruptibleContext を実装します。
</dd>
<dt class="bold">public class InterruptibleLockContext</dt>
<dd>同期呼び出しに割り込みをするためのユーティリティー・クラス。
</dd>
<dt class="bold">public class InterruptibleIOContext</dt>
<dd>ネットワーク呼び出しに割り込みをするためのユーティリティー・クラス。
</dd>
<dt class="bold">public class InterruptibleThread</dt>
<dd>割り込み可能なメソッドのラッピングを許可するため、java.lang.Thread を拡張する
ユーティリティー・クラス。 このクラスでは、InterruptibleLockContext および InterruptibleIOContext のインスタンスを使用し、同期操作とネットワーキング操作のどちらがスレッドをブロックしているかに応じて、必要な isBlocked メソッドおよび unblock() メソッドを実行します。
</dd>
</dl>
<p>InterruptibleLockContext および InterruptibleIOContext は、両方とも現行スレッドを参照することによって機能します。 このため、InterruptibleThread を使用しない場合、これらの新しいクラスを使用するためには、java.lang.Thread を拡張するユーザー独自のクラスを準備する必要があります。</p>
<p>これらのクラスの Javadoc は、SDK に付属しており、docs/content/apidoc ディレクトリーに収録されています。</p>
<a name="alloc_large_page"></a>
<h2 id="alloc_large_page"><a href="#ToC_70">大規模ページのメモリー割り振りの構成</a></h2>
<div>
<p>大規模ページをサポートするシステムでこのサポートを使用可能にするには、
<strong>-Xlp</strong> オプションを指定して Java を始動します。</p></div>
<p>
<p>大規模ページは、多くのメモリーを割り振って頻繁にそのメモリーにアクセスする
アプリケーションのパフォーマンスを向上させるために使用するものです。
大規模ページによるパフォーマンスの向上は、
主に Translation Lookaside Buffer (TLB) のミスの数を減らすことによって実現します。
TLB は、より大きな仮想メモリー範囲をマップし、それにより、この向上をもたらします。</p>
<p>Java が大規模ページを使用できるためには、大規模ページ・サポートがカーネルで利用可能で、有効にされていなければなりません。</p>
<p>大規模ページのメモリー割り振りを構成するには、
まず実行されているカーネルが大規模ページをサポートしていることを確認します。
ファイル /proc/meminfo に、以下の行が含まれていることを確認してください。</p>
<pre class="xmp">HugePages_Total:     &lt;number of pages&gt;
HugePages_Free:      &lt;number of pages&gt;
Hugepagesize:        &lt;page size, in kB&gt;</pre><p class="indatacontent">使用可能なページの数とそのサイズは、ディストリビューションによって異なります。</p>
<p>大規模ページ・サポートがカーネルで利用可能でない場合、これらの行は
/proc/meminfo ファイルに存在しません。この場合には、大規模ページのサポートを含む新しいカーネルをインストールしてください。</p>
<p>大規模ページ・サポートが利用可能だが有効にされていない場合、<tt class="xph">HugePages_Total</tt> は 0 になります。
この場合は、管理者が大規模ページ・サポートを有効にする必要があります。
詳しくは、オペレーティング・システムのマニュアルを確認してください。</p>
<p>JVM が大規模ページを使用するためには、システムで、十分な数の連続した大規模ページが使用可能でなければなりません。
十分なページが使用可能であっても、大規模ページを割り振れない場合、大規模ページが連続していない可能性があります。
ブートアップ時の大規模ページ数を構成すると、それらが連続して作成されます。</p>
<p>大規模ページの割り振りは、JVM が root アクセス権を持つ場合にのみ、正常終了します。
大規模ページを使用するには、Java を root で実行するか、Java ランチャーの suid ビットを設定します。</p></p>
<a name="corba"></a>
<h2 id="corba"><a href="#ToC_71">CORBA サポート</a></h2>
<div>
<p>Java Platform, Standard Edition (JSE) は、Sun の準拠資料に定義されている仕様は最小限サポートしています。場合によっては、IBM JSE ORB で、より新しいバージョンの仕様をサポートしている場合もあります。</p></div>
<p>サポートされる最小限の仕様は、『<a href="http://java.sun.com/javase/6/docs/api/org/omg/CORBA/doc-files/compliance.html" target="_blank">Official Specifications for CORBA support in Java SE
6</a>』に定義されています。</p>
<p>
<a name="corba__corba_giop"></a>
<h3 id="corba__corba_giop">GIOP 1.2 のサポート</h3>
<p>この SDK は、OMG 資料「<cite>formal/99-10-07</cite>」の第 13 章および第 15 章の CORBA 2.3.1 仕様で定義されているように、すべてのバージョンの GIOP をサポートしています。</p>
<p><a href="http://www.omg.org/cgi-bin/doc?formal/99-10-07" target="_blank">http://www.omg.org/cgi-bin/doc?formal/99-10-07</a></p>
<p>双方向 GIOP は、サポートされていません。</p></p>
<p>
<a name="corba__corba_support_intercepters"></a>
<h3 id="corba__corba_support_intercepters">ポータブル・インターセプターのサポート</h3>
<p>この SDK は、資料「<cite>ptc/01-03-04</cite>」で OMG によって定義されているように
ポータブル・インターセプターをサポートします。この資料は、以下のサイトから入手できます。</p>
<p><a href="http://www.omg.org/cgi-bin/doc?ptc/01-03-04" target="_blank">http://www.omg.org/cgi-bin/doc?ptc/01-03-04</a></p>
<p>ポータブル・インターセプターは、ORB へのフックで、これを使用して ORB サービスは ORB の実行の通常フローをインターセプトすることができます。</p></p>
<p>
<a name="corba__corba_interop_naming"></a>
<h3 id="corba__corba_interop_naming">Interoperable Naming Service のサポート</h3>
<p>この SDK は、資料「<cite>ptc/00-08-07</cite>」で OMG によって定義されているように、
Interoperable Naming Service をサポートします。この資料は、以下のサイトから入手できます。</p>
<p><a href="http://www.omg.org/cgi-bin/doc?ptc/00-08-07" target="_blank">http://www.omg.org/cgi-bin/doc?ptc/00-08-07</a></p>
<p>一時ネーム・サーバー  (tnameserv コマンド) が使用するデフォルトのポートは、<strong>ORBInitialPort</strong> パラメーターが指定されていない場合には、<em>900</em> から <em>2809</em> に変更されます。これは CORBA ネーミング・サービス用に IANA (Internet Assigned Number Authority) で登録されているポート番号です。
このデフォルトに依存する
プログラムは、このバージョンで作業する場合に更新しなければならない可能性があります。</p>
<p>一時ネーム・サーバーから戻される初期コンテキストは、現在、
org.omg.CosNaming.NamingContextExt です。コンテキスト
org.omg.CosNaming.NamingContext
への参照が限られている既存のプログラムは、そのまま動作するので、再コンパイルする必要はありません。</p>
<p>ORB は、Interoperable Naming Service 仕様で定義されている <strong>-ORBInitRef</strong> と
<strong>-ORBDefaultInitRef</strong> パラメーターをサポートし、ORB::string_to_object 操作では、現在、
Interoperable Naming Service 仕様で定義されている ObjectURL ストリング・フォーマット
(corbaloc: および corbaname:) がサポートされています。</p>
<p>OMG は、サービスを Interoperable Naming Service に登録するのに、
メソッド ORB::register_initial_reference を指定します。しかし、このメソッドは バージョン 6 の Sun Java Core API では使用できません。
現行バージョンでサービスの登録が必要なプログラムは、このメソッドを IBM 内部の
ORB 実装クラスで呼び出す必要があります。例えば、サービス「MyService」を登録するには以下のようにします。</p>
<p> </p>
<pre class="xmp">((com.ibm.CORBA.iiop.ORB)orb).register_initial_reference("MyService",
serviceRef); </pre>
<p>ここで、<tt>orb</tt> は、ORB.init() から戻される org.omg.CORBA.ORB のインスタンスで、
<tt>serviceRef</tt> は、ORB に接続される CORBA オブジェクトです。この手段は一時的なもので、今後のバージョンと互換性はなく、また、IBM 以外の ORB にも
移植できません。</p></p>
<a name="corba_properties"></a>
<h3 id="corba_properties"><a href="#ToC_75">ORB をトレースするためのシステム・プロパティー</a></h3>
<div>
<p>ランタイム・デバッグ機能により、保守容易度が向上しました。これは、問題診断に有効であり、
IBM サービス担当員から要求される場合もあります。</p></div>
<p>
<a name="wq94"></a>
<h4 id="wq94">プロパティーのトレース</h4></p>
<dl class="parml">
<dt class="bold"><strong>com.ibm.CORBA.Debug</strong>=<em>true</em></dt>
<dd>ORB トレースをオンにします。
</dd>
<dt class="bold"><strong>com.ibm.CORBA.CommTrace</strong>=<em>true</em></dt>
<dd>GIOP メッセージ (送信および受信) をトレースに追加します。
</dd>
<dt class="bold"><strong>com.ibm.CORBA.Debug.Output</strong>=<em>&lt;file&gt;</em></dt>
<dd>トレース出力ファイルを指定します。これはデフォルトでは orbtrc.DDMMYYYY.HHmm.SS.txt の形式です。
</dd>
</dl>
<p>
<a name="wq95"></a>
<h4 id="wq95">ORB トレースの例</h4>
<p> 例えば、イベントとフォーマット済み GIOP メッセージをコマンド行からトレースするには、以下のように入力します。</p></p>
<pre class="xmp">java -Dcom.ibm.CORBA.Debug=true
     -Dcom.ibm.CORBA.CommTrace=true <em>&lt;myapp&gt;</em></pre>
<p>
<a name="wq96"></a>
<h4 id="wq96">制限</h4>
<p>パフォーマンスの低下につながるので、通常の業務ではトレースをオンにしないようにしてください。
トレースをオフに切り替えても、FFDC (First Failure Data Capture) は作動していて、重大なエラーは報告されます。デバッグの出力ファイルが生成されたら、それを確認して問題について調べてください。例えば、
サーバーが ORB.shutdown() を実行せずに停止した可能性などがあげられます。</p>
<p>トレース出力の内容およびフォーマットは、バージョンによって異なります。</p></p>
<p></p>
<a name="corba_tuning"></a>
<h3 id="corba_tuning"><a href="#ToC_79">ORB を調整するためのシステム・プロパティー</a></h3>
<div>
<p>ORB を調整して、特定のネットワークとうまく連動させることができます。ORB の調整に必要なプロパティーについて、以下で説明します。</p></div>
<p></p>
<dl class="parml">
<dt class="bold"><strong>com.ibm.CORBA.FragmentSize</strong>=<em>&lt;size in bytes&gt;</em></dt>
<dd>GIOP 1.2 フラグメントの制御に使用されます。デフォルトのサイズは、1024 バイトです。

<p>フラグメントを使用不可にするには、以下のようにフラグメント・サイズを 0 バイトにします。</p>
<pre class="xmp">java -Dcom.ibm.CORBA.FragmentSize=0 <em>&lt;myapp&gt;</em></pre>
</dd>
<dt class="bold"><strong>com.ibm.CORBA.RequestTimeout</strong>=<em>&lt;time in
seconds&gt;</em></dt>
<dd>CORBA 要求を待機する最大時間を設定します。デフォルトでは、ORB は無期限に待機します。接続の不必要な終了を避けるため、
タイムアウトに低すぎる値を設定しないでください。
</dd>
<dt class="bold"><strong>com.ibm.CORBA.LocateRequestTimeout</strong>=<em>&lt;time
in seconds&gt;</em></dt>
<dd>CORBA LocateRequest を待機する最大時間を設定します。デフォルトでは、ORB は無期限に待機します。
</dd>
<dt class="bold"><strong>com.ibm.CORBA.ListenerPort</strong>=<em>&lt;port number&gt;</em></dt>
<dd>着信要求を読み取る ORB のポートを設定します。このプロパティーを設定すると、ORB は、初期化後すぐに listen を開始します。
それ以外の場合は、要求されたときにのみ listen を開始します。
</dd>
</dl>
<a name="corba_security"></a>
<h3 id="corba_security"><a href="#ToC_80">ORB の Java セキュリティー権限</a></h3>
<div>
<p>Java SecurityManager を使用して実行中に、CORBA API クラスのいくつかのメソッドを呼び出すと、
権限チェックが行われて、その結果 SecurityException になることがあります。
ご使用のプログラムが、これらのメソッドのいずれかを使用している場合は、必要な権限が付与されている
ことを確認してください。</p></div>
<p></p>
<a name="corba_security__corbatable"></a>
<table id="corba_security__corbatable" width="100%" summary="" border="1" frame="border" rules="all">
<caption>表 8. Java SecurityManager を使用して実行中に影響を受けるメソッド</caption>
<thead valign="bottom">
<tr>
<th id="wq100" width="32%" align="left">クラス/インターフェース</th>
<th id="wq101" width="32%" align="left">メソッド</th>
<th id="wq102" width="34%" align="left">必要な権限</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq100">org.omg.CORBA.ORB</td>
<td headers="wq101">init</td>
<td headers="wq102">java.net.SocketPermission resolve</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA.ORB</td>
<td headers="wq101">connect</td>
<td headers="wq102">java.net.SocketPermission listen</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA.ORB</td>
<td headers="wq101">resolve_initial_references</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq101">_is_a</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq101">_non_existent</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq101">OutputStream _request (String, boolean)</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq101">_get_interface_def</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA. Request</td>
<td headers="wq101">invoke</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA. Request</td>
<td headers="wq101">send_deferred</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">org.omg.CORBA. Request</td>
<td headers="wq101">send_oneway</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq100">javax.rmi. PortableRemoteObject</td>
<td headers="wq101">narrow</td>
<td headers="wq102">java.net.SocketPermission connect</td>
</tr>
</tbody>
</table>
<a name="corba_classes"></a>
<h3 id="corba_classes"><a href="#ToC_81">ORB 実装クラス</a></h3>
<div>
<p>ORB 実装クラスのリストです。</p></div>
<p>
<p>このリリースの ORB 実装クラスは以下のとおりです。

</p>
<ul>
<li>org.omg.CORBA.ORBClass=com.ibm.CORBA.iiop.ORB</li>
<li>org.omg.CORBA.ORBSingletonClass=com.ibm.rmi.corba.ORBSingleton</li>
<li>javax.rmi.CORBA.UtilClass=com.ibm.CORBA.iiop.UtilDelegateImpl</li>
<li>javax.rmi.CORBA.StubClass=com.ibm.rmi.javax.rmi.CORBA.StubDelegateImpl</li>
<li>javax.rmi.CORBA.PortableRemoteObjectClass= com.ibm.rmi.javax.rmi.PortableRemoteObject</li></ul>
<p>これらは、デフォルト値です。これらのプロパティーを設定しないか、または、
実装クラスを直接参照することをお勧めします。移植性を保つためには、実装ではなく、
CORBA API クラスのみを参照してください。これらの値は、今後のリリースで変更になる可能性があります。</p></p>
<a name="rmi-iiop"></a>
<h2 id="rmi-iiop"><a href="#ToC_82">RMI over IIOP</a></h2>
<div>
<p>Java リモート・メソッド呼び出し (RMI) は、分散 Java プログラミングのための簡単なメカニズムです。RMI over IIOP (RMI-IIOP) では、Common Object Request
Broker Architecture (CORBA) 標準の Internet Inter-ORB Protocol (IIOP プロトコル)
を使用し、基本の Java RMI を拡張して通信を行います。これにより、他の CORBA オブジェクト・リクエスト・ブローカー (ORB) が
Java で実装されていても、他のプログラム言語で実装されていても、
それらとの直接対話が可能になります。</p></div>
<p>以下の資料が利用可能です。</p>
<ul>
<li>「<a href="http://www.ibm.com/developerworks/java/rmi-iiop" target="_blank">RMI-IIOP Programmer's Guide</a> (英語)」は、RMI-IIOP プログラムの作成の概要です。</li>
<li>「<a href="http://www.omg.org/cgi-bin/doc?ptc/00-01-06.pdf" target="_blank">Java Language to IDL Mapping</a> (英語)」の文書は、RMI-IIOP の詳細な技術仕様です。</li></ul>
<a name="rmi"></a>
<h2 id="rmi"><a href="#ToC_83">RMI の Connection Handler Pool の実装</a></h2>
<div>
<p>デフォルトでは、RMI Connection Handlers のスレッド・プーリングは使用可能になっていません。</p></div>
<p>
<p>RMI TCPTransport レベルで実装された接続プーリングを使用可能にするには、
以下のオプションを設定します。</p>
<pre class="xmp">-Dsun.rmi.transport.tcp.connectionPool=true</pre>
<p>このバージョンの Runtime Environment には、接続プール内のスレッド数を制限するために使用可能な設定はありません。</p></p>
<a name="bigd"></a>
<h2 id="bigd"><a href="#ToC_84">拡張 BigDecimal</a></h2>
<div>
<p>Java 5.0 以降、Sun によりIBM BigDecimal クラスが java.math.BigDecimal として採用されました。com.ibm.math.BigDecimal クラスは IBM が将来使用するものとして予約されており、現在は推奨されていません。既存の Java コードをマイグレーションして、java.math.BigDecimal を使用してください。</p></div>
<p>新しい java.math.BigDecimal は、以前の java.math.BigDecimal と com.ibm.math.BigDecimal の両方と同じメソッドを使用しています。
java.math.BigDecimal を使用している既存のコードは、そのまま正常に動作します。2 つのクラスは直列化されません。</p>
<p>既存の Java コードを java.math.BigDecimal クラスを使用するようにマイグレーションするには、ご使用の .java ファイルの先頭にある import ステートメントを、<tt class="xph">import com.ibm.math.*;</tt> から <tt class="xph">import java.math.*;</tt> に変更してください。</p>
<a name="deploying"></a>
<h1 id="deploying"><a href="#ToC_85">Plug-in、アプレット・ビューアー、および Web Start</a></h1>
<div>
<p>Java Plug-in は、ブラウザー内で Java アプリケーションを実行するために使用します。appletviewer は、ブラウザー内で実行するよう設計されているアプリケーションをテストするために使用します。Java Web Start は、ネットワーク上にデスクトップの Java アプリケーションをデプロイするために使用するものであり、それらのアプリケーションを常に最新の状態にする仕組みが備わっています。</p></div>
<a name="using_plugin"></a>
<h2 id="using_plugin"><a href="#ToC_86"><strong><span class="bold-italic">(Linux IA 32 ビットおよび PPC32 のみ)</span></strong> Java Plug-in の使用</a></h2>
<div>
<p>Java Plug-in は Web ブラウザー・プラグインです。ブラウザーでアプレットを実行するには、Java プラグインを使用します。</p></div>
<p>ブラウザーが「ハング」しないように、アプレットがロードを完了できるようにする必要があります。
例えば、<strong>「戻る」</strong>ボタンを使用してから、
アプレットのロード中に<strong>「進む」</strong>ボタンを使用すると、HTML ページがロードできない可能性があります。</p>
<p>Java Plug-in に関しては、Sun の <a href="http://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/</a> に記述があります。</p>
<a name="suppbrowse"></a>
<h3 id="suppbrowse"><a href="#ToC_87">サポートされるブラウザー</a></h3>
<div>
<p>Java Plug-in では、SeaMonkey、Mozilla、 および Mozilla Firefox がサポートされています。</p></div>
<p></p>
<a name="suppbrowse__plugintable"></a>
<table id="suppbrowse__plugintable" width="100%" summary="" border="1" frame="border" rules="all">
<caption>表 9. Linux IA32 で Java Plug-in によってサポートされるブラウザー</caption>
<thead valign="bottom">
<tr>
<th id="wq106" width="50%" align="left" valign="top">ブラウザー</th>
<th id="wq107" width="50%" align="left" valign="top">サポートされるバージョン</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq106">Mozilla</td>
<td headers="wq107">1.7.12, 1.8</td>
</tr>
<tr>
<td headers="wq106">Firefox</td>
<td headers="wq107">1.5, 2.0</td>
</tr>
</tbody>
</table>
<a name="suppbrowse__plugintable-ppc32"></a>
<table id="suppbrowse__plugintable-ppc32" width="100%" summary="" border="1" frame="border" rules="all">
<caption>表 10. Linux PPC32 で Java Plug-in によってサポートされるブラウザー</caption>
<thead valign="bottom">
<tr>
<th id="wq108" width="50%" align="left" valign="top">ブラウザー</th>
<th id="wq109" width="50%" align="left" valign="top">サポートされるバージョン</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq108">Mozilla</td>
<td headers="wq109">1.6</td>
</tr>
<tr>
<td headers="wq108"><font color="RED"><span id="changed">|</span>SeaMonkey</font></td>
<td headers="wq109"><font color="RED"><span id="changed">|</span>1.0.8</font></td>
</tr>
</tbody>
</table>
<p>ブラウザーのこれ以降のマイナー・リリースもサポートされています。</p>
<a name="installing_plugin"></a>
<h3 id="installing_plugin"><a href="#ToC_88">Java Plug-in のインストールおよび構成</a></h3>
<div>
<p>Java Plug-in をインストールするには、ブラウザーのプラグイン・ディレクトリーへのシンボリック・リンクを作成します。</p></div>
<p>Java Plug-in は、Mozilla の <a href="http://www.mozilla.org/oji/" target="_blank">Open JVM Integration</a> イニシアチブが基本になっており、大半の Mozilla 製品および派生品 (Firefox など) と組み合わせて使用されます。</p>
<p>以下に、いくつかの一般的なブラウザーに Plug-in をインストールするための手順を示します。</p>
<p>JVM を見つけられるようにするために、Plug-in はコピーするのではなく、それに対するシンボリック・リンクを作成してください。</p>
<a name="mozilla"></a>
<h4 id="mozilla">Mozilla</h4>
<p>
<p>Mozilla バージョン 1.4 以降のみがサポートされます。</p></p>
<ol type="1">
<li>root としてログインします。</li>
<li>Mozilla Plug-in のディレクトリーに移動します (一部の Linux ディストリビューションでは異なる場合があります)。 

<ul>
<li>すべてのユーザーが Plug-in を使用できるようにする場合:
<pre class="xmp"> cd /usr/local/mozilla/plugins/</pre></li>
<li>Plug-in を使用できるユーザーを現在のユーザーに限定する場合:
<pre class="xmp">cd $HOME/.mozilla/plugins</pre></li></ul></li>
<li>プラグインへのシンボリック・リンクを作成します。 
<pre class="xmp"> ln -s /opt/ibm/java-i386-60/jre/plugin/&lt;arch&gt;/ns7/libjavaplugin_oji.so </pre> ここで、&lt;arch&gt; は、システムのアーキテクチャーを表します。</li></ol>
<p>
<p>JavaPlug-in が使用可能で有効になっていることを確認するには、Mozilla で<strong>「ヘルプ」</strong> -&gt; <strong>「Plug-in について」</strong>を選択します。</p></p>
<p>
<p>JVM を見つけられるようにするために、Plug-in はコピーするのではなく、それに対するシンボリック・リンクを作成してください。</p></p>
<a name="wq114"></a>
<div class="note-noindent" id="wq114">
<span class="notetitle">制約事項:</span> <span class="notebody">/usr/local/mozilla/plugins/ に置くことができる Java Plug-in 共用ライブラリーは <em>1 つ</em> だけです。
Mozilla では、この共用ディレクトリー (またはその下位にあるサブディレクトリー) に存在するファイルをすべて Plug-in として読み込もうとしますが、2 つのバージョンの Java Plug-in が読み込まれた場合、結果を予測することはできません。</span></div>
<a name="lnx_firefox"></a>
<h4 id="lnx_firefox">Firefox</h4>
<p> 以下の手順を実行すると、すべてのユーザーが Java Plug-in を使用できるようになります。</p>
<ol type="1">
<li>root としてログインします。</li>
<li>Firefox プラグインのディレクトリーに移動します (一部の Linux ディストリビューションでは異なる場合があります)。 
<pre class="xmp">cd /usr/local/mozilla-firefox/plugins/</pre></li>
<li>プラグインへのシンボリック・リンクを作成します。 
<pre class="xmp"> ln -s /opt/ibm/java-i386-60/jre/plugin/&lt;arch&gt;/ns7/libjavaplugin_oji.so .</pre> ここで、&lt;arch&gt; は、システムのアーキテクチャーを表します。</li></ol>
<p>JVM を見つけられるようにするために、Plug-in はコピーするのではなく、それに対するシンボリック・リンクを作成してください。</p>
<a name="plugin_dom"></a>
<h3 id="plugin_dom"><a href="#ToC_91">共通 Document Object Model (DOM) サポート</a></h3>
<div>
<p>特定のブラウザーによる制約のために、org.w3c.dom.html パッケージのすべての機能を実装できない場合があります。</p></div>
<p>
<p>次のエラーのいずれかがスローされます。
</p>
<ul>
<li>これらの機能の一部については sun.plugin.dom.exception.InvalidStateException がスローされます。</li>
<li>ブラウザーが特定の機能をサポートしていないときには、sun.plugin.dom.exception.NotSupportedException がスローされます。</li></ul></p>
<a name="plugin_dbcs"></a>
<h3 id="plugin_dbcs"><a href="#ToC_92">DBCS パラメーターの使用</a></h3>
<div>
<p>Java Plug-in は、2 バイト文字を (例えば、中国語 (繁体字) BIG-5、韓国語、日本語)
タグ <tt class="xph">&lt;APPLET&gt;</tt>、<tt class="xph">&lt;OBJECT&gt;</tt>、および <tt class="xph">&lt;EMBED&gt;</tt> などのパラメーターとしてサポートします。Java Plug-in がパラメーターを解析できるように、HTML 文書の正しい文字エンコード方式を選択しなければなりません。</p></div>
<p>
<p>HTML 文書の文字エンコード方式は、
<tt class="xph">&lt;HEAD&gt;</tt> セクションで <tt class="xph">&lt;META&gt;</tt> タグを使用して次のように指定します。
</p>
<pre class="xmp">&lt;meta http-equiv="Content-Type" content="text/html; charset=big5"&gt;</pre><p class="indatacontent">この例は、ブラウザーに、中国語 BIG-5 文字エンコード方式を使用して HTML ファイルを解析するように指示するものです。</p></p>
<a name="applets"></a>
<h2 id="applets"><a href="#ToC_93">アプレットの処理</a></h2>
<div>
<p>アプレット・ビューアーを使用すれば、Web ページ (HTML ファイル) 内から APPLET タグを使った
参照で呼び出される 1 つ以上のアプレットを実行できます。
アプレット・ビューアーは、HTML ファイルで APPLET タグを見つけると、タグで指定されているとおりに
別のウィンドウでそのアプレットを実行します。</p></div>
<p>アプレット・ビューアーは、アプレットを表示するためのものなので、HTML タグを数多く含む
Web ページ全体は表示できません。
Web ページ上で APPLET タグのみを解析し、他の HTML タグは解析しません。</p>
<a name="applet_viewer"></a>
<h3 id="applet_viewer"><a href="#ToC_94">アプレット・ビューアーでアプレットを実行する</a></h3>
<div>
<p>アプレット・ビューアーでアプレットを実行するには、以下のコマンドを使用します。</p></div>
<p>
<p>シェル・プロンプトで、以下を入力します。</p></p>
<pre class="xmp">   appletviewer <em>&lt;name&gt;</em></pre>
<p>ここで、<em>&lt;name&gt;</em> には、以下のいずれかを指定します。</p>
<ul>
<li>アプレットを呼び出している HTML ファイル名。</li>
<li>アプレットを呼び出している Web ページの URL。</li></ul>
<p>例えば、アプレットの呼び出し元の HTML ファイルでアプレット・ビューアーを起動するには、シェル・プロンプトで次のように入力します。</p>
<pre class="xmp">  appletviewer $HOME/<em>&lt;filename&gt;</em>.html</pre>
<p>ここで、<em>filename</em> は HTML ファイルの名前です。</p>
<p>Web ページでアプレット・ビューアーを呼び出すには、シェル・プロンプトで次のように入力します。</p>
<pre class="xmp">appletviewer http://java.sun.com/applets/NervousText/example1.html</pre>
<p>アプレット・ビューアーは、&lt;META&gt; タグの <strong>charset</strong> オプションは認識しません。アプレット・ビューアーがロードするファイルが、システム・デフォルトとしてエンコードされていないと、I/O 例外が発生する可能性があります。この例外を避けるには、appletviewer を実行するときに、
<strong>-encoding</strong> オプションを使用します。例えば、次のようにします。
</p>
<pre class="xmp">appletviewer -encoding JISAutoDetect sample.html</pre>
<a name="applet_debugging"></a>
<h3 id="applet_debugging"><a href="#ToC_95">アプレット・ビューアーでアプレットをデバッグする</a></h3>
<div>
<p>アプレットをデバッグするには、アプレット・ビューアーの <strong>-debug</strong> オプションを使用します。</p></div>
<p>
<p>例えば、次のようにします。</p></p>
<pre class="xmp">cd demo/applets/TicTacToe
../../../bin/appletviewer -debug example1.html</pre>
<p>アプレット・ビューアーを使用してアプレットをデバッグする方法についての資料は、
Sun の Web サイト <a href="http://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/debugger.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/debugger.html</a> で参照できます。</p>
<a name="using_webstart"></a>
<h2 id="using_webstart"><a href="#ToC_96"><strong><span class="bold-italic">(Linux IA 32 ビット、PPC32、および PPC64 のみ)</span></strong> Web Start の使用</a></h2>
<div>
<p>Java Web Start は、Java アプリケーションのデプロイメントで使用します。</p></div>
<p>
<p>Web Start を使用すると、アプリケーションの起動および管理を Web から直接行うことができます。インストール時間を最小化するために、アプリケーションがキャッシュされます。新規バージョンが使用可能になると、アプリケーションは自動的にアップグレードされます。</p></p>
<p>
<p>Web Start は、<a href="http://java.sun.com/javase/6/docs/technotes/guides/javaws/developersguide/syntax.html#resources" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/javaws/developersguide/syntax.html#resources</a> に文書化されている、以下の java-vm-args をサポートします。
</p>
<ul>
<li>-verbose</li>
<li>-version</li>
<li>-showversion</li>
<li>-help</li>
<li>-X</li>
<li>-ea</li>
<li>-enableassertions</li>
<li>-da</li>
<li>-disableassertions</li>
<li>-esa</li>
<li>-enablesystemassertions</li>
<li>-dsa</li>
<li>-disablesystemassertions</li>
<li>-Xint</li>
<li>-Xnoclassgc</li>
<li>-Xdebug</li>
<li>-Xfuture</li>
<li>-Xrs</li>
<li>-Xms</li>
<li>-Xmx</li>
<li>-Xss</li></ul></p>
<p>
<p>IBM Web
Start では、ガーベッジ・コレクション・ポリシーを設定する <strong>-Xgcpolicy</strong> もサポートします。</p></p>
<p>
<p>Web Start をサポートするブラウザーについて詳しくは、 『<a href="#suppbrowse">サポートされるブラウザー</a>』を参照してください。</p></p>
<p>
<p>Web Start について詳しくは、 
</p>
<ul>
<li><a href="http://java.sun.com/products/javawebstart" target="_blank">http://java.sun.com/products/javawebstart</a> および</li></ul>
<ul>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/javaws/index.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/javaws/index.html</a> を参照してください。</li></ul><p class="indatacontent"> アプリケーションのデプロイについて詳しくは、 </p>
<ul>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/deployment/index.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/deployment/index.html</a> を参照してください。</li></ul></p>
<a name="installing_webstart"></a>
<h3 id="installing_webstart"><a href="#ToC_97">Web Start の実行</a></h3>
<div>
<p>Web Start は、Web ページまたはコマンド行から実行できます。Web
Start アプリケーションは、Java アプリケーション・キャッシュに保管されます。</p></div>
<p>
<p>Java Web Start バージョン 6 は、.rpm または .tgz パッケージによる Java のインストール時に、自動的にインストールされます。
Java を .tgz パッケージから解凍した場合、jre/lib/javaws/updateSettings.sh
シェル・スクリプトを実行して、システムの .mailcap および .mime.types ファイルを更新してください。</p></p>
<p>
<p>Web Start は、以下のいくつかの異なる方法で起動できます。</p></p>
<ul>
<li>.jnlp ファイルを参照する、Web ページ上のリンクを選択します。</li>
<li>シェル・プロンプトで、以下を入力します。 
<pre class="xmp">javaws <em>&lt;URL&gt;</em></pre>ここで、<em>&lt;URL&gt;</em> は .jnlp ファイルの場所です。</li>
<li>過去に Java Web Start を使用してアプリケーションをオープンしたことがある場合、Java アプリケーション・キャッシュ・ビューアーを使用できます。 シェル・プロンプトで、以下を入力します。
<pre class="xmp">/opt/ibm/java-i386-60/jre/bin/javaws<span><font color="RED"><span id="changed">|</span> -viewer</font></span></pre> 

<p>すべての Java Web
Start アプリケーションは、Java アプリケーション・キャッシュに保管されます。アプリケーションがダウンロードできるのは、最新バージョンがキャッシュにない場合に限られます。</p></li></ul>
<a name="webstart_ssv"></a>
<h3 id="webstart_ssv"><a href="#ToC_98"><strong><span class="bold-italic">(Linux IA 32 ビットのみ) </span></strong>WebStart
Secure の静的バージョン管理</a></h3>
<div>
<p>静的バージョン管理を使用すると、Web Start アプリケーションで稼働させる特定の JVM バージョンを要求できます。この機能を使用すると、アプリケーションは、新規 JVM にアップグレードされたシステムで古いセキュリティーのぜい弱性を利用することができるため、Secure Static Versioning (SSV) がデフォルトで使用されます。</p></div>
<p>SSV を使用する場合、特定の JVM の使用を要求する未署名 Web Start アプリケーションを実行しようとすると警告されます。署名付きアプリケーションと、JVM の最新バージョンを要求するアプリケーションは正常に稼働します。</p>
<p>SSV は、deployment.properties ファイルの <strong>deployment.javaws.ssv.enabled</strong> プロパティーを false に設定することによって使用不可にできます。</p>
<a name="shipping"></a>
<h2 id="shipping"><a href="#ToC_99">Java アプリケーションの出荷</a></h2>
<div>
<p>Java アプリケーションは一般にクラス、リソース、およびデータ・ファイルで構成されています。</p></div>
<p>Java アプリケーションを出荷する場合、
ソフトウェア・パッケージは、多くの場合、以下のパーツから構成されます。</p>
<ul>
<li>独自のクラス、リソース、およびデータ・ファイル</li>
<li>インストール手順またはインストール・プログラム</li></ul>
<p>アプリケーションを実行するには、ユーザーに Runtime Environment for Linux が必要です。
SDK for Linux ソフトウェアには Runtime Environment が含まれます。ただし、
ユーザーが SDK for Linux ソフトウェアをインストール済みであることを前提にすることはできません。</p>
<p>SDK for Linux ソフトウェアのライセンスでは、
SDK のファイルをアプリケーションとともに再配布することが<strong>許可されません</strong>。
ライセンス交付を受けた SDK for Linux がターゲット・マシンにインストールされていることを確認してください。</p>
<a name="classdatasharing"></a>
<h1 id="classdatasharing"><a href="#ToC_100">JVM 間でのクラス・データの共用</a></h1>
<div>
<p>クラス・データの共用によって、複数の JVM がメモリー内の単一スペースを共用できます。</p></div><a id="idx46" name="idx46"></a>
<p>Java 仮想マシン (JVM) では、ディスクのメモリー・マップ・キャッシュ・ファイルにデータを保管することによって、JVM 間でクラス・データを共用することができます。複数の JVM がキャッシュを共用する場合、共用によって全体の仮想メモリーの使用量が削減されます。また、共用によって、キャッシュ作成後の JVM の起動時間も短縮されます。共用クラス・キャッシュは、どのアクティブな JVM からも独立しており、破棄されるまで存続します。</p>
<p>共用キャッシュには、以下を含むことができます。
</p>
<ul>
<li>ブートストラップ・クラス</li>
<li>アプリケーション・クラス</li>
<li>クラスを記述するメタデータ</li>
<li><font color="RED"><span id="changed">|</span>Ahead-of-time (AOT) コンパイル済みコード</font></li></ul>
<a name="shc_overview"></a>
<h2 id="shc_overview"><a href="#ToC_101">クラス・データ共用の概要</a></h2>
<div>
<p>クラス・データ共用は、メモリー・フットプリントを減らし、JVM 起動時間を改善するための透過的な手法です。<span><font color="RED"><span id="changed">|</span>Java 6
<span id="changed">|</span>には、キャッシュの管理、分離、およびパフォーマンスに関連する機能が拡張され、新機能が導入されました。</font></span></p></div>
<p>
<a name="wq129"></a>
<h3 id="wq129">クラス・データ共用の使用可能化</h3>
<p>JVM の開始時、<strong>-Xshareclasses</strong> オプションを使用して、クラス・データ共用を使用可能にすることができます。
JVM は、既存のキャッシュに接続するか、キャッシュが存在しない場合は新規キャッシュを作成します。</p>
<p>JVM によってロードされるすべてのブートストラップおよびアプリケーション・クラスが、
デフォルトで共用されます。カスタム・クラス・ローダーは、アプリケーション・クラス・ローダーを継承している場合は
自動的にクラスを共用します。継承していない場合は、JVM で提供される Java ヘルパー API
を使用して、そのキャッシュにアクセスする必要があります。(<a href="#adaptingclassloaders">カスタム・クラス・ローダーの共用クラスへの適応</a>を参照)</p>
<p><font color="RED"><span id="changed">|</span>JVM は、特定のメソッドの AOT (ahead-of-time) コンパイル・コードをキャッシュに格納します。これにより、後続の JVM の起動時間が短縮されます。AOT コンパイル・コードは、実際には JVM 間で共用されませんが、JVM 始動時のコンパイル時間を短縮する目的でキャッシュに入れられます。キャッシュに入れられる AOT コードの量は、ヒューリスティックに判別されます。キャッシュに格納されるメソッドを制御することはできませんが、AOT コードの格納に充てられるキャッシュ・スペースの容量の上限と下限を設定できます。また、AOT キャッシュを完全に使用不可に設定することもできます。
<span id="changed">|</span>詳しくは、<a href="#sharedclassesxoptions">クラス・データ共用の使用可能化と構成</a>を参照してください。</font></p></p>
<p>
<a name="wq130"></a>
<h3 id="wq130">キャッシュ・アクセス</h3>
<p><span><font color="RED"><span id="changed">|</span>JVM は、読み取り/書き込みアクセス権限または読み取り専用アクセス権限でキャッシュにアクセスします。</font></span> 読み取り/書き込みアクセス権限でキャッシュに接続する JVM は、このキャッシュを更新できます。キャッシュに対して同時に読み取り操作を実行できる JVM の数に制限はありません。これは、他の JVM がキャッシュに対して書き込み操作を実行している場合でも同様です。</p>
<p>実行時バイトコード変更を使用する場合は、注意が必要です。
詳しくは、<a href="#runtimebytecode">実行時バイトコード変更</a>を参照してください。</p></p>
<p>
<a name="wq131"></a>
<h3 id="wq131">キャッシュの動的更新</h3>
<p>共用クラス・キャッシュは任意の JVM の存続期間を超えて存続するため、
ファイル・システムで JAR やクラスに行われた可能性がある変更を反映するよう、
キャッシュは動的に更新されます。動的更新により、キャッシュを使用するアプリケーションでキャッシュを意識する必要がなくなります。</p></p>
<p>
<a name="wq132"></a>
<h3 id="wq132">キャッシュ・セキュリティー</h3>
<p>共用クラス・キャッシュへのアクセスは、オペレーティング・システムの許可と
Java セキュリティーの許可によって制限されます。共用クラス・キャッシュは、
<strong>groupAccess</strong> コマンド行サブオプションが使用された場合を除いて、
デフォルトでユーザー・アクセスで作成されます。クラス・データの共用を登録しているクラス・ローダーのみが、共用クラス・キャッシュを更新できます。</p>
<p><font color="RED"><span id="changed">|</span>キャッシュ・メモリーは、メモリー・ページ保護機能により偶発的/意図的な破損から保護されています。これは絶対に破損しないことを保証するものではありません。これは、JVM はページへの書き込み時にページの保護を解除する必要があるためです。キャッシュが変更されないことを保証する唯一の方法は、キャッシュを読み取り専用で開くことです。</font></p>
<p>Java SecurityManager がインストールされている場合、java.policy ファイルに SharedClassPermission 行を追加することによって、デフォルト・ブートストラップ、アプリケーション、および拡張クラス・ローダー以外のクラス・ローダーにクラス共用の許可を付与する必要があります。(<a href="#usingsharedclasspermissions">SharedClassPermission の使用</a>を参照)
RuntimePermission 「createClassLoader」 は、新しいクラス・ローダーの作成を制限します。したがって、キャッシュへのアクセスも制限します。</p></p>
<p>
<a name="wq133"></a>
<h3 id="wq133">キャッシュの存続期間</h3>
<p>1 つのシステムに複数のキャッシュが存在することが可能で、それらは、
<strong>-Xshareclasses</strong> コマンドのサブオプションとして名前で指定されます。
JVM が一度に接続できるキャッシュは 1 つのみです。</p>
<p>始動時にデフォルトのキャッシュ・サイズを指定変更するには、<strong>-Xscmx&lt;n&gt;&lt;size&gt;</strong> を使用します。キャッシュの存続期間中このサイズは変更されません。キャッシュは、<strong>-Xshareclasses</strong> コマンドのサブオプションを使用して明示的に破棄されるか、または キャッシュ・ファイルが手動で削除されるまで存在します。</p></p>
<p>
<a name="wq134"></a>
<h3 id="wq134">キャッシュ・ユーティリティー</h3>
<p>キャッシュ・ユーティリティーはすべて、<strong>-Xshareclasses</strong> コマンドのサブオプションです。
<a href="#sharedclassesxoptions">クラス・データ共用の使用可能化と構成</a>を参照するか、
<strong>-Xshareclasses:help</strong> を使用して、使用可能なサブオプションのリストを参照してください。</p></p>
<a name="sharedclassesxoptions"></a>
<h2 id="sharedclassesxoptions"><a href="#ToC_108">クラス・データ共用の使用可能化と構成</a></h2>
<div>
<p>クラス・データ共用とキャッシュ管理ユーティリティーを制御するには、java ランチャーのコマンド行オプションを使用します。</p></div><a id="idx47" name="idx47"></a><a id="idx48" name="idx48"></a>
<p>
<p><em>&lt;size&gt;</em> パラメーターを取るオプションでは、その数値の後に、キロバイトを示す「k」または「K」、メガバイトを示す「m」または「M」、あるいはギガバイトを示す「g」または「G」を付け加えてください。</p></p>
<dl class="parml">
<dt class="bold"><strong>-Xscmaxaot</strong><em>&lt;size&gt;</em></dt>
<dd>AOT データで使用できるキャッシュの最大バイト数を設定します。このオプションを使用すると、AOT 以外のデータでかなりの量のキャッシュ・スペースを使用できるようになります。デフォルトでは、AOT データの最大限度は、キャッシュのフリー・スペースの量となります。このオプションの値は、<strong>-Xscminaot</strong> の値以上、<strong>-Xscmx</strong> の値以下である必要があります。
</dd>
<dt class="bold"><strong>-Xscminaot</strong><em>&lt;size&gt;</em></dt>
<dd>AOT データ用に予約できるキャッシュの最小バイト数を設定します。デフォルトでは、AOT データがキャッシュに書き込まれても、キャッシュがフルになるか <strong>-Xscmaxaot</strong> 制限に達するまで、AOT データ用のスペースは予約されません。このオプションの値は <strong>-Xscmx</strong> または <strong>-Xscmaxaot</strong> の値を超えてはなりません。
<strong>-Xscminaot</strong> の値は常に、合計キャッシュ・サイズよりもかなり小さい値でなければなりません。それは、AOT データを作成できるのが、キャッシュ済みクラスに対してのみであるためです。<strong>-Xscminaot</strong> の値が
<strong>-Xscmx</strong> の値と等しい場合、クラス・データや AOT データは保管されません。これは、AOT データにはキャッシュのクラスが関連付けられていなければならないためです。
</dd>
<dt class="bold"><strong>-Xscmx</strong><em>&lt;size&gt;</em></dt>
<dd>キャッシュ・サイズを指定します。
このオプションは、キャッシュが作成されていて同じ名前のキャッシュが存在しない場合にのみ適用されます。デフォルト・キャッシュ・サイズは、プラットフォームによって異なります。
使用されるサイズ値を知るには、コマンド行引数として <strong>-verbose:sizes</strong> を追加します。最小キャッシュ・サイズは 4 KB です。最大キャッシュ・サイズも、プラットフォームによって異なります。(<a href="#cachesizelimits">キャッシュ・サイズの制限</a>を参照)
</dd>
<dt class="bold"><strong>-Xshareclasses</strong>:<em>&lt;suboption&gt;</em>[,<em>&lt;suboption&gt;</em>...]</dt>
<dd>クラス・データ共用を使用可能にします。多くのサブオプションを指定でき、その中に複数のキャッシュ・ユーティリティーが含まれます。
キャッシュ・ユーティリティーは、VM を始動せずに、指定されたキャッシュに必要な操作を実行します。
複数のサブオプションをコンマで区切って組み合わせられますが、
各キャッシュ・ユーティリティーは相互に排他的です。キャッシュ・ユーティリティーの実行中には、「Java 仮想マシンを作成できませんでした (Could not create the Javavirtual machine)」というメッセージが表示されると想定されます。キャッシュ・ユーティリティーは仮想マシンを作成しません。

<p>一部のキャッシュ・ユーティリティーは、以前のバージョンの Java のキャッシュや、ビット幅が異なる JVM で作成されたキャッシュでも機能します。このようなキャッシュは「非互換」キャッシュと呼ばれます。</p>

<p><strong>-Xshareclasses</strong> オプションで、以下のサブオプションを使用できます。
</p>
<dl class="parml">
<dt class="bold"><strong>help</strong></dt>
<dd>すべてのコマンド行サブオプションをリストします。
</dd>
<dt class="bold"><strong>name</strong>=<em>&lt;name&gt;</em></dt>
<dd>指定された名前のキャッシュに接続します。そのキャッシュが存在しない場合は、それを作成します。
また、キャッシュ・ユーティリティーによって変更される (例えば、破棄) キャッシュを示す場合にも使用されます。<strong>listAllCaches</strong> ユーティリティーを使用して、名前が指定されたキャッシュの中で現在使用可能なものを示します。名前が指定されていない場合、デフォルトの名前「sharedcc_%u」が使用されます。キャッシュ名の中の %u には、現在のユーザー名が挿入されます。 キャッシュ名に %g を指定すると、現在のグループ名を挿入できます。
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>cacheDir=</strong><em>&lt;directory&gt;</em></font></dt>
<dd><font color="RED"><span id="changed">|</span>キャッシュ・データの読み取り元および書き込み先のディレクトリーを設定します。デフォルトでは、<em>&lt;directory&gt;</em> は /tmp/javasharedresources です。ユーザーは、<em>&lt;directory&gt;</em> に対する十分な権限が付与されている必要があります。デフォルトでは、JVM は指定されたディレクトリーに永続キャッシュ・ファイルを直接書き込みます。永続キャッシュ・ファイルは、ファイル・システムから安全に移動および削除できます。 非永続キャッシュは共用メモリーに格納されます。このキャッシュには、メモリーの位置を記述する制御ファイルがあります。制御ファイルは指定されている <strong>cacheDir</strong> の javasharedresources サブディレクトリーに格納されます。
<span id="changed">|</span>このディレクトリーの中の制御ファイルを手動で移動または削除しないでください。<strong>listAllCaches</strong> ユーティリティー、
<span id="changed">|</span><strong>destroyAll</strong> ユーティリティー、および <strong>expire</strong> サブオプションは、特定の <strong>cacheDir</strong> の有効範囲内でのみ機能します。</font>
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>readonly</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>既存のキャッシュが読み取り専用権限で開かれます。このサブオプションが指定されている場合、JVM は新規キャッシュを作成しません。キャッシュを読み取り専用で開くことで、JVM によるキャッシュの変更が阻止されます。また、JVM は他のユーザーやグループが作成したキャッシュに、書き込み権限なしで接続できます。デフォルトでは、このサブオプションは指定されていません。</font>
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>nonpersistent</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>非永続キャッシュが使用されます。デフォルトでは、JVM はオペレーティング・システムの再始動後も維持されるディスクにキャッシュ・ファイルを作成します。<strong>nonpersistent</strong> サブオプションを指定すると、共用メモリーにキャッシュが作成されますが、オペレーティング・システムのシャットダウン時にこの共用メモリーは失われます。非永続キャッシュと永続キャッシュには同じ名前を指定できます。非永続キャッシュに対して <strong>destroy</strong> などのユーティリティーを実行するときには、常に <strong>nonpersistent</strong> サブオプションを使用してください。デフォルトでは、このサブオプションは指定されていません。</font>
</dd>
<dt class="bold"><strong>groupAccess</strong></dt>
<dd>新しいキャッシュにオペレーティング・システムの許可を設定し、
キャッシュへのグループ・アクセスを可能にします。デフォルトは、ユーザー・アクセスのみです。
</dd>
<dt class="bold"><strong>verbose</strong></dt>
<dd>詳細出力が使用可能になります。詳細出力には、共用クラス・キャッシュの全体的な状況と、詳細なエラー・メッセージが記述されます。
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>verboseAOT</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>キャッシュ内でコンパイル済み AOT コードが検出されている、または保管されている場合に、詳細出力が使用可能になります。AOT コードはヒューリスティックに生成されます。小規模アプリケーションの場合、生成された AOT コードがまったくない場合もあります。AOT キャッシングを使用不可にするには、<strong>noaot</strong> サブオプションを使用します。</font>
</dd>
<dt class="bold"><strong>verboseIO</strong></dt>
<dd>キャッシュ入出力アクティビティーに関する詳細出力が生成され、保管および検出されたクラスに関する情報がリストされます。クラス・ローダーには、固有 ID (ブートストラップ・ローダーは常に 0)
が与えられ、出力には現在有効なクラス・ローダー階層が示されます。各クラス・ローダーは、
この階層において、それぞれの親にクラスを要求しないと、ロードすることができません。
失敗した要求が多く見られるのが通常です。この動きは、クラス・ローダー階層で予想されるものです。
</dd>
<dt class="bold"><strong>verboseHelper</strong></dt>
<dd>Java ヘルパー API の詳細出力を使用可能にします。この出力では、ClassLoader によるヘルパー API の使用方法が示されます。
</dd>
<dt class="bold"><strong>silent</strong></dt>
<dd>すべての共用クラス・メッセージ (エラー・メッセージを含む) をオフにします。
</dd>
<dt class="bold"><strong>nonfatal</strong></dt>
<dd>クラス・データ共用が失敗していても、JVM の開始を許可します。JVM の通常の動作では、
クラス・データ共用が失敗した場合、VM の開始は拒否されます。
「nonfatal」が選択されていて、共用クラス・キャッシュの初期化が失敗した場合、JVM は読み取り専用モードでキャッシュに接続しようとします。接続が失敗すると、JVM はクラス・データ共用を使用せずに開始します。
</dd>
<dt class="bold"><strong>none</strong></dt>
<dd>コマンド行の最後に追加して、クラス・データ共用を使用不可にできます。
このサブオプションにより、コマンド行の前のほうにあるクラス共用引数は無効になります。
</dd>
<dt class="bold"><strong>modified=</strong><em>&lt;modified context&gt;</em></dt>
<dd>実行時にバイトコードを変更する可能性がある JVMTI エージェントがインストールされている場合に使用します。
このサブオプションを指定せず、バイトコード変更エージェントがインストールされている場合、
クラスを安全に共用するのに余分なパフォーマンス・コストがかかります。<em>&lt;modified
context&gt;</em> は、ユーザーが選択した記述子で、「myModification1」などです。
このオプションでは、キャッシュを分割し、コンテキスト myModification1 を使用する JVM のみが同じクラスを共用できるように
します。例えば、ある変更コンテキストで HelloWorld を実行し、その後、別の変更コンテキストでそれを再実行した場合、
キャッシュにすべてのクラスが 2 回保管されます。詳しくは、<a href="#runtimebytecode">実行時バイトコード変更</a>を参照してください。
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>reset</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>キャッシュが破棄され、JVM 開始時にキャッシュが再作成されます。コマンド行の最後に追加できます (<strong>-Xshareclasses:reset</strong>)。</font>
</dd>
<dt class="bold"><strong>destroy</strong> (ユーティリティー・オプション)</dt>
<dd><strong>name</strong>、<strong>cacheDir</strong>、および <strong>nonpersistent</strong> サブオプションで指定されるキャッシュを破棄します。キャッシュは、それを使用するすべての JVM がシャットダウン済みで、ユーザーに十分な許可がある場合にのみ、破棄可能です。
</dd>
<dt class="bold"><strong>destroyAll</strong> (ユーティリティー・オプション)</dt>
<dd>指定された <strong>cacheDir</strong> および <strong>nonpersistent</strong> サブオプションを使用して、使用可能なすべてのキャッシュの破棄を試行します。
キャッシュは、それを使用するすべての JVM がシャットダウン済みで、ユーザーに十分な許可がある場合にのみ、破棄可能です。
</dd>
<dt class="bold"><strong>expire</strong>=<em>&lt;time in minutes&gt;</em></dt>
<dd>共用クラスをロードする前に指定された期間に使用されなかったすべてのキャッシュを破棄します。これは JVM を終了しないため、ユーティリティー・オプションではありません。
</dd>
<dt class="bold"><strong>listAllCaches</strong> (ユーティリティー・オプション)</dt>
<dd>指定されたキャッシュ・ディレクトリー内のすべての互換キャッシュと非互換キャッシュをリストします。<strong>cacheDir</strong> が指定されていない場合は、デフォルト・ディレクトリーが使用されます。キャッシュごとに、Java バージョンや現在の使用状況などの要約情報が表示されます。
</dd>
<dt class="bold"><strong>printStats</strong> (ユーティリティー・オプション)</dt>
<dd><strong>name</strong>、<strong>cacheDir</strong>、および <strong>nonpersistent</strong> サブオプションにより指定されるキャッシュの要約情報を表示します。表示される最も有用な情報は、
キャッシュがどのぐらいフルであるか、また、それにいくつのクラスが含まれるかです。
stale クラスとは、ファイル・システム上で更新され、そのためにキャッシュによって「stale」とマーク付けされたクラスです。
stale クラスはキャッシュから消去されず、再利用できます。
詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。
</dd>
<dt class="bold"><strong>printAllStats</strong> (ユーティリティー・オプション)</dt>
<dd>
<p><strong>name</strong>、<strong>cacheDir</strong>、および <strong>nonpersistent</strong> サブオプションにより指定されるキャッシュの詳細情報を表示します。すべてのクラスは、ロード元の位置への参照とともに発生順にリストされます。
クラス・メソッドの AOT コードもリストされます。</p> 

<p>「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>mprotect=</strong>[ all
<span id="changed">|</span>| default | none ]</font></dt>
<dd><font color="RED"><span id="changed">|</span>デフォルトでは、キャッシュが含まれているメモリー・ページは、特定のページの更新中を除き常時保護されています。これにより、偶発的な破損または意図的な破損からキャッシュを保護できます。キャッシュ・ヘッダーは、パフォーマンス・コストが低いため、デフォルトでは保護されません。「all」を指定すると、ヘッダーを含むすべてのキャッシュ・ページが保護されます。「none」を指定すると、ページは保護されません。</font>
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>noBootclasspath</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>ブートストラップ・クラス・ローダーによってロードされたクラスが共用クラス・キャッシュに格納されないようにします。SharedClassURLFilter API と組み合わせて使用すると、 キャッシュに入れるクラスを正確に制御できます。共用クラス・フィルタリングについて詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</font>
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>cacheRetransformed</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>JVMTI の RetransformClasses 機能を使用して変換されたクラスのキャッシュを使用可能にします。</font>
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>noaot</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>AOT コードのキャッシュとロードを使用不可にします。</font>
</dd>
</dl>
</dd>
</dl>
<a name="shc_admin"></a>
<h2 id="shc_admin"><a href="#ToC_109">キャッシュの作成、読み込み、モニター、および削除</a></h2>
<div>
<p>共用クラス・データ・キャッシュのライフ・サイクルの概要を説明します。キャッシュ管理ユーティリティーの例も示します。</p></div><a id="idx49" name="idx49"></a><a id="idx50" name="idx50"></a><a id="idx51" name="idx51"></a><a id="idx52" name="idx52"></a>
<p>クラス・データ共用を使用可能にするには、アプリケーション・コマンド行に
<strong>-Xshareclasses[:name=&lt;name&gt;]</strong> を追加します。</p>
<p>JVM は、指定された名前の既存キャッシュに接続するか、その名前の新しいキャッシュを作成します。新しいキャッシュが作成された場合、キャッシュがフルになるまで、
ロードされるすべてのブートストラップおよびアプリケーション・クラスがそれに取り込まれます。
2 つ以上の JVM が同時に始動された場合、
それらすべてが同時にキャッシュにデータの取り込みを行います。</p>
<p>キャッシュが作成されたことを確認するには、<tt class="xph">java -Xshareclasses:listAllCaches</tt> を実行します。
共用されるクラス数とクラス・データ量を確認するには、<tt class="xph">java -Xshareclasses:[name=&lt;name&gt;],printStats</tt> を実行します。(このユーティリティーは、アプリケーション JVM の終了後か、別のコマンド・ウィンドウで実行できます。)</p>
<p>JVM が稼働している間のキャッシュ使用量について詳細にフィードバックするには、<strong>verbose</strong> サブオプションを使用します。
例えば、<tt class="xph">java -Xshareclasses:[name=&lt;name&gt;],verbose</tt> と指定します。</p>
<p>キャッシュからロードされる、またはキャッシュに保管されるクラスを確認するには、
アプリケーション・コマンド行に <tt class="xph">-Xshareclasses:[name=&lt;name&gt;],verboseIO</tt> を追加します。</p>
<p>作成されたキャッシュを削除するには、<tt class="xph">java -Xshareclasses:[name=&lt;name&gt;],destroy</tt> を実行します。
 キャッシュに多くの stale クラスが含まれるか、キャッシュがフルで、より大きいキャッシュを作成したい場合にのみ、
キャッシュを削除する必要があります。</p>
<p>キャッシュ・サイズは、個別のアプリケーションに応じて調整することが推奨されます。
これは、デフォルトが最適サイズである可能性が低いためです。
最適なキャッシュ・サイズを判別する最も良い方法としては、
(<strong>-Xscmx</strong> を使用して) 大容量のキャッシュを指定してアプリケーションを実行し、
printStats を使用して保管されたクラス・データの量を判別するという方法があります。
printStats で示された値に、予備のために少量を加算します。
クラスは JVM 存続期間中のどの時点でもロード可能であるため、
この分析はアプリケーションの終了後に行うのが最適です。
ただし、キャッシュがフルであることが、それに接続された JVM のパフォーマンスや機能に悪影響を与えることはありません。そのため、キャッシュ・サイズを必要なものより小さくすることは、非常に合理的です。</p>
<p>キャッシュがフルになると、verbose サブオプションを使用して、JVM のコマンド行にメッセージが出力されます。その後、フルのキャッシュを共用しているすべての JVM が、さらにクラスをプロセス・メモリーにロードします。フルのキャッシュ内のクラスは、依然として共用可能ですが、
フルのキャッシュは読み取り専用で、新しいクラスで更新することはできません。</p>
<a name="shc_performance"></a>
<h2 id="shc_performance"><a href="#ToC_110">パフォーマンスとメモリーの消費</a></h2>
<div>
<p>クラス・データ共用は、類似したコードを実行する複数の JVM を使用するシステムで特に有効です。
このようなシステムには、仮想メモリー使用量を削減できるという利点があります。
また、JVM の始動とシャットダウンを頻繁に行うシステムでも有用で、起動時間を改善することができます。</p></div><a id="idx53" name="idx53"></a><a id="idx54" name="idx54"></a>
<p>新しいキャッシュの作成とデータ取り込みのオーバーヘッドは、わずかです。
1 つの JVM の JVM 起動時間は通常、ロードするクラスの数に応じて、クラス・データ共用を使用しないシステムと比べて 0 から 5 % 遅くなります。データ取り込み済みのキャッシュを使用した JVM 起動時間は、
オペレーティング・システムとロードされるクラスの数に応じて、クラス・データ共用を使用しないシステムと比べて通常 10 % から 40 % 向上します。
複数の JVM が並行して稼働する場合、全体の起動時間がさらに大きく向上します。</p>
<p>重複クラスは、共用クラス・キャッシュ内で統合されます。例えば、myClasses.jar からロードされたクラス A と myOtherClasses.jar からロードされたクラス A (同じ内容) は、キャッシュに一度のみ保管されます。<strong>printAllStats</strong> ユーティリティーは、
重複したクラスの複数の項目を示します。各項目は同じクラスを指します。</p>
<p>クラス・データ共用によりアプリケーションを実行する場合、オペレーティング・システム・ツールを使用して、
仮想メモリー使用量の削減を確認することができます。</p>
<a name="shc_limitations"></a>
<h2 id="shc_limitations"><a href="#ToC_111">クラス・データ共用を使用する際の考慮事項と制限</a></h2>
<div>
<p>クラス・データ共用を製品にデプロイする場合と、開発環境でクラス・データ共用を使用する場合に検討すべき事項を示します。</p></div><a id="idx55" name="idx55"></a><a id="idx56" name="idx56"></a>
<a name="cachesizelimits"></a>
<h3 id="cachesizelimits"><a href="#ToC_112">キャッシュ・サイズの制限</a></h3>
<div>
<p>理論上の最大キャッシュ・サイズは 2 GB です。指定できるキャッシュのサイズは、システムに使用可能な物理メモリーおよびページング・スペースの量によって制限されます。</p></div><a id="idx57" name="idx57"></a>
<p>クラスを共用するためのキャッシュは、System V IPC 共用メモリー・メカニズムを使用して割り振られます。</p>
<p>プロセスの仮想アドレス・スペースは、
共用クラス・キャッシュと Java ヒープで共用されるため、Java ヒープの最大サイズを増やすと、作成可能な共用クラス・キャッシュのサイズが減ります。</p>
<p>キャッシュ・サイズは、<strong>SHMMAX</strong> の設定により制限されます。
これは、割り振り可能な共用メモリーの量を制限します。
これらの設定は、/proc/sys/kernel/shmmax ファイルにあります。<strong>SHMMAX</strong> は通常 30 MB に設定されます。</p>
<a name="runtimebytecode"></a>
<h3 id="runtimebytecode"><a href="#ToC_113">実行時バイトコード変更</a></h3>
<div>
<p>バイトコード・データを変更可能な JVM Tool Interface (JVMTI) エージェントを使用する JVM で、変更されたクラスを別の JVM と共用する場合は、modified=<em>&lt;modified_context&gt;</em> サブオプションを使用してください。</p></div><a id="idx58" name="idx58"></a>
<p>modified context (変更コンテキスト) は、実行される変更のタイプを記述する、ユーザー指定の記述子です。
変更コンテキストはキャッシュを区分し、同じコンテキストで実行されるすべての JVM が 1 つの区分を共用できるようにします。</p>
<p>この区分化により、変更されたバイトコードを使用しない JVM は、変更されたバイトコードを使用する JVM との間で 1 つのキャッシュを安全に共用することができます。指定された変更コンテキストを使用するすべての JVM は、予測可能であり反復可能な方法でクラスごとにバイトコードを変更することにより、
キャッシュに保管された変更クラスが別の JVM によってロードされるときに、期待どおりの変更値を持つようにする必要があります。共用クラス・キャッシュからロードされたクラスはエージェントによって再度変更されることはないため、変更は必ず予測可能です。</p>
<p>変更コンテキストなしで JVMTI エージェントを使用する場合も、JVM によりクラスを安全に共用できますが、パフォーマンスに若干の影響が出ます。
JVMTI エージェントで変更コンテキストを使用すれば、余分のチェックが不要になるため、パフォーマンスに影響はありません。java.net.URLClassLoader を拡張し、JVMTI を使用しないでロード時にバイトコードを変更するカスタム ClassLoader は、その変更されたバイトコードを自動的に保管しますが、キャッシュはそのバイトコードを変更されたものとして処理しません。同じキャッシュを共用するその他の VM は、変更されたクラスをロードします。JVMTI エージェントの場合と同じ方法で modified=<em>&lt;modification_context&gt;</em> サブオプションを使用して、キャッシュ内の変更されたバイトコードを区分できます。カスタムの ClassLoader で、クラスに対して予測不能なロード時変更を行う必要がある場合は、その ClassLoader でクラス・データの共用を試行してはいけません。</p>
<p>このトピックについて詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<a name="shc_os_limitations"></a>
<h3 id="shc_os_limitations"><a href="#ToC_114">オペレーティング・システムの制限</a></h3>
<div>
<p>32 ビット JVM と 64 ビット JVM の間ではクラスを共用できません。キャッシュ情報を格納できる一時ディスク・スペースが必要です。キャッシュへのアクセス権限は、オペレーティング・システムによって施行されます。</p></div><a id="idx59" name="idx59"></a>
<p>32 ビット・アプリケーションと
64 ビット・アプリケーションの両方を実行できるオペレーティング・システムの場合、
32 ビット JVM と 64 ビット JVM の間でのクラス・データ共用は許可されません。
<strong>listAllCaches</strong> サブオプションには、使用されている JVM のアドレス・モードに応じて、
32 ビットのキャッシュか 64 ビットのキャッシュがリストされます。</p>
<p>共用クラス・キャッシュは、
システムに存在するキャッシュに関する識別情報を保管するためのディスク・スペースを必要とします。
この情報は、/tmp/javasharedresources に保管されます。
識別情報ディレクトリーが削除された場合、JVM はシステム上の共用クラスを識別できないため、
キャッシュを再作成する必要があります。<tt class="xph">ipcs</tt> コマンドを使用して、JVM またはアプリケーションによって使用されるメモリー・セグメントを表示できます。</p>
<p>共用クラス・キャッシュを使用するために、JVM を実行するユーザーは同じグループ内になければなりません。共用クラス・キャッシュにアクセスするための許可は、オペレーティング・システムによって執行されます。キャッシュ名が指定されない場合、
同じシステム上の複数のユーザーがデフォルトで独自のキャッシュを作成するように、
デフォルト名にユーザー名が付加されます。</p>
<a name="usingsharedclasspermissions"></a>
<h3 id="usingsharedclasspermissions"><a href="#ToC_115">SharedClassPermission の使用</a></h3>
<div>
<p>クラス・データ共用と併せて SecurityManager が使用され、
稼働中のアプリケーションで独自のクラス・ローダーが使用されている場合、
クラスを共用する前に、これらのクラス・ローダーにクラス共用の許可を付与する必要があります。</p></div><a id="idx60" name="idx60"></a>
<p>ClassLoader クラス名 (ワイルドカードを使用可) と、付与するアクセス権を決定する "read"、"write"、または "read,write" のいずれかを使用して、java.policy ファイルに共用クラスのアクセス権を追加します。
例えば、次のようにします。
</p>
<pre class="xmp">permission com.ibm.oti.shared.SharedClassPermission
        "com.abc.customclassloaders.*", "read,write";</pre><p class="indatacontent">ClassLoader に正しいアクセス権が設定されていないと、ClassLoader はクラスを共用できません。デフォルトのブートストラップ、アプリケーション、または拡張クラス・ローダーの許可は、変更できません。</p>
<a name="adaptingclassloaders"></a>
<h2 id="adaptingclassloaders"><a href="#ToC_116">カスタム・クラス・ローダーの共用クラスへの適応</a></h2>
<div>
<p>java.net.URLClassLoader を拡張するクラス・ローダーは、変更することなくクラスを共用できます。java.net.URLClassLoader を拡張しないクラス・ローダーは、クラス・データを共用するように適応させる必要があります。</p></div><a id="idx61" name="idx61"></a>
<p>SecurityManager が使用される場合、すべてのカスタム・クラス・ローダーに、クラス共用の許可が付与される必要があります。<a href="#usingsharedclasspermissions">SharedClassPermission の使用</a>を参照してください。IBM は、カスタム・クラス・ローダーのさまざまなタイプに応じたいくつかの Java インターフェースを提供しています。
これにより、そのクラス・ローダーが、共用クラス・キャッシュでクラスを検出および保管することができます。これらのクラスは、com.ibm.oti.shared パッケージにあります。</p>
<p>このパッケージの Javadoc は、SDK で docs/content/apidoc ディレクトリーに提供されます。</p>
<p>これらのインターフェースの使用方法について詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/index.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
<a name="jcommchapter"></a>
<h1 id="jcommchapter"><a href="#ToC_117">Java Communications API (JavaComm) の使用</a></h1>
<div>
<p>Java Communications (API) パッケージ
(JavaComm) は、IA32、PPC32/PPC64 および AMD64/EM64T プラットフォームの Runtime Environment for Linux で使用するために提供されているオプションのパッケージです。
JavaComm は、SDK あるいは Runtime Environment とは別に単独でインストールします。</p></div>
<p>JavaComm API により Java アプリケーションは、
ボイス・メール、ファクシミリ、およびスマートカードなどのテクノロジーに
シリアルおよびパラレル・ポート通信を、プラットフォームに依存しないで実施することができます。</p>
<p>Java Communications API は、Electronic Industries Association (EIA)-232 (RS232) シリアル・ポートと米国電気電子学会 (IEEE) 1284 パラレル・ポートをサポートし、また、
IBM バージョン 6 Runtime Environment の入ったシステムに対応しています。</p>
<p>Java Communications API を使用すると、以下のことが行えます。</p>
<ul>
<li>システムのポートをリストする。</li>
<li>ポートの所有権をオープンし、要求する。</li>
<li>Java Communications API を使用するアプリケーション間のポート所有権の競合を解決する。</li>
<li>イベント通知を使用して、非同期および同期入出力ポートのモニタリングを行う。</li>
<li>ポートの状態変更を記述する bean スタイルのイベントを受信する。</li></ul>
<a name="instcomm"></a>
<h2 id="instcomm"><a href="#ToC_118">圧縮ファイルからの Java Communications API のインストール</a></h2>
<div>
<p>Java Communications API をインストールする前に、SDK または Runtime Environment がインストール済みであることを確認してください。</p></div>
<p>
<p>もともと RPM パッケージを使用して Java をインストールしている場合は、
Java Communications API を RPM ファイルからインストールしてください。Java Communications
API を RPM パッケージからインストールするには、<a href="#instcomm_rpm">RPM ファイルからの Java Communications API のインストール</a>を参照してください。</p>
<p>Java Communications API を圧縮ファイルからインストールするには、以下のようにします。</p></p>
<ol type="1">
<li>Java Communications API 圧縮ファイル <a name="instcomm__install-file"></a><span id="instcomm__install-file">ibm-java-javacomm-3.0-0.0-&lt;plat&gt;-&lt;arch&gt;.tar.gz</span>
を、SDK または Runtime Environment がインストールされているディレクトリーに格納します。デフォルト・
ディレクトリーにインストールした場合、これは /opt/ibm/java-i386-60/ になります。</li>
<li>シェル・プロンプトから、圧縮ファイルが入っているディレクトリーにコンテンツを解凍します。 
<pre class="xmp">tar -xvzf ibm-java-javacomm-3.0-0.0-&lt;plat&gt;-&lt;arch&gt;.tar.gz</pre>



<p>ここで、<tt class="xph">&lt;arch&gt;</tt> はアーキテクチャー (i386、x86_64、ppc、または ppc64) を表します。</p></li>
<li><font color="RED"><span id="changed">|</span>javacomm ファイルを、ご使用の SDK 内の適切なディレクトリーにコピーします。
<span id="changed">|</span>
<span id="changed">|</span><ol type="a">
<span id="changed">|</span><li>lib/libLinuxSerialParallel.so を jre/bin/ ディレクトリーにコピーします。</li>
<span id="changed">|</span><li>jar/comm.jar を jre/lib/ext/ ディレクトリーにコピーします。</li>
<span id="changed">|</span><li>lib/javax.comm.properties を jre/lib/ ディレクトリーにコピーします。</li></ol> デフォルトでは、SDK は /opt/ibm/java-i386-60/ ディレクトリーにインストールされます。</font></li></ol>
<a name="instcomm_rpm"></a>
<h2 id="instcomm_rpm"><a href="#ToC_119">RPM ファイルからの Java Communications API のインストール</a></h2>
<div>
<p>Java Communications API をインストールする前に、SDK または Runtime Environment がインストール済みであることを確認してください。</p></div>
<p>もともと RPM パッケージを使用して Java をインストールしている場合は、
Java Communications API を RPM ファイルからインストールしてください。</p>
<ol type="1">
<li>root でログオンしていること確認して、シェル・プロンプトをオープンします。</li>
<li><tt class="xph">rpm -ivh</tt> コマンドを使用して、Java Communications API RPM ファイルをインストールします。  例えば、次のようにします。


<pre class="xmp">rpm -ivh ibm-javacomm-3.0-0.0.&lt;arch&gt;.rpm</pre> Java Communications API は、/opt/ibm/java-i386-60/ ディレクトリー構造の内部にインストールされます。</li>
<li><font color="RED"><span id="changed">|</span>javacomm ファイルを、ご使用の SDK 内の適切なディレクトリーにコピーします。
<span id="changed">|</span>
<span id="changed">|</span><ol type="a">
<span id="changed">|</span><li>lib/libLinuxSerialParallel.so を jre/bin/ ディレクトリーにコピーします。</li>
<span id="changed">|</span><li>jar/comm.jar を jre/lib/ext/ ディレクトリーにコピーします。</li>
<span id="changed">|</span><li>lib/javax.comm.properties を jre/lib/ ディレクトリーにコピーします。</li></ol> デフォルトでは、SDK は /opt/ibm/java-i386-60/ ディレクトリーにインストールされます。</font></li></ol>
<a name="fileloc"></a>
<h2 id="fileloc"><a href="#ToC_120">Java Communications API ファイルの場所</a></h2>
<p>
<p>デフォルトでは、Java Communications API ファイルは、/opt/ibm/java-i386-60/ ディレクトリーにインストールされます。
これらのファイルとその構造は以下のとおりです。</p></p>
<ul>
<li>jar/comm.jar</li>
<li>jar/commtest.jar</li>
<li>jar/tools/BlackBox.jar</li>
<li>jar/tools/ParallelBlackBox.jar</li>
<li>lib/javax.comm.properties</li>
<li>lib/libLinuxSerialParallel.so</li></ul>
<a name="javacomm_lnx_serial"></a>
<h2 id="javacomm_lnx_serial"><a href="#ToC_121">シリアル・ポートとパラレル・ポートのアクセス・モードの変更</a></h2>
<div>
<p>Java Communications API をインストールしたら、シリアル・ポートとパラレル・ポートのアクセス・モードを変更して、ユーザーがこれらのデバイスにアクセスできるようにする必要があります。</p></div>
<p>
<p>必要なデバイスに対する読み取りおよび書き込みアクセス権限をユーザーに与える必要があります。
root でログオンして、
該当する以下のコマンドを使用してください。 
</p>
<pre class="xmp">    chmod 660 /dev/ttyS0    (別名 シリアル・ポート COM1)
    chmod 660 /dev/lp0      (別名 パラレル・ポート LPT1)
    chmod 660 /dev/ttyS1    (別名 シリアル・ポート COM2)
    chmod 660 /dev/ttyS2    (別名 シリアル・ポート COM3)
    chmod 660 /dev/ttyS3    (別名 シリアル・ポート COM4)</pre>
<p>特定のユーザーをデバイスが存在するグループに追加します。例えば、SUSE システムでは、デバイスは、<tt>uucp</tt> グループにあります。この場合、
ユーザーは <tt>uucp</tt> グループに追加されると、そのデバイスへのアクセス権も得られます。</p>
<p> 必要に応じてそのほかのポートのアクセス・モードを変更します。</p></p>
<a name="javacomm_lnx_devices"></a>
<h2 id="javacomm_lnx_devices"><a href="#ToC_122">javax.comm.properties ファイルでのデバイスの指定</a></h2>
<div>
<p>ファイル javax.comm.properties を使用すると、Java Communications API に対して使用可能にするデバイスの接頭部と、それらのデバイスがパラレルかシリアルかを指定できます。 ポート番号は、すべてのデバイスに順番に割り振られます。</p></div>
<p>
<p>例えば、<tt class="xph">/dev/ttyS=PORT_SERIAL</tt> と指定していて、<tt class="xph">/dev/ttyS0</tt> と <tt class="xph">/dev/ttyS1</tt> の 2 つのデバイスが存在する場合、これらのデバイスは COM1 と COM2 に割り振られます。</p>
<p><span>USB シリアル・コネクターを使用する場合は、javax.comm.properties ファイルの <tt class="xph">/dev/ttyUSB=PORT_SERIAL</tt> という行のコメントを外してください。</span> デバイス
<tt class="xph">/dev/ttyUSB0</tt> と <tt class="xph">/dev/ttyUSB1</tt> が存在していて、COM1 と
COM2 がすでに定義済みの場合、USB シリアル・デバイスは次の番号のポートである COM3 と COM4 に
割り振られます。</p></p>
<a name="javacomm_thinkpad"></a>
<h2 id="javacomm_thinkpad"><a href="#ToC_123">IBM ThinkPad でのシリアル・ポートの使用可能化</a></h2>
<div>
<p>多くの ThinkPad では BIOS によってデフォルトで使用不可にされているシリアル・ポートがあります。
現時点では、Linux でこのポートを使用可能にする方法はありません (ポートが BIOS で使用不可に設定されている場合、tpctl パッケージではポートを使用可能に設定<em>できません</em>)。</p></div>
<p>
<p>BIOS でポートを使用可能に設定するには、IBM ThinkPad のダウンロード・サイトで入手可能な DOS バージョンの ThinkPad 構成ユーティリティーを使用する必要があります。ThinkPad 構成ユーティリティーを使用するには、ブート可能な DOS ディスケットが必要です。
ThinkPad 構成ユーティリティーは、インストール・オプションによっては Windows<sup>(R)</sup> の ThinkPad ユーティリティーの一部としてインストールされている可能性があることに注意してください。このユーティリティーは、Windows のコマンド・プロンプトから実行できます。</p>
<p>Windows の場合に提供される ThinkPad 構成アプリケーションには、シリアル・ポートとパラレル・ポートを
使用可能または使用不可に設定するオプションがありますが、このオプションでは BIOS での設定を変更<em>できません</em>。 このため、このアプリケーションを Windows で使用する場合はポートを使用できますが、Linux を使用してシステムをリブートすると、ポートは使用<em>できません</em>。</p></p>
<a name="javacomm_printing"></a>
<h2 id="javacomm_printing"><a href="#ToC_124">Java Communications API での印刷に関する制限</a></h2>
<div>
<p>Java Communications API を使用して印刷をするときは、プリンターで「用紙送り」、「継続」、または類似したボタンを押す必要があります。</p></div>
<a name="javacomm_lnx_remove"></a>
<h2 id="javacomm_lnx_remove"><a href="#ToC_125">Java Communications API のアンインストール</a></h2>
<div>
<p>Java Communications API をアンインストールする場合に使用する手順は、インストール可能な Red Hat Package Manager (RPM) パッケージをインストールしているか、Tape Archive (TAR) 圧縮パッケージをインストールしているかによって異なります。</p></div>
<p></p>
<a name="javacomm_redhat_remove"></a>
<h3 id="javacomm_redhat_remove"><a href="#ToC_126">Red Hat Package Manager (RPM) パッケージのアンインストール</a></h3>
<div>
<p>RPM パッケージを使用して、Java Communications API をアンインストールします。</p></div>
<p></p>
<ol type="1">
<li>rpm ツールを使用して、パッケージをアンインストールします。 シェル・プロンプトで、次のコマンドを入力します。



<pre class="xmp">rpm -e ibm-javacomm-3.0-0.0</pre> あるいは、kpackage や yast2 などのグラフィック・ツールを使用することもできます。</li>
<li>Java Communications API をインストールしたディレクトリーに、必要なその他のツールが含まれていない場合は、そのディレクトリーを <strong>PATH</strong> ステートメントから削除します。 </li>
<li><font color="RED"><span id="changed">|</span>javacomm ライブラリーを SDK ディレクトリーに
<span id="changed">|</span>コピーした場合は、以下のファイルを SDK ディレクトリーから削除します。
<span id="changed">|</span>
<span id="changed">|</span><ul>
<span id="changed">|</span><li>jre/bin/libLinuxSerialParallel.so</li>
<span id="changed">|</span><li>jre/lib/ext/comm.jar</li>
<span id="changed">|</span><li>jre/lib/javax.comm.properties</li></ul> デフォルトでは、SDK は /opt/ibm/java-i386-60/ ディレクトリーにインストールされます。</font></li></ol>
<a name="javacomm_tar_remove"></a>
<h3 id="javacomm_tar_remove"><a href="#ToC_127">Tape Archive (TAR) 圧縮パッケージのアンインストール</a></h3>
<div>
<p>TAR 圧縮パッケージをインストールした場合に、Java Communications API をアンインストールするには、以下の手順を実行します。</p></div>
<p>
<p> 以下のファイルを、インストールしたディレクトリーから削除します。</p></p>
<ul><font color="RED"><span id="changed">|</span>
<span id="changed">|</span><li>jre/bin/libLinuxSerialParallel.so</li>
<span id="changed">|</span><li>jre/lib/ext/comm.jar</li>
<span id="changed">|</span><li>jre/lib/javax.comm.properties</li></font></ul>
<a name="javacomm_apidoc"></a>
<h2 id="javacomm_apidoc"><a href="#ToC_128">Java Communications API ドキュメンテーション</a></h2>
<div>
<p>API ドキュメンテーションと Java Communications API のサンプルは、次の Sun Web サイトで参照できます。</p></div>
<p>
<p><a href="http://java.sun.com/products/javacomm/" target="_blank">http://java.sun.com/products/javacomm/</a></p></p>
<a name="support"></a>
<h1 id="support"><a href="#ToC_129">独立系ソフトウェア・ベンダーのサービスおよびサポート</a></h1>
<div>
<p>サービスの連絡先:</p></div>
<p> IBM Solutions Developer Program に準ずるプログラム・コードのサービスを受けられる場合、
通常の利用方法によって、または Web (<a href="http://www.ibm.com/partnerworld/" target="_blank">http://www.ibm.com/partnerworld/</a>) で IBM Solutions Developer Program にお問い合わせください。</p>
<p>サービス契約 (つまり、IBM の Personal Systems Support Line または各国における同等サービス) を購入している場合は、
そのサービス契約の条件によって、そのプログラムに関して受けられるサービス (該当がある場合) が決まります。</p>
<a name="accessibility"></a>
<h1 id="accessibility"><a href="#ToC_130">アクセシビリティー</a></h1>
<div>
<p>この SDK および Runtime Environment で提供されるこのユーザー・ガイドは、スクリーン・リーダーを使用してテストしてあります。</p></div>
<p>ユーザー・ガイドのフォント・サイズを変更するには、ご使用のブラウザーで提供される機能を使用して
ください。通常、「<strong>表示</strong>」メニュー・オプションにあります。</p>
<p>キーボード・ナビゲーションが必要な場合は、<a href="http://www.ibm.com/developerworks/java/jdk/additional/" target="_blank">http://www.ibm.com/developerworks/java/jdk/additional/</a> の『<cite>Swing Key Bindings</cite>』にある Swing アプリケーション用の便利なキー・ストロークの説明を参照してください。</p>
<a name="access_keyboard"></a>
<h2 id="access_keyboard"><a href="#ToC_131">Swing での JComboBox コンポーネントのキーボードによる探索</a></h2>
<div>
<p>カーソル・キーを使用して JComboBox コンポーネントのドロップダウン・リストを上下に探索する場合、実際に項目が選択されるまで JComboBox のボタンあるいは編集可能フィールドは変更されません。これは、このリリースで正しい動作で、キーボードによる探索動作とマウスによる探索動作の
一貫性が保たれるため、アクセス可能度や使用可能度が向上します。</p></div>
<a name="access_webstart"></a>
<h2 id="access_webstart"><a href="#ToC_132">Web Start のアクセシビリティー (Linux IA 32 ビット、PPC32、および PPC64 のみ)</a></h2>
<div>
<p>Version 5.0 以降では、Java Web Start にはアクセス可能度と使用可能度において種々の改善がなされて、例えば、スクリーン・リーダーのサポートが充実し、キーボード・ナビゲーションも改善されています。</p></div>
<p>コマンド行のみで、Web Start 用に使用可能になっている Java アプリケーションを起動することができます。設定オプションを変更するには、ユーザーのホーム・ディレクトリーにある構成ファイル .java/.deployment/.deployment.properties を編集する必要があります。このファイルは、編集する前にバックアップをとってください。
Java アプリケーション・キャッシュ・ビューアーで指定できる設定がすべて、構成ファイルにあるわけではありません。</p>
<a name="rcf"></a>
<h1 id="rcf"><a href="#ToC_133">本書に関するご意見</a></h1>
<div>
<p>本書に関するご意見は、以下の連絡手段のいずれかを使用してご連絡ください。なお、これらの連絡手段は、技術的な問い合わせに答えるためではなく、資料に対するご意見のみをお聞きするために設けてあることを、ご了承ください。</p></div>
<p>ご意見の送り先は次のとおりです。</p>
<ul>
<li>電子メールの場合: idrcf@hursley.ibm.com</li>
<li>ファックスの場合: 

<ul>
<li>英国内から: 01962 842327</li>
<li>英国以外から: +44 1962 842327</li></ul></li>
<li>郵便の場合:
<div class="lines">IBM United Kingdom Ltd<br />
User Technologies, <br />
Mail Point 095&nbsp;&nbsp;&nbsp;<br />
Hursley Park&nbsp;&nbsp;&nbsp;<br />
Winchester&nbsp;&nbsp;&nbsp;<br />
Hampshire&nbsp;&nbsp;&nbsp;<br />
SO21 2JN United Kingdom<br />
</div></li></ul>
<p><strong>ただし、</strong>IBM にメッセージを送る際には、フィードバック・データ (質問、意見、提案事項な
ど) を含め、メッセージに組み込む情報はすべて公表を承諾されたものとみなされる
こと、IBM ではこれらの情報をいかなる義務も負うことなく、無制限にコピー、利用、開示し、かつ他に対して配布できることをご承知おきください。さらに、IBM では、
これらの情報に含まれるすべての着想、概念、ノウハウ、または技術を、製品の開発、
製造、および販売など、あらゆる目的に利用できるものとします。</p>
<a name="xoptions"></a>
<h1 id="xoptions"><a href="#ToC_134">付録A. 非標準オプション</a></h1>
<div>
<p>以下にリストする <strong>-X</strong> オプションは非標準であり、予告なしに変更されることがあります。</p></div>
<p>
<p><em>&lt;size&gt;</em> パラメーターを取るオプションでは、その数値の後に、キロバイトを示す「k」または「K」、メガバイトを示す「m」または「M」、あるいはギガバイトを示す「g」または「G」を付け加えてください。</p>
<p><em>&lt;percentage&gt;</em> パラメーターをとるオプションでは、0 から 1 までの数値を使用します。例えば、50% は 0.5 となります。</p></p>
<dl class="parml">
<dt class="bold"><strong>-Xargencoding</strong></dt>
<dd> 引数リストに Unicode エスケープ・シーケンスを入れることができます。
このオプションは、デフォルトでオフに設定されています。
</dd>
<dt class="bold"><strong>-Xbootclasspath</strong>:<em>&lt;: で区切られたディレクトリーおよび ZIP ファイルまたは JAR ファイル&gt;</em></dt>
<dd> ブートストラップ・クラスおよびリソースの検索パスを設定します。
デフォルトでは、内部の VM ディレクトリーおよび .jar ファイル内のブートストラップ・クラスおよびリソースを検索します。
</dd>
<dt class="bold"><strong>-Xbootclasspath/a</strong>:<em>&lt;: で区切られたディレクトリーおよび ZIP ファイルまたは JAR ファイル&gt;</em></dt>
<dd> 指定されたディレクトリー、ZIP、または JAR ファイルをブートストラップ・クラス・パスの最後に追加します。
デフォルトでは、内部の VM ディレクトリーおよび .jar ファイル内のブートストラップ・クラスおよびリソースを検索します。
</dd>
<dt class="bold"><strong>-Xbootclasspath/p</strong>:<em>&lt;: で区切られたディレクトリーおよび ZIP ファイルまたは JAR ファイル&gt;</em></dt>
<dd> 指定されたディレクトリー、ZIP、または JAR ファイルをブートストラップ・クラス・パスの前に付加します。
<strong>-Xbootclasspath: </strong> または <strong>-Xbootclasspath/p:</strong>
オプションを使用して、標準 API のクラスをオーバーライドするアプリケーションを配置しないでください。
そのような配置は、Java Runtime Environment バイナリー・コードのライセンス違反になります。
デフォルトでは、内部の VM ディレクトリーおよび .jar ファイル内のブートストラップ・クラスおよびリソースを検索します。
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>-Xcheck:classpath</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span>クラスパスでエラーが見つかった場合に、警告メッセージを表示します。例えば、ディレクトリーの欠落や JAR ファイルの欠落などです。</font>
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xcheck:gc</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;scan
options&gt;</span><span class="delim">]</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;verify
options&gt;</span><span class="delim">]</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;misc
options&gt;</span><span class="delim">]</span></span></dt>
<dd> ガーベッジ・コレクションの追加検査を行います。デフォルトでは、検査が実行されません。詳しくは、 <strong>-Xcheck:gc:help</strong> の出力を参照してください。
</dd>
<dt class="bold"><a id="xoptions__xcheckjni" name="xoptions__xcheckjni"></a><strong>-Xcheck:jni</strong></dt>
<dd>JNI 機能の追加検査を行います。デフォルトでは、検査が実行されません。
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><span class="synph"><span class="kwd">-Xcheck:memory</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;option&gt;</span><span class="delim">]</span></span></font></dt>
<dd><a id="idx62" name="idx62"></a><a id="idx63" name="idx63"></a>厳密な検査を実行して、JVM が失敗して終了する原因となった JVM 内のメモリー・リークを識別します。オプションを指定しないと、デフォルトで <strong>all</strong> が使用されます。詳しくは、<strong>-Xcheck:memory:help</strong> の出力か、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。
</dd>
<dt class="bold"><a id="xoptions__xchecknabounds" name="xoptions__xchecknabounds"></a><strong>-Xcheck:nabounds</strong></dt>
<dd> JNI 機能の追加検査を行います。デフォルトでは、検査が実行されません。
</dd>
<dt class="bold"><a id="xoptions__classgc" name="xoptions__classgc"></a><strong>-Xclassgc</strong></dt>
<dd> ガーベッジ・コレクションごとにクラス・オブジェクトの収集を使用可能にします。<a href="#xoptions__noclassgc"><strong>-Xnoclassgc</strong></a> も参照してください。
デフォルトでは、このオプションは使用可能です。
</dd>
<dt class="bold"><strong>-Xcodecache</strong><em>&lt;size&gt;</em></dt>
<dd> コンパイル済み Java メソッドのネイティブ・コードを保管するメモリー・ブロックの割り振り単位を設定します。稼働しているアプリケーションに適切な単位を選択できます。デフォルトでは、CPU アーキテクチャーとシステムの能力に従って内部的に選択されます。
</dd>
<dt class="bold"><a id="xoptions__compactexplicitgc" name="xoptions__compactexplicitgc"></a><strong>-Xcompactexplicitgc</strong></dt>
<dd>すべての <tt class="xph">System.gc()</tt> 呼び出しで圧縮を実行します。
<a href="#xoptions__nocompactexplicitgc"><strong>-Xnocompactexplicitgc</strong></a> も参照してください。
デフォルトでは、圧縮は内部的に起動されたときにのみに行われます。
</dd>
<dt class="bold"><a id="xoptions__compactgc" name="xoptions__compactgc"></a><strong>-Xcompactgc</strong></dt>
<dd>すべてのガーベッジ・コレクションで圧縮を実行します。<a href="#xoptions__nocompactgc"><strong>-Xnocompactgc</strong></a> も参照してください。
デフォルトでは、圧縮は内部的に起動されたときにのみに行われます。
</dd>
<dt class="bold"><strong>-Xconcurrentbackground</strong><em>&lt;number&gt;</em></dt>
<dd>並行マークで mutator スレッドを支援するために接続された低優先度バックグラウンド・スレッドの数を指定します。
デフォルトは、1 です。
</dd>
<dt class="bold"><strong>-Xconcurrentlevel</strong><em>&lt;number&gt;</em></dt>
<dd> 割り振り「負担」率を指定します。これは、割り振られたヒープの量と、
マークされたヒープの量との比率を示します。デフォルトは、8 です。
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xconmeter</span><span class="sep">:</span><span class="var">&lt;</span><span class="var">soa</span><span class="delim">|</span><span class="var">loa</span><span class="delim">|</span><span class="var">dynamic</span><span class="var">&gt;</span></span></dt>
<dd>LOA (Large Object Area) と SOA (Small Object
Area) のどちらの使用率を測定するか、およびそれによって並行マーク中にどちらの割り振りに負担がかかるかを判断します。選択された領域に割り振りの負担が適用されます。
<br />
<strong>-Xconmeter:dynamic</strong>	が指定された場合、どちらの領域が最初に満杯になるかに基づいて、測定する領域をコレクターが動的に判断します。
デフォルトでは、このオプションは <strong>-Xconmeter:soa</strong> に設定されます。
</dd>
<dt class="bold"><a id="xoptions__xdbg" name="xoptions__xdbg"></a><strong>-Xdbg</strong>:<em>&lt;options&gt;</em></dt>
<dd>アプリケーションのリモート・デバッグをサポートするデバッグ・ライブラリーをロードします。
詳しくは、<a href="#debugger">Java アプリケーションのデバッグ</a>を参照してください。
<a href="#xoptions__runjdwp"><strong>-Xrunjdwp</strong></a> を指定すると、同じサポートが提供されます。
</dd>
<dt class="bold"><strong>-Xdebug</strong></dt>
<dd>デバッガーを使用可能にして JVM を開始します。デフォルトでは、デバッガーは使用不可です。
</dd>
<dt class="bold"><strong>-Xdisableexcessivegc</strong></dt>
<dd>GC で過度の時間が費やされた場合の OutOfMemoryError のスローを使用不可にします。デフォルトでは、このオプションはオフです。
</dd>
<dt class="bold"><strong>-Xdisableexplicitgc</strong></dt>
<dd>System.gc() を呼び出す VM へのシグナルが効力を持ちません。
デフォルトでは、System.gc() の呼び出しが、ガーベッジ・コレクションを起動します。
</dd>
<dt class="bold"><strong>-Xdisablestringconstantgc</strong></dt>
<dd>ストリング拘束テーブルのストリングが収集されないようにします。デフォルトでは、このオプションは使用不可です。
</dd>
<dt class="bold"><strong>-Xdisablejavadump</strong></dt>
<dd>エラーおよびシグナルによる javadump 生成をオフにします。デフォルトでは、Javadump 生成は使用可能です。
</dd>
<dt class="bold"><strong>-Xenableexcessivegc</strong></dt>
<dd>GC で過度の時間が費やされた場合、このオプションは割り振り要求に対して NULL を戻します。
それにより、OutOfMemoryError のスローが発生します。
ヒープが最大に拡張され、使用可能時間の 95%
を GC が使用している場合のみ、このアクションが発生します。
この振る舞いはデフォルトです。
</dd>
<dt class="bold"><strong>-Xenableexplicitgc</strong></dt>
<dd>System.gc() を呼び出す VM へのシグナル通知により、ガーベッジ・コレクションが起動されます。これはデフォルトです。
</dd>
<dt class="bold"><strong>-Xenablestringconstantgc</strong></dt>
<dd>ストリング拘束テーブルのストリングを収集できるようにします。
デフォルトでは、このオプションは使用可能です。
</dd>
<dt class="bold"><strong>-Xfuture</strong></dt>
<dd>厳密なクラス・ファイル・フォーマット検査をオンにします。
将来のリリースでより厳密な検査がデフォルトになるため、
新しいコードの開発時にこのフラグを使用します。
デフォルトでは、厳密なフォーマット検査は使用不可です。
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xgcpolicy</span><span class="sep">:</span><span class="var">&lt;</span><span class="var">optthruput</span><span class="delim">|</span><span class="var">optavgpause</span><span class="delim">|</span><span class="var">gencon</span><span class="delim">|</span><span class="var">subpool</span><span class="var">&gt;</span></span> (PPC および zSeries 上のサブプール)</dt>
<dd>ガーベッジ・コレクターの振る舞いを制御します。
詳しくは、<a href="#garbage_options">ガーベッジ・コレクションのオプション</a>を参照してください。
</dd>
<dt class="bold"><strong>-Xgcthreads</strong><em>&lt;number of threads&gt;</em></dt>
<dd> ガーベッジ・コレクション中、並列操作に使用されるヘルパー・スレッドの数を設定します。
デフォルトでは、スレッドの数は、存在する物理 CPU の数から 1 を引いた数に設定され、最小が 1 になります。
</dd>
<dt class="bold"><strong>-Xgcworkpackets</strong><em>&lt;number&gt;</em></dt>
<dd> グローバル・コレクターで使用可能な作業パケットの総数を指定します。
指定されないと、コレクターは、最大ヒープ・サイズに基づいてパケットの数を割り振ります。
</dd>
<dt class="bold"><strong>-Xint</strong></dt>
<dd>Just-In-Time (JIT) コンパイラーを使用不可にして、JVM でインタープリターのみを使用するようにします。
デフォルトでは、JIT コンパイラーは使用可能です。
</dd>
<dt class="bold"><strong>-Xiss</strong><em>&lt;size&gt;</em></dt>
<dd>初期の Java スレッド・スタック・サイズを設定します。デフォルトで 2 KB です。
<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><font color="RED"><span id="changed">|</span><strong>-Xjarversion</strong></font></dt>
<dd><font color="RED"><span id="changed">|</span><a href="#build_number">バージョン情報の取得</a>を参照してください。</font>
</dd>
<dt class="bold"><a id="xoptions__xjit" name="xoptions__xjit"></a><span class="synph"><span class="kwd">-Xjit</span><span class="sep">[</span><span class="delim">:</span><span class="var">&lt;suboption&gt;</span><span class="delim">,</span><span class="var">&lt;suboption&gt;</span><span class="sep">...</span><span class="sep">]</span></span></dt>
<dd>JIT を使用可能にします。サブオプションの詳細については、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。<a href="#xoptions__xnojit"><strong>-Xnojit</strong></a> も参照してください。デフォルトでは、JIT は使用可能です。
</dd>
<dt class="bold"><a id="xoptions__xlinenumbers" name="xoptions__xlinenumbers"></a><strong>-Xlinenumbers</strong></dt>
<dd>デバッグのために、スタック・トレース内の行番号を表示します。
<a href="#xoptions__xnolinenumbers"><strong>-Xnolinenumbers</strong></a> も参照してください。
デフォルトでは、行番号はオンです。
</dd>
<dt class="bold"><a id="xoptions__loa" name="xoptions__loa"></a><strong>-Xloa</strong></dt>
<dd>ラージ・オブジェクト域 (LOA) を割り振ります。オブジェクトは、SOA でなく、この LOA に割り振られます。
デフォルトでは、LOA が使用可能でないサブプールを除いて、すべての GC ポリシーに LOA が使用可能です。
<a href="#xoptions__noloa"><strong>-Xnoloa</strong></a> も参照してください。
</dd>
<dt class="bold"><strong>-Xloainitial</strong><em>&lt;percentage&gt;</em></dt>
<dd><em>&lt;percentage&gt;</em> は、0 から 0.95 で、
ラージ・オブジェクト域 (LOA) に割り振られる古い世代の現行スペースの初期パーセンテージを指定します。デフォルトは 0.05、つまり 5% です。
</dd>
<dt class="bold"><strong>-Xloamaximum</strong><em>&lt;percentage&gt;</em></dt>
<dd><em>&lt;percentage&gt;</em> は、0 から 0.95 で、
ラージ・オブジェクト域 (LOA) に割り振られる古い世代の現行スペースの最大パーセンテージを指定します。デフォルトは 0.5、つまり 50% です。
</dd>
<dt class="bold"><a id="xoptions__xlp" name="xoptions__xlp"></a><strong>-Xlp</strong></dt>
<dd>大規模ページで Java ヒープを割り振るよう JVM に要求します。大規模ページが使用可能でない場合、JVM は始動せず、「<tt class="xph">GC: システム構成がオプションをサポートしません --&gt; '-Xlp'</tt>
(<tt class="xph">GC: system configuration does not support option --&gt; '-Xlp'</tt>)」というエラー・メッセージが表示されます。JVM は shmget() を使用して、ヒープに大規模ページを割り振ります。
大規模ページは、Linux カーネル v2.6 以上、
またはそれより前で大規模ページ・サポートがディストリビューションによってバックポートされているカーネルを稼働するシステムによってサポートされます。デフォルトでは、大規模ページは使用されません。<a href="#alloc_large_page">大規模ページのメモリー割り振りの構成</a>を参照してください。
</dd>
<dt class="bold"><strong>-Xmaxe</strong><em>&lt;size&gt;</em></dt>
<dd>ガーベッジ・コレクターがヒープを拡張する差分の最大量を設定します。
通常、ガーベッジ・コレクターは、フリー・スペースの量が 30 % (または <strong>-Xminf</strong> で指定された量) を切ったときに、フリー・スペースを 30 % に戻すのに必要な量の分、ヒープを拡張します。
<strong>-Xmaxe</strong> オプションは、その拡張を指定値に制限します。
例えば、<tt class="xph">-Xmaxe10M</tt> では拡張が 10 MB に制限されます。デフォルトでは、最大の拡張サイズはありません。
</dd>
<dt class="bold"><strong>-Xmaxf</strong><em>&lt;percentage&gt;</em></dt>
<dd>ガーベッジ・コレクション後にフリーである必要があるヒープの最大パーセンテージを指定します。
フリー・スペースがこの量を超えると、JVM がヒープの縮小を試行します。
デフォルト値は 0.6 (60 %) です。
</dd>
<dt class="bold"><strong>-Xmca</strong><em>&lt;size&gt;</em></dt>
<dd>RAM 部分のロードされたクラスを保管するために割り振られるメモリーに対する、拡張の差分を設定します。
RAM 内のクラスの保管にさらにメモリーが必要になるたびに、
割り振りメモリーがこの量の分、増加されます。デフォルトでは、拡張の差分は 32 KB です。<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmco</strong><em>&lt;size&gt;</em></dt>
<dd>ROM 部分のロードされたクラスを保管するために割り振られるメモリーに対する、拡張の差分を設定します。
ROM 内のクラスの保管にさらにメモリーが必要になるたびに、
割り振りメモリーがこの量の分、増加されます。デフォルトでは、拡張の差分は 128 KB です。<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmine</strong><em>&lt;size&gt;</em></dt>
<dd>ガーベッジ・コレクターがヒープを拡張する差分の最小量を設定します。
通常、ガーベッジ・コレクターは、フリー・スペースを 30 %
(または <strong>-Xminf</strong> で指定された量) に戻すのに必要な量の分、ヒープを拡張します。
<strong>-Xmine</strong> オプションは、拡張を少なくとも指定された値に設定します。
例えば、<tt class="xph">-Xmine50M</tt> では、拡張サイズが最小で 50 MB に設定されます。デフォルトでは、最小の拡張サイズは 1 MB です。
</dd>
<dt class="bold"><strong>-Xminf</strong><em>&lt;percentage&gt;</em></dt>
<dd>ガーベッジ・コレクション後にフリーである必要があるヒープの最小パーセンテージを指定します。
フリー・スペースがこの量を切ると、JVM がヒープの拡張を試行します。
デフォルトでは、最小値は 0.3 (30%) です。
</dd>
<dt class="bold"><strong>-Xmn</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、
新しい世代のヒープの初期および最大サイズを、指定された値に設定します。
<strong>-Xmn</strong> を設定する操作は、<strong>-Xmns</strong> および <strong>-Xmnx</strong> を設定する操作と同等です。<span><strong>-Xmns</strong> または <strong>-Xmnx</strong> を設定した場合、<strong>-Xmn</strong> は設定できません。<strong>-Xmns</strong> または <strong>-Xmnx</strong> とともに
<strong>-Xmn</strong> を設定しようとすると、VM が始動せず、エラーが戻ります。</span>
デフォルトでは、<strong>-Xmn</strong> はシステムの能力に従って内部的に選択されます。
<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmns</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、新しい世代のヒープの初期サイズを、指定された値に設定します。
デフォルトでは、このオプションはシステムの能力に従って内部的に選択されます。
<span>このオプションを <strong>-Xmn</strong> と共に使用しようとすると、エラーが戻ります。</span><a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmnx</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、新しい世代のヒープの最大サイズを、指定された値に設定します。
デフォルトでは、このオプションはシステムの能力に従って内部的に選択されます。
<span>このオプションを <strong>-Xmn</strong> と共に使用しようとすると、エラーが戻ります。</span><a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><a id="xoptions__xmo" name="xoptions__xmo"></a><strong>-Xmo</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、
古い世代のヒープの初期および最大サイズを、指定された値に設定します。
<strong>-Xmos</strong> と <strong>-Xmox</strong> の両方を設定することと同等です。
<span><strong>-Xmos</strong> または <strong>-Xmox</strong> を設定した場合、<strong>-Xmo</strong> は設定できません。<strong>-Xmos</strong> または <strong>-Xmox</strong> とともに
<strong>-Xmo</strong> を設定しようとすると、VM が始動せず、エラーが戻ります。</span>
デフォルトでは、<strong>-Xmo</strong> はシステムの能力に従って内部的に選択されます。
<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmoi</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、Java ヒープの増分量を設定します。
ゼロに設定されると、拡張はできません。
デフォルトでは、増分サイズは、拡張サイズ <strong>-Xmine</strong> および <strong>-Xminf</strong>
を基に計算されます。
</dd>
<dt class="bold"><strong>-Xmos</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、古い世代のヒープの初期サイズを、指定された値に設定します。
デフォルトでは、このオプションはシステムの能力に従って内部的に選択されます。
<span>このオプションを <strong>-Xmo</strong> と共に使用しようとすると、エラーが戻ります。</span><a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmox</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、古い世代のヒープの最大サイズを、指定された値に設定します。
デフォルトでは、このオプションはシステムの能力に従って内部的に選択されます。
<span>このオプションを <strong>-Xmo</strong> と共に使用しようとすると、エラーが戻ります。</span><a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmr</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xgcpolicy:gencon</strong> の使用時に、ガーベッジ・コレクションの「remembered set」のサイズを設定します。
これは、新しい世代のヒープ内のオブジェクトへの参照を持つ、
古い世代のヒープ内のオブジェクトのリストです。
デフォルトでは、このオプションは 16 K バイトに設定されます。<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmrx</strong><em>&lt;size&gt;</em></dt>
<dd>記憶されている最大サイズ設定を設定します。
</dd>
<dt class="bold"><a id="xoptions__xms" name="xoptions__xms"></a><strong>-Xms</strong><em>&lt;size&gt;</em></dt>
<dd>初期の Java ヒープ・サイズを設定します。
<a href="#xoptions__xmo"><strong>-Xmo</strong></a> も使用できます。デフォルトは、システムの能力に従って内部的に設定されます。
<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmso</strong><em>&lt;size&gt;</em></dt>
<dd>fork された Java スレッドの C スタック・サイズを設定します。デフォルトでは、このオプションは、32 ビット・プラットフォームでは 32 KB、
64 ビット・プラットフォームでは 256 KB に設定されます。<a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xmx</strong><em>&lt;size&gt;</em></dt>
<dd>最大 Java ヒープ・サイズを設定します。デフォルトでは、このオプションはシステムの能力に従って内部的に設定されます。 <a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><a id="xoptions__noclassgc" name="xoptions__noclassgc"></a><strong>-Xnoclassgc</strong></dt>
<dd>クラス・ガーベッジ・コレクションを使用不可にします。このオプションは、JVM で使用されていない Java クラスに関連するストレージのガーベッジ・コレクションをオフに切り替えます。<a href="#xoptions__classgc"><strong>-Xclassgc</strong></a> も参照してください。
デフォルトでは、クラス・ガーベッジ・コレクションが実行されます。
</dd>
<dt class="bold"><a id="xoptions__nocompactexplicitgc" name="xoptions__nocompactexplicitgc"></a><strong>-Xnocompactexplicitgc</strong></dt>
<dd><tt class="xph">System.gc()</tt> の呼び出しで圧縮を使用不可にします。
<a href="#xoptions__compactexplicitgc"><strong>-Xcompactexplicitgc</strong></a> も参照してください。
デフォルトでは、<tt class="xph">System.gc()</tt> の呼び出しで圧縮は使用可能です。
</dd>
<dt class="bold"><a id="xoptions__nocompactgc" name="xoptions__nocompactgc"></a><strong>-Xnocompactgc</strong></dt>
<dd>ガーベッジ・コレクターの圧縮を使用不可にします。
<a href="#xoptions__compactgc"><strong>-Xcompactgc</strong></a> も参照してください。
デフォルトでは、圧縮は使用可能です。
</dd>
<dt class="bold"><a id="xoptions__xnojit" name="xoptions__xnojit"></a><strong>-Xnojit</strong></dt>
<dd>JIT コンパイラーを使用不可にします。<a href="#xoptions__xjit"><strong>-Xjit</strong></a> も参照してください。
デフォルトでは、JIT コンパイラーは使用可能です。
</dd>
<dt class="bold"><a id="xoptions__xnolinenumbers" name="xoptions__xnolinenumbers"></a><strong>-Xnolinenumbers</strong></dt>
<dd>デバッグの行番号を使用不可にします。
<a href="#xoptions__xlinenumbers"><strong>-Xlinenumbers</strong></a> も参照してください。
デフォルトでは、行番号はオンです。
</dd>
<dt class="bold"><a id="xoptions__noloa" name="xoptions__noloa"></a><strong>-Xnoloa</strong></dt>
<dd>ラージ・オブジェクト域 (LOA) の割り振りを抑制します。すべてのオブジェクトが SOA に割り振られます。
デフォルトでは、LOA が使用可能でないサブプールを除いて、すべての GC ポリシーに LOA が使用可能です。
<a href="#xoptions__loa"><strong>-Xloa</strong></a> も参照してください。
</dd>
<dt class="bold"><a id="xoptions__nopartialcompactgc" name="xoptions__nopartialcompactgc"></a><strong>-Xnopartialcompactgc</strong></dt>
<dd>増分圧縮を使用不可にします。
<a href="#xoptions__partialcompactgc"><strong>-Xpartialcompactgc</strong></a> も参照してください。
</dd>
<dt class="bold"><a id="xoptions__nosigcatch" name="xoptions__nosigcatch"></a><strong>-Xnosigcatch</strong></dt>
<dd>JVM シグナル処理コードを使用不可にします。
<a href="#xoptions__sigcatch"><strong>-Xsigcatch</strong></a> も参照してください。
デフォルトでは、シグナル処理は使用可能です。
</dd>
<dt class="bold"><a id="xoptions__nosigchain" name="xoptions__nosigchain"></a><strong>-Xnosigchain</strong></dt>
<dd>シグナル・ハンドラーのチェーニングを使用不可にします。
<a href="#xoptions__sigchain"><strong>-Xsigchain</strong></a> も参照してください。
デフォルトでは、シグナル・ハンドラーのチェーニングは使用可能です。
</dd>
<dt class="bold"><strong>-Xoptionsfile</strong>=<em>&lt;file&gt;</em></dt>
<dd>JVM オプションと定義が入ったファイルを指定します。デフォルトでは、オプション・ファイルは使用されません。
</dd>
<dt class="bold"><strong>-Xoss</strong><em>&lt;size&gt;</em></dt>
<dd>スレッドの Java スタック・サイズおよび C スタック・サイズを設定します。このオプションは互換性のために用意されているもので、指定された値に<strong>-Xss</strong> と <strong>-Xmso</strong> の両方を設定することに相当します。
</dd>
<dt class="bold"><a id="xoptions__partialcompactgc" name="xoptions__partialcompactgc"></a><strong>-Xpartialcompactgc</strong></dt>
<dd>部分圧縮を使用可能にします。
デフォルトでは、このオプションは設定されず、すべての圧縮が全体的です。
<a href="#xoptions__nopartialcompactgc"><strong>-Xnopartialcompactgc</strong></a> も参照してください。
</dd>
<dt class="bold"><strong>-Xquickstart</strong></dt>
<dd>JIT コンパイルおよび最適化を遅延することによって、起動時間を改善します。デフォルトでは、クイック・スタートが使用不可で、JIT コンパイルの遅延はありません。
</dd>
<dt class="bold"><strong>-Xrdbginfo</strong>:<em>&lt;host&gt;</em>:<em>&lt;port&gt;</em></dt>
<dd>オプションをリモート・デバッグ情報サーバーにロードして渡します。
デフォルトでは、リモート・デバッグ情報サーバーは使用不可です。
</dd>
<dt class="bold"><strong>-Xrs</strong></dt>
<dd>オペレーティング・システムのシグナルの使用を減らします。デフォルトでは、
VM はオペレーティング・システムのシグナルをすべて使用します。<a href="#sighand">JVM が使用するシグナル</a>を参照してください。
</dd>
<dt class="bold"><strong>-Xrun</strong><em>&lt;library name&gt;</em>[:<em>&lt;options&gt;</em>]</dt>
<dd>ヘルパー・ライブラリーをロードします。複数のライブラリーをロードするには、コマンド行で 2 回以上指定してください。これらのライブラリーの例は次のとおりです。


<dl class="parml">
<dt class="bold"><strong>-Xrunhprof</strong>[:help] | [:<em>&lt;option&gt;</em>=<em>&lt;value&gt;</em>,
...]</dt>
<dd>ヒープ、CPU、またはモニターのプロファイル作成を実行します。詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。
</dd>
<dt class="bold"><a id="xoptions__runjdwp" name="xoptions__runjdwp"></a><strong>-Xrunjdwp</strong>[:help] | [:&lt;<em>option</em>&gt;=&lt; <em>value</em>&gt;,
...]</dt>
<dd>アプリケーションのリモート・デバッグをサポートするデバッグ・ライブラリーをロードします。
詳しくは、『<a href="#xoptions__xdbg"><strong>-Xdbg</strong></a>』を参照してください。
</dd>
<dt class="bold"><a name="xoptions__xrunjnichk"></a><strong id="xoptions__xrunjnichk">-Xrunjnichk</strong>[:help] | [:&lt;<em>option</em>&gt;=&lt;<em>value</em>&gt;,
...]</dt>
<dd>推奨されません。<strong>-Xcheck:jni</strong> を使用してください。
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xscmx</strong><em>&lt;size&gt;</em></dt>
<dd><strong>-Xscmx</strong> の詳細については、<a href="#sharedclassesxoptions">クラス・データ共用の使用可能化と構成</a>を参照してください。
</dd>
<dt class="bold"><strong>-Xshareclasses</strong>:<em>&lt;options&gt;</em></dt>
<dd><strong>-Xshareclasses</strong> オプションの詳細については、
<a href="#sharedclassesxoptions">クラス・データ共用の使用可能化と構成</a>を参照してください。
</dd>
<dt class="bold"><a id="xoptions__sigcatch" name="xoptions__sigcatch"></a><strong>-Xsigcatch</strong></dt>
<dd>VM シグナル処理コードを使用可能にします。
<a href="#xoptions__nosigcatch"><strong>-Xnosigcatch</strong></a> も参照してください。
デフォルトでは、シグナル処理は使用可能です。
</dd>
<dt class="bold"><a id="xoptions__sigchain" name="xoptions__sigchain"></a><strong>-Xsigchain</strong></dt>
<dd> シグナル・ハンドラーのチェーニングを使用可能にします。
<a href="#xoptions__nosigchain"><strong>-Xnosigchain</strong></a> も参照してください。
デフォルトでは、シグナル・ハンドラーのチェーニングは使用可能です。
</dd>
<dt class="bold"><strong>-Xsoftrefthreshold</strong><em>&lt;number&gt;</em></dt>
<dd>対象がマークされていない場合に、ソフト参照がクリアされるまでの
GC の回数を設定します。デフォルトは 3 です。これは、対象がマークされていない 3 番目の GC で、
ソフト参照がクリアされることを意味します。
</dd>
<dt class="bold"><strong>-Xss</strong><em>&lt;size&gt;</em></dt>
<dd>スレッドの最大 Java スタック・サイズを設定します。 デフォルトでは、このオプションは 256 KB に設定されます。 <a href="#standard_options__verbose"><strong>-verbose:sizes</strong></a> オプションを使用して、VM が使用している値を出力します。
</dd>
<dt class="bold"><strong>-Xthr</strong>:<em>&lt;options&gt;</em></dt>
<dd>スレッド化オプションを設定します。
</dd>
<dt class="bold"><a id="xoptions__xverbosegclog" name="xoptions__xverbosegclog"></a><strong>-Xverbosegclog</strong>:<em>&lt;path to file&gt;</em>[<em>X</em>,<em>Y</em>]</dt>
<dd>
<p>指定されたファイルに詳細ガーベッジ・コレクション (GC) 出力を書き出します。ファイルがすでに存在していると、上書きされます。それ以外の場合で、既存ファイルを開けないか、新しいファイルを作成できない場合は、出力は stderr にリダイレクトされます。引数 X および Y (両方とも整数) を指定すると、
詳細 GC 出力は X 個のファイルにリダイレクトされ、各ファイルには Y 個の gc サイクルの詳細 GC 出力が含まれます。これらのファイルは、<em>filename1、filename2</em>、... という形式になります。デフォルトでは、詳細 GC ロギングは行われません。</p>

<p>詳細 GC 出力について詳しくは、「<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> (英語)」を参照してください。</p>
</dd>
<dt class="bold"><strong>-Xverify</strong></dt>
<dd>ロードされたすべてのクラスに対して厳密なクラス検査を使用可能にします。
デフォルトでは、厳密なクラス検査は使用不可です。
</dd>
<dt class="bold"><strong>-Xverify:none</strong></dt>
<dd>厳密なクラス検査を使用不可にします。
デフォルトでは、厳密なクラス検査は使用不可です。
</dd>
</dl>
<a name="limitations"></a>
<h1 id="limitations"><a href="#ToC_135">付録B. 既知の制限</a></h1>
<div>
<p>SDK および Runtime Environment for Linux の既知の制限。</p></div>
<p>
<p>問題の診断方法について詳しくは、「<cite>Diagnostics Guide</cite> (英語)」(<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) を参照してください。</p></p>
<p>
<a name="wq153"></a>
<h2 id="wq153">AMD64 SMP システムにおける BIOS 設定</h2>
<p>「<strong>ノード・メモリー・インターリービング (Node memory interleaving)</strong>」の
BIOS 設定は「<tt class="xph">使用不可 (DISABLED)</tt>」に設定してください。
そうでないと、Java のクラッシュやハングを含む、予測不能な結果が発生する可能性があります。この指示は、AMD の推奨と一致しています。</p></p>
<p>
<a name="wq154"></a>
<h2 id="wq154">JConsole モニター・ツールの「ローカル (Local)」タブ</h2>
<p>IBM の JConsole ツールでは、同じシステム上の他の仮想マシンに接続できるようにするための<strong>「ローカル (Local)」</strong>タブを使用できません。
また、対応するコマンド行である <strong>pid</strong> オプションもサポートされていません。代わりに、JConsole の<strong>「リモート (Remote)」</strong>タブを使用して、モニター対象の仮想マシンに接続してください。あるいは、<strong>connection</strong> コマンド行オプションを使用して、ホスト <tt class="xph">localhost</tt> とポート番号を指定します。モニターするアプリケーションを起動するときに、次のコマンド行オプションを設定します。
</p>
<dl class="parml">
<dt class="bold"><strong>-Dcom.sun.management.jmxremote.port</strong>=<em>&lt;value&gt;</em></dt>
<dd>管理エージェントが listen するポートを指定します。
</dd>
<dt class="bold"><strong>-Dcom.sun.management.jmxremote.authenticate=false</strong></dt>
<dd>ユーザー名ファイルが作成されていない限り、認証を使用不可に設定します。
</dd>
<dt class="bold"><strong>-Dcom.sun.management.jmxremote.ssl=false</strong></dt>
<dd>SSL 暗号化を使用不可に設定します。
</dd>
</dl></p>
<p>
<a name="wq155"></a>
<h2 id="wq155">Rhino Javascript エンジンの使用不可</h2>
<p>Mozilla Rhino Javascript エンジンは、ライセンス交付の問題があるため、IBM SDK for Java には組み込まれていません。IBM SDK for Java で Rhino Javascript エンジンを使用するには、<a href="https://scripting.dev.java.net/" target="_blank">https://scripting.dev.java.net/</a> から jsr223 スクリプト・エンジンをダウンロードし、Mozilla Web サイト (<a href="http://www.mozilla.org/rhino/" target="_blank">http://www.mozilla.org/rhino/</a>) から Rhino Javascript エンジンをダウンロードしてください。</p></p>
<p>
<a name="wq156"></a>
<h2 id="wq156">DSA 鍵ペアの生成に時間がかかる</h2>
<p>一般的でない長さの DSA 鍵ペアの作成は、低速なマシンでは非常に長い時間を要します。 十分な時間が経過すれば完了するので、遅れてもハングしたと解釈しないでください。DSA 鍵生成アルゴリズムは、標準の鍵の長さ (例えば、512、1024) を他より迅速に生成するよう、最適化されています。</p></p>
<p>
<a name="wq157"></a>
<h2 id="wq157">JNI を使用した JVM の作成</h2>
<p>ネイティブ・プログラムでは、JNI_VERSION_1_1(0x00010001) インターフェースで VM を作成できません。JNI_CreateJavaVM() を呼び出して、JNI_VERSION_1_1(0x00010001) のバージョンを渡すことはできません。渡すことが可能なバージョンは次のとおりです。</p></p>
<ul>
<li>JNI_VERSION_1_2(0x00010002)</li>
<li>JNI_VERSION_1_4(0x00010004)</li></ul>
<p>作成される VM は、存在する Java ライブラリー (つまり、1.2.2、1.3.x、1.4.x、
5.x、6.x) によって決まります。渡される JNI インターフェースのバージョンによって示唆されるライブラリーによってではありません。</p>
<p>インターフェース・バージョンは、ネイティブ・コードで使用可能な関数の種類以外の VM の動作領域に影響を与えることはありません。</p>
<p>
<a name="wq158"></a>
<h2 id="wq158">ウィンドウ・マネージャーとキーボード・ショートカット</h2>
<p>ウィンドウ・マネージャーが、Java キーボード・ショートカットの一部をオーバーライドする場合があります。オーバーライドされた Java キーボード・ショートカットを使用する必要がある場合は、オペレーティング・システムのマニュアルを参照し、ウィンドウ・マネージャーのキーボード・ショートカットを変更してください。</p></p>
<p>
<a name="wq159"></a>
<h2 id="wq159">X Window System のファイル記述子</h2>
<p>X Window System では、255 より上のファイル記述子を使用できません。JVM は開いている jar ファイルのファイル記述子を保持するため、X でファイル記述子を使い果たす可能性があります。回避策として、<strong>JAVA_HIGH_ZIPFDS</strong> 環境変数を設定し、jar ファイル用に大きな数のファイル記述子を使用するよう JVM に指示することができます。</p>
<p><strong>JAVA_HIGH_ZIPFDS</strong> 環境変数を使用するには、0 から 512 の間の値に設定します。設定後 JVM は、1024 までのファイル記述子を使用して、最初の jar ファイルを開きます。例えば、プログラムで 300 個の jar ファイルをロードする場合は、次のように設定します。</p>
<p><tt class="xph">export JAVA_HIGH_ZIPFDS=300</tt></p>
<p>これによって、最初の 300 個の jar ファイルは、ファイル記述子として 724 から 1023 までを使用してロードされます。それ以後に開かれる jar ファイルは、すべて通常範囲で開かれます。</p></p>
<p>
<a name="wq160"></a>
<h2 id="wq160">DBCS および KDE クリップボード</h2>
<p>K Desktop Environment (KDE) を実行している場合は、Linux アプリケーションと Java アプリケーションの間で、システム・クリップボードを使用して 2 バイト文字セット (DBCS) の情報をコピーできない可能性があります。</p></p>
<p>
<a name="wq161"></a>
<h2 id="wq161">LinuxThreads ライブラリーを使用するスレッドでの制限</h2>
<p>SLES9および以降のディストリビューションでは、デフォルトのスレッド化ライブラリーが NPTL になっており、これにより Java スレッドがネイティブ・スレッドとしてインプリメントされます。それ以前のディストリビューションでは、デフォルトのスレッド化ライブラリーが LinuxThreads になっており、この場合はスレッドが新規プロセスとしてインプリメントされます。Java スレッドの数がプロセスの許容最大数を超えると、プログラムがハングする可能性があります。</p>
<p> 使用可能なスレッドの最大数は、次の中の最低値によって決まります。</p></p>
<ul>
<li>/etc/security/limits.conf のユーザー・プロセス設定 (ulimit -u)</li>
<li>/proc/sys/kernel/threads_max で定義される限度</li>
<li>libpthreads.so で定義される限度値 <strong>PTHREAD_THREADS_MAX</strong> (この値を変更するには、glibc を再コンパイルする必要があります)</li></ul>
<p>ただし、スレッドの最大数に達する前に、仮想ストレージを使い果たす可能性があります。</p>
<p>
<a name="wq162"></a>
<h2 id="wq162">ThreadMXBean スレッド・ユーザーの CPU 時間制限</h2>
<p>このプラットフォームでは、ユーザー・モードの CPU 時間とシステム・モードの CPU 時間を区別する方法はありません。ThreadMXBean.getThreadUserTime()、ThreadMXBean.getThreadCpuTime()、ThreadMXBean.getCurrentThreadUserTime()、および ThreadMXBean.getCurrentThreadCpuTime() はすべて、必要なスレッドの合計 CPU 時間を戻します。</p></p>
<p>
<a name="wq163"></a>
<h2 id="wq163">KeyEvents とウィンドウ・マネージャー</h2>
<p><strong>Alt</strong> キーを含む KeyEvent の結果は、Linux のウィンドウ・マネージャーの種類によって異なる場合があります。
また、他のオペレーティング・システムの結果とも異なります。デフォルト設定を使用する場合、KWin ウィンドウ・マネージャーでは <strong>Ctrl+Alt+A</strong> によって KeyEvent が生成されるのに対し、Metacity ウィンドウ・マネージャーでは <strong>Ctrl+Alt+A</strong> はキー・イベントを生成しません。</p></p>
<p>
<a name="wq164"></a>
<h2 id="wq164">X Window System と Meta キー</h2>
<p>Linux X Window System では、 keymap が 64 0xffe9 (Alt_L) 0xffe7 (Meta_L) および 113 0xffea (Alt_R) 0xffe8 (Meta_R) に設定されます。この設定は、シェル・プロンプトで次のように入力することによって確認できます。</p></p>
<pre class="xmp">xmodmap -pk  </pre>
<p>そのため SDK は、Meta および Alt キーが同時に押されたとみなします。回避策として、シェル・プロンプトで次のように入力することにより、Meta_x マッピングを除去できます。</p>
<pre class="xmp">xmodmap -e "keysym Alt_L = Alt_L" -e "keysym Alt_R = Alt_R"  </pre>
<p>この回避策を行うと、同じディスプレイ上で実行している他の X-Windows アプリケーションが除去された Meta キーを使用している場合には、それらのアプリケーションに影響を与える可能性があります。</p>
<p>
<a name="wq165"></a>
<h2 id="wq165">JNI を使用して JVM を作成する場合の SIGSEGV</h2>
<p>JNI アプリケーションからの JNI_CreateJavaVM() の呼び出しが原因で、セグメンテーション障害 (シグナル SIGSEGV) が起きる場合があります。この障害を回避するために、
オプション <strong>-lpthread</strong> を指定して JNI プログラムを再ビルドしてください。</p></p>
<p>
<a name="wq166"></a>
<h2 id="wq166">高スレッド化アプリケーションでのリソースの不足</h2>
<p>並行スレッドを数多く実行していると、次の警告メッセージが表示される場合があります。</p></p>
<pre class="xmp">java.lang.OutOfMemoryError</pre>
<p>これは、マシンのシステム・リソースが不足していることを示します。メッセージは、次の理由によって生成される可能性があります。</p>
<ul>
<li>作成されたプロセスの数がユーザー制限値を超えた (Linux インストールで、NPTL ではなく LinuxThreads を使用する場合)。</li>
<li>新規スレッドを作成するために使用可能なシステム・リソースが不足している。この場合は、実行されているアプリケーションに応じて、別の Java 例外も生成される可能性があります。</li>
<li>カーネル・メモリーが不足しているか、フラグメント化されている。
<br />
/var/log/messages で、kill されたプロセス ID を持つ、対応するメモリー不足カーネル・メッセージを確認できます。</li></ul>
<p>対応するシステム・リソースが増加するように、システムの調整を試みてください。</p>
<p>
<a name="wq167"></a>
<h2 id="wq167">X サーバーと X クライアントのフォント問題</h2>
<p>Linux マシンで Java AWT または Swing アプリケーションを実行し、別のマシンに表示をエクスポートするときに、X クライアント・マシンにロードされているフォント・セットと X サーバー・マシンにロードされているフォント・セットが異なっていると、ダイアログを表示するときに問題が発生します。この問題を回避するには、両方のマシンに同じフォントをインストールします。</p></p>
<p>
<a name="wq168"></a>
<h2 id="wq168">UTF-8 エンコード方式と MalformedInputExceptions</h2>
<p>ご使用のシステム・ロケールで UTF-8 エンコード方式を使用している場合は、一部の SDK ツールによって sun.io.MalformedInputException がスローされる可能性があります。
システムで UTF-8 エンコード方式が使用されているかどうかを確認するには、<strong>LANG</strong> や <strong>LC_ALL</strong> などのロケール固有の環境変数を調べ、サフィックスが 『.UTF-8』 になっているかどうかを見ます。この sun.io.MalformedInputException を受け取った場合は、7 ビット ASCII 範囲 (0x00 から 0x7f) に入っておらず、Java Unicode 文字リテラルとして表現されていない文字を、Java Unicode 文字リテラル (例えば、「&yen;u0080」) に変更します。この問題の回避策として、ロケール固有の環境変数から 「.UTF-8」サフィックスを除去することができます。例えば、マシンのデフォルト・ロケールが「en_US.UTF-8」の場合は、<strong>LANG</strong> を「en_US」に設定します。</p></p>
<p>
<a name="wq169"></a>
<h2 id="wq169">表示をエクスポートするときの AMI 問題と xcin 問題</h2>
<p>クロスプラットフォーム環境で AMI と xcin を使用する場合 (例えば、32 ビットと 64 ビットのシステムの間や、ビッグ・エンディアンとリトル・エンディアンのシステムの間で表示をエクスポートする場合) は、問題が発生する場合があります。この種の問題が発生した場合は、AMI と xcin の最新バージョンにアップグレードしてください。</p></p>
<p>
<a name="wq170"></a>
<h2 id="wq170">RHEL4 と XIM</h2>
<p><strong>中国語、韓国語、および日本語の RHEL4 ユーザーの場合のみ</strong></p>
<p>デフォルトでは XIM サーバーがインストールされません。DBCS 文字を Java アプリケーションに入力するには、iiimf-x や kinput2 などの XIM サーバー・パッケージをインストールしてください。</p></p>
<p>
<a name="wq171"></a>
<h2 id="wq171">RHEL4 と IIIMF</h2>
<p><strong>中国語、韓国語、および日本語の RHEL4 ユーザーの場合のみ</strong></p>
<p>Internet/Intranet Input Method Framework (IIIMF) を使用する場合は、Red Hat Enterprise Linux 4 Update 2 以降に付属する IIIMF パッケージを使用してください。<a href="http://www.redhat.com" target="_blank">http://www.redhat.com</a> にアクセスし、Red Hat にお問い合わせください。</p>
<p><strong>(zSeries 64 ビットのみ)</strong> IIIMF で障害が発生したり、始動できなかったりする場合があります。この問題を解決するには、最新の IIIMF パッケージにアップグレードしてください。</p>
<p><strong>(PPC、s390、または s390x の中国語 (繁体字) のみ)</strong> IIIMF が機能しない場合があります。この問題を解決するには、iiimf-le-xcin-0.1.7-13.EL4 以降を使用してください。</p>
<p><strong>(PPC、s390、または s390x の中国語 (簡体字) のみ)</strong> IIIMF が正しく機能しない場合があります。この問題を解決するには、RHEL4 Update 5 以降に含まれる IIMF パッケージを使用してください。</p></p>
<p>
<a name="wq172"></a>
<h2 id="wq172">RHEL4 と zh_CN.GB18030 ロケール</h2>
<p><strong>中国語 (簡体字) の RHEL4 ユーザーの場合のみ</strong></p>
<p>zh_CN.GB18030 ロケールは、RHEL4 の xlib によってサポートされていません。xterm を使用しても、Input Method Server をアクティブ化して GB18030 文字を入力することはできません。代わりに、zh_CN.UTF8 ロケールを使用してください。GB2312、GBK、または GB18030 でエンコードされたレガシー・プログラムやデータを使用しており、RHEL4 にマイグレーションする場合は、zh_CN.UTF8 ロケールが設定されている RHEL4 でアプリケーションが正常に実行され、データが正しく表示されるようにするため、iconv によってそれらのデータを前処理して UTF-8 エンコード方式に変換する必要があります。</p>
<p>この制限は、RHEL4 U3 では解決されています。</p></p>
<p>
<a name="wq173"></a>
<h2 id="wq173">RHEL4 と xcin</h2>
<p>RHEL4 で xcin がハングする場合があります。この問題を解決するには、/etc/chinese/xcin/xcinrc ファイルで <strong>ICCHECK_DISABLE</strong> を「はい」に設定します。</p>
<p><strong>64 ビット環境のみ</strong></p>
<p>xcin (中国語 (繁体字) XIM サーバー) を使用する RHEL4 では、64 ビット環境 (AMD64 や zSeries 64 ビット・プラットフォームなど) で動作する Java でのセグメンテーション障害など、予期しない振る舞いが生じる場合があります。この問題を解決するには、最新の xcin パッケージにアップグレードしてください。</p></p>
<p>
<a name="wq174"></a>
<h2 id="wq174">RHEL4 と IIIMF のフォーカス変更問題</h2>
<p><strong>RHEL4 のみ</strong></p>
<p>IIMF (Internet Intranet Input Method Framework) を使用して DBCS 文字を入力するときに、フォーカス変更問題が生じる可能性があります。この問題は、アクティブな入力コンポーネントを最小化するときに発生します。
コンポーネントを復元すると、入力方式が SBCS に切り替わります。
DBCS は、その後手動でもう一度アクティブ化する必要があります。</p>
<p>次のコンポーネントの場合に、このフォーカス変更問題が発生します。
</p>
<ul>
<li>java.awt.Canvas</li>
<li>java.awt.Button</li>
<li>javax.swing.JButton</li>
<li>javax.swing.JSplitPane</li>
<li>javax.swing.JComboBox</li>
<li>javax.swing.JList</li></ul></p>
<p>
<a name="wq175"></a>
<h2 id="wq175">XIM と Java Plug-in</h2>
<p><strong>RHEL4、および SLES9 のみ</strong></p>
<p>日本語、中国語、および韓国語のユーザーの場合は、Web ブラウザーの Java アプレットのテキスト・コンポーネントに、XIM を使用して各言語の文字を入力することができません。この制限は、XEmbed が X11 ライブラリー・ファイルへの修正を必要とすることに起因します。この状況を回避するには、<strong>-Dsun.awt.noxembed=true</strong> システム・パラメーターを指定して XEmbed を無効にします。このオプションは、コントロール・パネルを使用して設定できます。
</p>
<ol type="1">
<li>Java Plug-in コントロール・パネルを開き、<strong>「Java」</strong>タブに移動します。</li>
<li>「Java アプレットのランタイム設定」で、<strong>「表示」</strong>ボタンをクリックします。</li>
<li>「Java Runtime パラメーター」に <strong>-Dsun.awt.noxembed=true</strong> と入力し、<strong>「OK」</strong>をクリックします。</li>
<li><strong>「適用」</strong>をクリックします。</li>
<li>ブラウザーを起動します。</li></ol>
<p>この制限は、RHEL4 U3 および SLES9 SP3 では解決されています。</p></p>
<p>
<a name="wq177"></a>
<h2 id="wq177">アラビア文字と Matrox ビデオ・カード</h2>
<p><strong>Intel 32 ビット・プラットフォームのみ</strong></p>
<p>アラビア語テキストのユーザーが、Matrox ビデオ・カードが搭載された、アクセラレーションが有効な Linux を使用すると、drawString を使用して大きなフォントを表示するときに文字がゆがむ可能性があります。この問題は、それらのカードのドライバーに起因します。回避策としては、デバイスのアクセラレーション機能を無効にすることを提案します。</p></p>
<p>
<a name="wq178"></a>
<h2 id="wq178">SLES9 NPTL とパラレル・ポート・ドライバー</h2>
<p><strong>Intel 32 ビット・プラットフォームのみ</strong></p>
<p>SLES 9 NPTL では、パラレル・ポート・ドライバーによってカーネルがクラッシュし、Java スレッドが動作を停止します。JVM は、ガーベッジ・コレクションのためスレッドを中断しようとするときにこのクラッシュを検出し、次いでコア・ファイルとメッセージ「JVMLH030: threads are disappearing when trying to suspend all threads」を生成してクラッシュします。</p>
<p>SUSE Bugzilla レポート 47947 が、この問題に対して報告されています。このバグは、SLES 9 Service Pack 1 では修正されています。</p></p>
<p>
<a name="wq179"></a>
<h2 id="wq179">PPC プラットフォームでのパラメーターが 8 個を超える JNI 呼び出し</h2>
<p><strong>PPC プラットフォームのみ</strong></p>
<p>Java コードで JNI 呼び出しが使用されていて、いずれかの呼び出しに浮動小数点または倍精度パラメーターが 8 個より多くある場合は、C コードを GNU C Compiler (GCC) の gcc-2.95.3 Free Software Foundation (FSF) レベルでコンパイルする必要があります。</p></p>
<p>
<a name="wq180"></a>
<h2 id="wq180">SP2 より前の SLES9 でのパラレル・ポート・オペレーション</h2>
<p><strong>PPC プラットフォームのみ</strong></p>
<p>JavaComm パッケージでは、SLES 9 GA および SP1 カーネルでのパラレル・ポート・オペレーションをサポートできません。この制限は、SP2 カーネルでは解決されています。SUSE Bugzilla 番号は 50028 です。</p></p>
<p>
<a name="wq181"></a>
<h2 id="wq181">PPC 64 ビット・プラットフォームでの libFileStat.so のコンパイル</h2>
<p><strong>PPC 64 ビット・プラットフォームのみ</strong></p>
<p>デフォルトの gcc クロス・コンパイラー (バージョン 3.2-49) では、いくつかのエラーが発生します。共用ライブラリー libFileStat.so を生成するには、次のコマンドを実行します。</p></p>
<pre class="xmp">/opt/cross/bin/powerpc64-linux-gcc -shared -o libFileStat.so -I<em>&lt;SDK_PATH&gt;</em>/include FileStat.c</pre>
<p> ここで、<em>&lt;SDK_PATH&gt;</em> はインストールされている SDK ディレクトリーへのパスです。</p>
<p>
<a name="wq182"></a>
<h2 id="wq182">zSeries プラットフォームでの IPv6</h2>
<p><strong>zSeries プラットフォームのみ</strong></p>
<p>現行ディストリビューションの Linux カーネルは Internet Protocol バージョン 6 (IPv6) をサポートしますが、IPv6 を使用すると問題が発生する場合があります。Java による IPv6 のサポートはこのリリースに組み込まれていますが、java コマンドで <strong>-Djava.net.preferIPv4Stack=true</strong> オプションを指定し、このサポートをオフにすることをお勧めします。IPv6 に完全対応したカーネルをインストールする場合は、このオプションは不要です。</p></p>
<p>
<a name="wq183"></a>
<h2 id="wq183">64 ビット zSeries プラットフォームでの xcin</h2>
<p><strong>zSeries 64 ビット・プラットフォームのみ</strong></p>
<p>中国語および台湾語の入力方式サーバー (xcin) はテストされていません。</p></p>
<p>
<a name="wq184"></a>
<h2 id="wq184">Java Desktop
API</h2>
<p>1 つ以上の GNOME ライブラリーが使用できないため、Java Desktop API が機能しない場合があります。</p></p>
<p>
<a name="wq185"></a>
<h2 id="wq185">GTK Look and Feel と NullPointerException</h2>
<p><strong>DBCS 環境のみ</strong></p>
<p>ご使用のアプリケーションで GTK Look and Feel を使用していて NullPointerException の障害が発生する場合、<strong>GNOME_DESKTOP_SESSION_ID</strong> 環境変数を設定解除してください。</p></p>
<p>
<a name="wq186"></a>
<h2 id="wq186">Unicode Shift_JIS コード・ページ別名</h2>
<p><strong>日本語ユーザーのみ</strong></p>
<p>Shift_JIS の Unicode コード・ページ別名「&yen;u30b7&yen;u30d5&yen;u30c8&yen;u7b26&yen;u53f7&yen;u5316&yen;u8868&yen;u73fe」は削除されています。アプリケーションでこのコード・ページを使用する場合は、Shift_JIS で置き換えてください。</p></p>
<a name="notices"></a>
<h1 id="notices"><a href="#ToC_169">特記事項</a></h1>
<div>
<p>本書は米国 IBM が提供する製品およびサービスについて作成したものです。
本書に記載の製品、サービス、または機能が日本においては提供されていない場合があります。日本で利用可能な製品、サービス、および機能については、日本 IBM の営業担当員にお尋ねください。</p></div>
<p>本書で IBM 製品、プログラム、またはサービスに言及していても、その IBM 製品、プログラム、または
サービスのみが使用可能であることを意味するものではありません。これらに代えて、IBM の知的所有権を侵害することのない、機能的に同等の
製品、プログラム、またはサービスを使用することができます。
ただし、IBM 以外の製品とプログラムの操作またはサービスの
評価および検証は、お客様の責任で行っていただきます。</p>
<p>IBM は、本書に記載されている内容に関して特許権 (特許出願中のものを含む)を保有している場合があります。本書の提供は、お客様にこれらの特許権について
実施権を許諾することを意味するものではありません。
実施権についてのお問い合わせは、書面にて下記宛先にお送りください。</p>
<ul class="simple">
<li>〒106-8711</li>
<li>東京都港区六本木 3-2-12</li>
<li>IBM World Trade Asia Corporation</li>
<li>Intellectual Property Law  &amp; Licensing</li></ul>
<p>以下の保証は、国または地域の法律に沿わない場合は、適用されません。</p>
<p>IBM およびその直接または間接の子会社は、本書を特定物として現存するままの状態で提供し、
商品性の保証、特定目的適合性の保証および法律上の瑕疵担保責任を含むすべての明示もしくは黙示の保証責任を負わないものとします。
国または地域によっては、法律の強行規定により、保証責任の制限が
禁じられる場合、強行規定の制限を受けるものとします。</p>
<p>この情報には、技術的に不適切な記述や誤植を含む場合があります。
本書は定期的に見直され、必要な変更は本書の次版に組み込まれます。
IBM は予告なしに、随時、この文書に記載されている製品またはプログラムに対して、改良または変更を行うことがあります。</p>
<p>本書において IBM 以外の Web サイトに言及している場合がありますが、
便宜のため記載しただけであり、決してそれらの Web サイトを推奨するものでは
ありません。それらの Web サイトにある資料は、この IBM 製品の資料の一部では
ありません。それらの Web サイトは、お客様の責任でご使用ください。</p>
<p>IBM は、お客様が提供するいかなる情報も、お客様に対してなんら義務も負うことのない、
自ら適切と信ずる方法で、使用もしくは配布することができるものとします。</p>
<p>本プログラムのライセンス保持者で、(i) 独自に作成したプログラムと
その他のプログラム（本プログラムを含む）との間での情報交換、
および (ii) 交換された情報の相互利用を可能にすることを目的として、
本プログラムに関する情報を必要とする方は、下記に連絡してください。</p>
<ul class="simple">
<li>JIMMAIL@uk.ibm.com</li>
<li>[Hursley Java Technology Center (JTC) contact]</li></ul>
<p> 本プログラムに関する上記の情報は、適切な使用条件の下で使用すること
ができますが、有償の場合もあります。</p>
<p>本書で説明されているライセンス・プログラムまたはその他のライセンス資料は、IBM 所定のプログラム契約の契約条項、IBM プログラムのご使用条件、またはそれと同等の条項に基づいて、IBM より提供されます。</p>
<p>この文書に含まれるいかなるパフォーマンス・データも、管理環境下で
決定されたものです。
そのため、他の操作環境で得られた結果は、異なる可能性があります。
一部の測定が、開発レベルのシステムで行われた可能性がありますが、
その測定値が、一般に利用可能なシステムのものと同じである保証はありません。
さらに、一部の測定値が、推定値である可能性があります。
実際の結果は、異なる可能性があります。お客様は、お客様の特定の環境に適したデータを確かめる必要があります。</p>
<p>IBM 以外の製品に関する情報は、その製品の供給者、出版物、
もしくはその他の公に利用可能なソースから入手したものです。IBM は、それらの製品のテストは行っておりません。したがって、他社製品に関する実行性、互換性、またはその他の要求については確証できません。IBM 以外の製品の性能に関する質問は、それらの製品の供給者にお願いします。</p>
<a name="trademarks"></a>
<h2 id="trademarks"><a href="#ToC_170">商標</a></h2>
<p>IBM、iSeries、pSeries、および zSeries は、International Business Machines Corporation の米国およびその他の国における商標です。</p>
<p>Intel は、Intel Corporation または子会社の米国およびその他の国における商標または登録商標です。</p>
<p>Java およびすべての Java 関連の商標およびロゴは Sun Microsystems, Inc.の米国およびその他の国における商標です。</p>
<p>Linux は、Linus Torvalds の米国およびその他の国における商標です。</p>
<p>他の会社名、製品名およびサービス名等はそれぞれ各社の商標です。</p>
<a id="Bot_Of_Page" name="Bot_Of_Page"></a>
</body>
</html>
