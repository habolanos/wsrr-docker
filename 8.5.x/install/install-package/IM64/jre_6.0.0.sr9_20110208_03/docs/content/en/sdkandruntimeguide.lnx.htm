<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-us">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="dc.language" scheme="rfc1766" content="en-us" />
<!-- Licensed Materials Property of IBM                      -->
<!-- US Government Users Restricted Rights                   -->
<!-- Use, duplication or disclosure restricted by            -->
<!-- GSA ADP Schedule Contract with IBM Corp.                -->
<meta name="dc.date" scheme="iso8601" content="2010-11-26" />
<meta name="copyright" content="&copy; Copyright IBM Corporation 2003, 2010" />
<meta name="security" content="public" />
<meta name="Robots" content="index,follow"/>
<meta http-equiv="PICS-Label" content='(PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true r (n 0 s 0 v 0 l 0) "http://www.classify.org/safesurf/" l gen true r (SS~~000 1))' />
<meta name="type" content="concept, reference, reference, task, task, task, task, reference, task, task, task, task, task, task, task, task, task, reference, task, task, reference, task, task, task, reference, task, reference, task, reference, reference, task, reference, task, task, reference, task, task, reference, reference, reference, reference, task, reference, task, reference, task, task, reference, task, reference, task, task, reference, task, task, task, task, task, task, task, reference, reference" />
<meta name="keywords" content="Red Hat Enterprise Linux (RHEL) 4, installing, Red Hat Enterprise Linux (RHEL) 5, SELinux, uninstalling" />
<meta name="keywords" content="Red Hat Enterprise Linux (RHEL) 4Ii, tape archive, -agentlib:, -agentpath:, -assert, -cp, -classpath, -D, -help, -?, -javaagent:, -jre-restrict-search" />
<meta name="keywords" content="-no-jre-restrict-search, -showversion, -verbose:, -version:, -X, just-in-time, complier, just-in-time compiliation, -Xinit, options, -Xnojit, testing" />
<meta name="keywords" content="JIT, specifying, garbage collection, -Xgcpolicy, pause time, pause time reduction, full heaps, environments, XML, XSL, Selective Debugging, Selective" />
<meta name="keywords" content="Debugging, class data sharing, -Xshareclasses, class sharing options, -Xscmx, creating a cache, populating a cache, monitoring a cache" />
<meta name="keywords" content="deleting a cache, performance consumption, memory consumption, limitations, class sharing, considerations, cache size limits" />
<meta name="keywords" content="runtime bytecode modification, operating system limitations, using, SharedClassPermission, adapting, class loaders, command-line options, command-line" />
<meta name="keywords" content="general, system properties, system property, nonstandard, non-standard, -Xcheck;jni, Xcheck:jni, -Xcheck:memory, garbage collector, default settings" />
<meta name="keywords" content="JVM, settings, default (JVM), virtualization software" />
<title>SDK and Runtime Guide</title>
<link rel="stylesheet" type="text/css" href="../ibmidwb.css" />
<link rel="stylesheet" type="text/css" href="../swg_info_common.css" />
</head>
<body>
<a id="Top_Of_Page" name="Top_Of_Page"></a><h1>IBM SDK for Linux platforms, Java Technology Edition</h1>
<h1>SDK and Runtime Guide</h1><span class="productlevel">Version 6</span> 
<br />
<span class="ibmdocnum"></span><br />
<a name="notices_link"></a>
<div id="notices_link">
<div class="pblklblbox">
<span class="pblktitle">Note</span>
<p>Before using this information and the product it supports, read
the information in <a href="#notices">Notices</a>.</p></div></div>
<a name="copyright"></a>
<div id="copyright">
<span class="ednoticestitle">Copyright information</span>
<p>This edition of the user guide applies to the IBM SDK and
Runtime Environment for Linux on
multiple platforms.</p>
<p>The platforms this guide applies to are: 
</p>
<ul>
<li>IBM 32-bit SDK and Runtime
Environment for Linux on Intel architecture, Java Technology Edition, Version 6</li>
<li>IBM 64-bit SDK and Runtime
Environment for Linux on AMD64/EM64T
architecture, Java Technology Edition, Version 6</li>
<li>IBM 32-bit SDK and Runtime
Environment for Linux on System i&reg; and System p&reg; architecture, Java Technology Edition, Version 6</li>
<li>IBM 64-bit SDK and Runtime
Environment for Linux on System i and System p architecture, Java Technology Edition, Version 6</li>
<li>IBM 31-bit SDK and Runtime
Environment for Linux on System z architecture, Java Technology
Edition, Version 6</li>
<li>IBM 64-bit SDK and Runtime
Environment for Linux on System z architecture, Java Technology
Edition, Version 6</li></ul><p class="indatacontent"> and all subsequent releases and modifications until otherwise
indicated in new editions.</p>
<p>&copy; Copyright Sun Microsystems, Inc. 1997, 2007, 901 San Antonio
Rd., Palo Alto, CA 94303 USA. All rights reserved.</p></div><div><strong>Copyright International Business Machines Corporation 2003, 2010.</strong><br />US Government Users Restricted Rights -- Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.</div>

<a name="wq2"></a>
<div id="wq2">
<h1>Contents</h1>
<div class="head1"><a id="ToC_1" name="ToC_1" href="#preface" class="toclink">Preface</a></div>
<div class="head1"><a id="ToC_2" name="ToC_2" href="#overview" class="toclink">Overview</a></div>
<div class="head2"><a id="ToC_3" name="ToC_3" href="#lnx_conventions" class="toclink">Linux conventions</a></div>
<div class="head2"><a id="ToC_4" name="ToC_4" href="#compatibility" class="toclink">Version compatibility</a></div>
<div class="head2"><a id="ToC_5" name="ToC_5" href="#migrating" class="toclink">Migrating from other IBM JVMs</a></div>
<div class="head2"><a id="ToC_6" name="ToC_6" href="#supportedenvironmentsissupportedon" class="toclink">Supported environments</a></div>
<div class="head1"><a id="ToC_10" name="ToC_10" href="#contents_sdk" class="toclink">Contents of the SDK and Runtime Environment</a></div>
<div class="head2"><a id="ToC_11" name="ToC_11" href="#jretools" class="toclink">Contents of the Runtime Environment</a></div>
<div class="head2"><a id="ToC_12" name="ToC_12" href="#sdktools" class="toclink">Contents of the SDK</a></div>
<div class="head1"><a id="ToC_13" name="ToC_13" href="#lin_install_config" class="toclink">Installing and configuring the SDK and Runtime Environment</a></div>
<div class="head2"><a id="ToC_14" name="ToC_14" href="#upgrading" class="toclink">Upgrading the SDK</a></div>
<div class="head2"><a id="ToC_16" name="ToC_16" href="#installredhat4" class="toclink">Installing on Red Hat Enterprise Linux (RHEL) 4</a></div>
<div class="head2"><a id="ToC_19" name="ToC_19" href="#installredhat5" class="toclink">Installing on Red Hat Enterprise Linux (RHEL) 5</a></div>
<div class="head3"><a id="ToC_22" name="ToC_22" href="#lin_redhat_selinux" class="toclink">Running Java with SELinux on RHEL 5</a></div>
<div class="head2"><a id="ToC_24" name="ToC_24" href="#lin_install_ubuntu" class="toclink">Installing on Ubuntu</a></div>
<div class="head2"><a id="ToC_26" name="ToC_26" href="#lin_install" class="toclink">Installing a 32-bit SDK on 64-bit architecture</a></div>
<div class="head2"><a id="ToC_28" name="ToC_28" href="#lin_rpm_install" class="toclink">Installing from a <samp>.rpm</samp> file</a></div>
<div class="head2"><a id="ToC_31" name="ToC_31" href="#lin_tgz_install" class="toclink">Installing from a <samp>.tgz</samp> file</a></div>
<div class="head2"><a id="ToC_33" name="ToC_33" href="#lin_jpackage_install" class="toclink">Using a JPackage compatible format</a></div>
<div class="head2"><a id="ToC_35" name="ToC_35" href="#lin_config" class="toclink">Configuring the SDK and Runtime Environment for Linux</a></div>
<div class="head3"><a id="ToC_36" name="ToC_36" href="#pathcons" class="toclink">Setting the path</a></div>
<div class="head3"><a id="ToC_39" name="ToC_39" href="#classpath" class="toclink">Setting the class path</a></div>
<div class="head3"><a id="ToC_41" name="ToC_41" href="#dt2mg46" class="toclink">Updating your SDK or JRE for daylight saving time changes</a></div>
<div class="head2"><a id="ToC_44" name="ToC_44" href="#lin_uninstall" class="toclink">Uninstalling the SDK and Runtime Environment for Linux</a></div>
<div class="head3"><a id="ToC_45" name="ToC_45" href="#uninstrpm" class="toclink">Uninstalling the Red Hat Package Manager (RPM) package</a></div>
<div class="head3"><a id="ToC_48" name="ToC_48" href="#uninsttar" class="toclink">Uninstalling the compressed Tape Archive (TAR) package</a></div>
<div class="head1"><a id="ToC_50" name="ToC_50" href="#running_applications" class="toclink">Running Java applications</a></div>
<div class="head2"><a id="ToC_51" name="ToC_51" href="#invint" class="toclink">The java and javaw commands</a></div>
<div class="head3"><a id="ToC_55" name="ToC_55" href="#build_number" class="toclink">Obtaining version information</a></div>
<div class="head3"><a id="ToC_58" name="ToC_58" href="#specifying_options" class="toclink">Specifying Java options and system properties</a></div>
<div class="head3"><a id="ToC_61" name="ToC_61" href="#standard_options" class="toclink">Standard options</a></div>
<div class="head3"><a id="ToC_62" name="ToC_62" href="#globalization" class="toclink">Globalization of the java command</a></div>
<div class="head2"><a id="ToC_63" name="ToC_63" href="#setlpath" class="toclink">Working with the <strong>LD_LIBRARY_PATH</strong> environment variable</a></div>
<div class="head2"><a id="ToC_64" name="ToC_64" href="#jit" class="toclink">The Just-In-Time (JIT) compiler</a></div>
<div class="head3"><a id="ToC_65" name="ToC_65" href="#disjit" class="toclink">Disabling the JIT</a></div>
<div class="head3"><a id="ToC_68" name="ToC_68" href="#enajit" class="toclink">Enabling the JIT</a></div>
<div class="head3"><a id="ToC_70" name="ToC_70" href="#detjit" class="toclink">Determining whether the JIT is enabled</a></div>
<div class="head2"><a id="ToC_73" name="ToC_73" href="#garbage" class="toclink">Specifying garbage collection policy</a></div>
<div class="head3"><a id="ToC_74" name="ToC_74" href="#garbage_options" class="toclink">Garbage collection options</a></div>
<div class="head3"><a id="ToC_75" name="ToC_75" href="#garbage_compressed_refs" class="toclink">More effective heap usage using compressed references</a></div>
<div class="head3"><a id="ToC_76" name="ToC_76" href="#garbage_pause" class="toclink">Pause time</a></div>
<div class="head3"><a id="ToC_77" name="ToC_77" href="#pausetimereduction" class="toclink">Pause time reduction</a></div>
<div class="head3"><a id="ToC_78" name="ToC_78" href="#garbage_full_heap" class="toclink">Environments with very full heaps</a></div>
<div class="head2"><a id="ToC_79" name="ToC_79" href="#euro_symbol" class="toclink">Euro symbol support</a></div>
<div class="head2"><a id="ToC_80" name="ToC_80" href="#fallback_font" class="toclink">Fallback font configuration files</a></div>
<div class="head2"><a id="ToC_81" name="ToC_81" href="#input_method_extensions" class="toclink">Using Indian and Thai input methods</a></div>
<div class="head1"><a id="ToC_85" name="ToC_85" href="#developing" class="toclink">Developing Java applications</a></div>
<div class="head2"><a id="ToC_86" name="ToC_86" href="#xml_using" class="toclink">Using XML</a></div>
<div class="head3"><a id="ToC_89" name="ToC_89" href="#xslt_migration_steps" class="toclink">Migrating to the XL-TXE-J</a></div>
<div class="head3"><a id="ToC_92" name="ToC_92" href="#xml_reference" class="toclink">XML reference information</a></div>
<div class="head2"><a id="ToC_104" name="ToC_104" href="#debugger" class="toclink">Debugging Java applications</a></div>
<div class="head3"><a id="ToC_105" name="ToC_105" href="#jdb" class="toclink">Java Debugger (JDB)</a></div>
<div class="head3"><a id="ToC_106" name="ToC_106" href="#selective" class="toclink">Selective debugging</a></div>
<div class="head2"><a id="ToC_110" name="ToC_110" href="#bit_check" class="toclink">Determining whether your application is running on a 32-bit or 64-bit JVM</a></div>
<div class="head2"><a id="ToC_112" name="ToC_112" href="#signals" class="toclink">How the JVM processes signals</a></div>
<div class="head3"><a id="ToC_113" name="ToC_113" href="#sighand" class="toclink">Signals used by the JVM</a></div>
<div class="head3"><a id="ToC_114" name="ToC_114" href="#native_signals" class="toclink">Linking a native code driver to the signal-chaining library</a></div>
<div class="head2"><a id="ToC_116" name="ToC_116" href="#usejni" class="toclink">Writing JNI applications</a></div>
<div class="head3"><a id="ToC_117" name="ToC_117" href="#supportedcompilers" class="toclink">Supported compilers</a></div>
<div class="head2"><a id="ToC_118" name="ToC_118" href="#blocked_threads" class="toclink">Support for thread-level recovery of blocked connectors</a></div>
<div class="head2"><a id="ToC_119" name="ToC_119" href="#alloc_large_page" class="toclink">Configuring large page memory allocation</a></div>
<div class="head2"><a id="ToC_121" name="ToC_121" href="#corba" class="toclink">CORBA support</a></div>
<div class="head3"><a id="ToC_125" name="ToC_125" href="#corba_properties" class="toclink">System properties for tracing the ORB</a></div>
<div class="head3"><a id="ToC_129" name="ToC_129" href="#corba_tuning" class="toclink">System properties for tuning the ORB</a></div>
<div class="head3"><a id="ToC_130" name="ToC_130" href="#corba_security" class="toclink">Java security permissions for the ORB</a></div>
<div class="head3"><a id="ToC_131" name="ToC_131" href="#corba_classes" class="toclink">ORB implementation classes</a></div>
<div class="head2"><a id="ToC_132" name="ToC_132" href="#rmi-iiop" class="toclink">RMI over IIOP</a></div>
<div class="head2"><a id="ToC_133" name="ToC_133" href="#rmi" class="toclink">Implementing the Connection Handler Pool for RMI</a></div>
<div class="head2"><a id="ToC_135" name="ToC_135" href="#bigd" class="toclink">Enhanced BigDecimal</a></div>
<div class="head2"><a id="ToC_136" name="ToC_136" href="#xtoolkit" class="toclink">Support for XToolkit</a></div>
<div class="head2"><a id="ToC_137" name="ToC_137" href="#attachapi" class="toclink">Support for the Java Attach API</a></div>
<div class="head1"><a id="ToC_140" name="ToC_140" href="#deploying" class="toclink">Plug-in, Applet Viewer and Web Start</a></div>
<div class="head2"><a id="ToC_141" name="ToC_141" href="#using_plugin" class="toclink"><strong><span class="bold-italic">(Linux IA 32 bit and PPC32 only) </span></strong>Using the Java plug-in</a></div>
<div class="head3"><a id="ToC_142" name="ToC_142" href="#suppbrowse" class="toclink">Supported browsers</a></div>
<div class="head3"><a id="ToC_143" name="ToC_143" href="#installing_plugin" class="toclink">Installing the Java plug-in</a></div>
<div class="head3"><a id="ToC_147" name="ToC_147" href="#plugin_dom" class="toclink">Common Document Object Model (DOM) support</a></div>
<div class="head3"><a id="ToC_148" name="ToC_148" href="#plugin_dbcs" class="toclink">Using DBCS parameters</a></div>
<div class="head2"><a id="ToC_150" name="ToC_150" href="#applets" class="toclink">Working with applets</a></div>
<div class="head3"><a id="ToC_151" name="ToC_151" href="#applet_viewer" class="toclink">Running and debugging applets with the Applet Viewer</a></div>
<div class="head2"><a id="ToC_153" name="ToC_153" href="#using_webstart" class="toclink"><strong><span class="bold-italic">(Linux IA 32-bit, PPC32, and PPC64 only)</span></strong> Using Web Start</a></div>
<div class="head3"><a id="ToC_154" name="ToC_154" href="#installing_webstart" class="toclink">Running Web Start</a></div>
<div class="head3"><a id="ToC_157" name="ToC_157" href="#webstart_ssv" class="toclink"><strong><span class="bold-italic">(Linux IA 32-bit only) </span></strong>WebStart Secure Static Versioning</a></div>
<div class="head2"><a id="ToC_158" name="ToC_158" href="#shipping" class="toclink">Distributing Java applications</a></div>
<div class="head1"><a id="ToC_159" name="ToC_159" href="#classdatasharing" class="toclink">Class data sharing between JVMs</a></div>
<div class="head2"><a id="ToC_160" name="ToC_160" href="#shc_overview" class="toclink">Overview of class data sharing</a></div>
<div class="head2"><a id="ToC_167" name="ToC_167" href="#sharedclassesxoptions" class="toclink">Class data sharing command-line options</a></div>
<div class="head2"><a id="ToC_168" name="ToC_168" href="#shc_admin" class="toclink">Creating, populating, monitoring, and deleting a cache</a></div>
<div class="head2"><a id="ToC_169" name="ToC_169" href="#shc_performance" class="toclink">Performance and memory consumption</a></div>
<div class="head2"><a id="ToC_170" name="ToC_170" href="#shc_limitations" class="toclink">Considerations and limitations of using class data sharing</a></div>
<div class="head3"><a id="ToC_171" name="ToC_171" href="#cachesizelimits" class="toclink">Cache size limits</a></div>
<div class="head3"><a id="ToC_172" name="ToC_172" href="#retransformationclasses" class="toclink">JVMTI RetransformClasses() is unsupported</a></div>
<div class="head3"><a id="ToC_173" name="ToC_173" href="#runtimebytecode" class="toclink">Runtime bytecode modification</a></div>
<div class="head3"><a id="ToC_174" name="ToC_174" href="#shc_os_limitations" class="toclink">Operating system limitations</a></div>
<div class="head3"><a id="ToC_175" name="ToC_175" href="#usingsharedclasspermissions" class="toclink">Using SharedClassPermission</a></div>
<div class="head2"><a id="ToC_176" name="ToC_176" href="#adaptingclassloaders" class="toclink">Adapting custom class loaders to share classes</a></div>
<div class="head1"><a id="ToC_177" name="ToC_177" href="#jcommchapter" class="toclink">Java Communications API (JavaComm)</a></div>
<div class="head2"><a id="ToC_178" name="ToC_178" href="#instcomm" class="toclink">Installing Java Communications API from a compressed file</a></div>
<div class="head2"><a id="ToC_181" name="ToC_181" href="#instcomm_rpm" class="toclink">Installing the Java Communications API from an RPM file</a></div>
<div class="head2"><a id="ToC_184" name="ToC_184" href="#fileloc" class="toclink">Location of the Java Communications API files</a></div>
<div class="head2"><a id="ToC_185" name="ToC_185" href="#javacomm_configure" class="toclink">Configuring the Java Communications API</a></div>
<div class="head3"><a id="ToC_187" name="ToC_187" href="#javacomm_lnx_serial" class="toclink">Changing the access mode of serial and parallel ports</a></div>
<div class="head3"><a id="ToC_189" name="ToC_189" href="#javacomm_lnx_devices" class="toclink">Specifying devices in the <samp>javax.comm.properties</samp> file</a></div>
<div class="head2"><a id="ToC_191" name="ToC_191" href="#javacomm_thinkpad" class="toclink">Enabling serial ports on IBM ThinkPads</a></div>
<div class="head2"><a id="ToC_193" name="ToC_193" href="#javacomm_printing" class="toclink">Printing limitation with the Java Communications API</a></div>
<div class="head2"><a id="ToC_194" name="ToC_194" href="#javacomm_lnx_remove" class="toclink">Uninstalling Java Communications API</a></div>
<div class="head3"><a id="ToC_196" name="ToC_196" href="#javacomm_redhat_remove" class="toclink">Uninstalling the Red Hat Package Manager (RPM) package</a></div>
<div class="head3"><a id="ToC_199" name="ToC_199" href="#javacomm_tar_remove" class="toclink">Uninstalling the compressed Tape Archive (TAR) package</a></div>
<div class="head2"><a id="ToC_201" name="ToC_201" href="#javacomm_apidoc" class="toclink">The Java Communications API documentation</a></div>
<div class="head1"><a id="ToC_202" name="ToC_202" href="#support" class="toclink">Service and support for independent software vendors</a></div>
<div class="head1"><a id="ToC_203" name="ToC_203" href="#accessibility" class="toclink">Accessibility</a></div>
<div class="head2"><a id="ToC_204" name="ToC_204" href="#access_keyboard" class="toclink">Keyboard traversal of JComboBox components in Swing</a></div>
<div class="head2"><a id="ToC_205" name="ToC_205" href="#access_webstart" class="toclink">Web Start accessibility (Linux IA 32-bit, PPC32, and PPC64 only)</a></div>
<div class="head1"><a id="ToC_206" name="ToC_206" href="#rcf" class="toclink">Any comments on this user guide?</a></div>
<div class="head1"><a id="ToC_207" name="ToC_207" href="#cmdline" class="toclink">Appendix A. Command-line options</a></div>
<div class="head2"><a id="ToC_208" name="ToC_208" href="#cmdline_specifying" class="toclink">Specifying command-line options</a></div>
<div class="head2"><a id="ToC_209" name="ToC_209" href="#cmdline_general" class="toclink">General command-line options</a></div>
<div class="head2"><a id="ToC_210" name="ToC_210" href="#cmdline_properties" class="toclink">System property command-line options</a></div>
<div class="head2"><a id="ToC_211" name="ToC_211" href="#commands_jvm" class="toclink">JVM command-line options</a></div>
<div class="head3"><a id="ToC_212" name="ToC_212" href="#xxcommand-lineoptions" class="toclink">-XX command-line options</a></div>
<div class="head2"><a id="ToC_213" name="ToC_213" href="#commands_jit" class="toclink">JIT and AOT command-line options</a></div>
<div class="head2"><a id="ToC_214" name="ToC_214" href="#commands_gc" class="toclink">Garbage Collector command-line options</a></div>
<div class="head1"><a id="ToC_215" name="ToC_215" href="#defaults" class="toclink">Appendix B. Default settings for the JVM</a></div>
<div class="head1"><a id="ToC_216" name="ToC_216" href="#limitations" class="toclink">Appendix C. Known limitations</a></div>
<div class="head1"><a id="ToC_269" name="ToC_269" href="#supportforvirtualizationsoftware" class="toclink">Appendix D. Support for virtualization software</a></div>
<div class="head1"><a id="ToC_270" name="ToC_270" href="#notices" class="toclink">Notices</a></div>
<div class="head2"><a id="ToC_271" name="ToC_271" href="#trademarks" class="toclink">Trademarks</a></div>
</div>
<a name="preface"></a>
<h1 id="preface"><a href="#ToC_1">Preface</a></h1>
<div>
<p>This user guide provides general
information about the IBM&reg; SDK
and Runtime Environment for Linux platforms, Java Technology Edition, Version 6. The user guide gives specific information about
any differences in the IBM implementation
compared with the Sun implementation.</p></div>
<p>Read this user guide with the more extensive
documentation on the Sun Web site: <a href="http://java.sun.com" target="_blank">http://java.sun.com</a>.</p>
<p>The <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> provides more detailed information
about the IBM Virtual Machine
for Java.</p>
<p>This user guide is part of a release
and is applicable only to that  particular release. Make sure that
you have the user guide appropriate to the
release you are using.</p>
<p>The terms "Runtime Environment" and "Java Virtual
Machine" are used interchangeably throughout this user guide.</p>
<p><img src="../delta.gif" alt="Start of change" /><font color="RED">Technical changes made for this version
of the user guide, other than minor or obvious
ones, are indicated by blue chevrons when viewing in an Information
Center, by blue chevrons and in red when viewing in HTML, or by vertical
bars to the left of the changes when viewing as a PDF file.</font><img src="../deltaend.gif" alt="End of change" /></p>
<p>The Program Code is not designed or intended for
use in real-time applications such as (but not limited to) the online
control of aircraft, air traffic, aircraft navigation, or aircraft
communications; or in the design, construction, operation, or maintenance
of any nuclear facility.</p>
<a name="overview"></a>
<h1 id="overview"><a href="#ToC_2">Overview</a></h1>
<div>
<p>The IBM SDK is a development environment for writing
and running applets and applications that conform to the Java 6 Core Application Program Interface (API).</p></div>
<p>The SDK includes the Runtime Environment
for Linux, which
enables you only to run Java applications.
If you have installed the SDK, the Runtime Environment is included.</p>
<p>The Runtime Environment contains the Java Virtual Machine and supporting files including non-debuggable .so files and class files. The
Runtime Environment contains only a subset of the classes that are
found in the SDK and allows you to support a Java program
at runtime but does not provide compilation of Java programs.
The Runtime Environment for Linux does not include
any of the development tools, for example <strong>appletviewer</strong> or the Java compiler
(<strong>javac</strong>), or classes that are
only for development systems.</p>
<p>In addition, for
IA32, PPC32/PPC64, and AMD64/EM64T platforms, the Java Communications application programming
interface (API) package is provided for use with the Runtime Environment
for Linux. You
can find information about it in <a href="#jcommchapter">Java Communications API (JavaComm)</a>.</p>
<p>The <samp>license_<em>xx</em>.html</samp> file
contains the license agreement for the Runtime Environment for Linux software,
where <em>xx</em> is an abbreviation for the language. To
view or print the license agreement, open the file in a Web browser.</p>
<a name="lnx_conventions"></a>
<h2 id="lnx_conventions"><a href="#ToC_3">Linux conventions</a></h2>
<div>
<p>In this documentation, the default installation directory
of the SDK is referred to as /opt/ibm/java-&lt;arch&gt;-60/, where <em>&lt;arch&gt;</em> is
the architecture of your platform.</p></div>
<p>The default installation directories for the various architectures
are listed here; replace the directory for the architecture you are
using when you see /opt/ibm/java-&lt;arch&gt;-60/: 
</p>
<ul>
<li>Linux IA 32-bit: /opt/ibm/java-i386-60/</li>
<li>Linux AMD 64-bit: /opt/ibm/java-x86_64-60/</li>
<li>Linux PPC 32-bit: /opt/ibm/java-ppc-60/</li>
<li>Linux PPC 64-bit: /opt/ibm/java-ppc64-60/</li>
<li>Linux System z&reg; 31-bit: /opt/ibm/java-s390-60/</li>
<li>Linux System
z 64-bit: /opt/ibm/java-s390x-60/</li></ul>
<p>Korn shell commands are used in examples throughout this user guide.</p>
<a name="compatibility"></a>
<h2 id="compatibility"><a href="#ToC_4">Version compatibility</a></h2>
<div>
<p>In general, any applet or application
that ran with a previous version of the SDK should run correctly
with the IBM SDK
for Linux, v6.
Classes compiled with this release are not guaranteed to work on previous
releases.</p></div>
<p>For information about compatibility issues between releases, see
the Sun Web site at:</p>
<p><a href="http://java.sun.com/javase/6/webnotes/compatibility.html" target="_blank">http://java.sun.com/javase/6/webnotes/compatibility.html</a></p>
<p><a href="http://java.sun.com/j2se/5.0/compatibility.html" target="_blank">http://java.sun.com/j2se/5.0/compatibility.html</a></p>
<p><a href="http://java.sun.com/j2se/1.4/compatibility.html" target="_blank">http://java.sun.com/j2se/1.4/compatibility.html</a></p>
<p><a href="http://java.sun.com/j2se/1.3/compatibility.html" target="_blank">http://java.sun.com/j2se/1.3/compatibility.html</a></p>
<p>If you are using the SDK as part of another product
(for example, IBM WebSphere&reg; Application Server),
and you upgrade from a previous level of the SDK, perhaps v5.0, serialized classes might not be compatible. However, classes
are compatible between service refreshes.</p>
<a name="migrating"></a>
<h2 id="migrating"><a href="#ToC_5">Migrating from other IBM JVMs</a></h2>
<div>
<p>From Version 5.0, the IBM Runtime
Environment for Linux contains
new versions of the IBM Virtual Machine for Java and the Just-In-Time (JIT) compiler.</p></div>
<p>If you are migrating from an older IBM Runtime
Environment, note that:</p>
<ul>
<li>The JVM shared library <samp>libjvm.so</samp> is
now stored in jre/lib/&lt;arch&gt;/j9vm
and jre/lib/&lt;arch&gt;/classic.</li>
<li>From Version 5.0 onwards, the JVM Monitoring Interface
(JVMMI) is no longer available. You must rewrite JVMMI applications
to use the JVM Tool Interface (JVMTI) instead. The JVMTI is not functionally
the equivalent of JVMMI. For information about JVMTI, see <a href="http://java.sun.com/javase/6/docs/technotes/guides/jvmti/" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jvmti/</a> and the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>.</li>
<li>From Version 5.0 onwards, the implementation of JNI
conforms to the JNI specification, but differs from the Version 1.4.2
implementation. It returns copies of objects rather than pinning the
objects.  This difference can expose errors in JNI application code.
For information about debugging JNI code, see <strong>-Xcheck:jni</strong> in <a href="#commands_jvm">JVM command-line options</a>.</li>
<li>From Version 5.0 onwards, the format and content of
garbage collector verbose logs obtained using <strong>-verbose:gc</strong> have
changed. The data is now formatted as XML. The data content reflects
the changes to the implementation of garbage collection in the JVM,
and most of the statistics that are output have changed. You must
change any programs that process the verbose GC output so that they
will work with the new format and data. See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> for an example of the new
verbose GC data.</li>
<li>SDK 1.4 versions of the IBM JRE
included JVM specific classes in a file called core.jar. From Version
5.0 onwards, these are included in a file called <samp>vm.jar</samp>.</li>
<li>From Version 6, JVM classes are held in multiple JAR
files in the <samp>jre/lib</samp> directory.
This replaces the single <samp>rt.jar</samp> and <samp>core.jar</samp> from
earlier releases.</li>
<li>For additional industry compatibility information,
see Sun's Java 6 Compatibility Documentation: <a href="http://java.sun.com/javase/6/webnotes/compatibility.html" target="_blank">http://java.sun.com/javase/6/webnotes/compatibility.html</a></li>
<li>For additional deprecated API information, see Sun's Java 6 Deprecated API List: <a href="http://java.sun.com/javase/6/docs/api/deprecated-list.html" target="_blank">http://java.sun.com/javase/6/docs/api/deprecated-list.html</a></li>
<li>Tracing class dependencies, started using <strong>-verbose:Xclassdep</strong>,
is not supported. If you specify <strong>-verbose:Xclassdep</strong>,
the JVM will issue an error message and will not start.</li>
<li>The JVM detects the operating system locale and sets the language
preferences accordingly. For example, if the locale is set to <strong>fr_FR</strong>,
JVM messages will be printed in French. To avoid seeing JVM messages
in the language of the detected locale, remove the file <samp>$SDK/jre/bin/java_<em>xx</em>.properties</samp> where <samp><em>xx</em></samp> is
the locale, such as <strong>fr</strong>, and the JVM will print
messages in English.</li></ul>
<a name="supportedenvironmentsissupportedon"></a>
<h2 id="supportedenvironmentsissupportedon"><a href="#ToC_6">Supported environments</a></h2>
<div>
<p>The IBM SDK
for Linux, v6 is
supported on certain hardware platforms and operating systems, and
is tested on specific virtualization environments.</p></div>
<p>
<a name="wq3"></a>
<h3 id="wq3">Hardware platform</h3>
<p>There are a number of distributions provided for
the Linux operating system
that support the following platform architectures:
</p>
<ul>
<li>Intel Architecture, 32-bit
(IA-32)</li>
<li>AMD64/EM64T</li>
<li>IBM POWER&reg; 32</li>
<li>IBM POWER 64</li>
<li>System z-31</li>
<li>System z-64</li></ul><p class="indatacontent">The following System z9&reg; and zSeries&reg; hardware models are
supported:
</p>
<ul>
<li><img src="../delta.gif" alt="Start of change" /><font color="RED">z196</font><img src="../deltaend.gif" alt="End of change" /></li>
<li>z9-109</li>
<li>z990</li>
<li>z900</li>
<li>z890</li>
<li>z800</li></ul></p>
<p>
<a name="wq4"></a>
<h3 id="wq4">Operating system</h3>
<p>The following table details
the operating system supported for the IBM SDK
for Linux, v6. The table
indicates whether support for an operating system release was included
at the "general availability" (GA) date for the SDK, or at a specific
service refresh (SR) level.</p></p>
<a name="wq5"></a>
<table id="wq5" width="100%" summary="" border="1" frame="border" rules="all">
<caption>Table 1. </caption>
<thead valign="bottom">
<tr valign="bottom">
<th id="wq6" align="left">Hardware</th>
<th id="wq7" align="left">IA-32 32-bit</th>
<th id="wq8" colspan="2" align="left">AMD64/EM64T 64-bit</th>
<th id="wq9" colspan="2" align="left">POWER 64-bit</th>
<th id="wq10" align="left">System z 31-bit</th>
<th id="wq11" colspan="2" align="left">System z 64-bit</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq6"><strong>SDK address space</strong></td>
<td headers="wq7"><strong>32-bit</strong></td>
<td headers="wq8"><strong>32-bit</strong></td>
<td headers="wq8"><strong>64-bit</strong></td>
<td headers="wq9"><strong>32-bit</strong></td>
<td headers="wq9"><strong>64-bit</strong></td>
<td headers="wq10"><strong>31-bit</strong></td>
<td headers="wq11"><strong>31-bit</strong></td>
<td headers="wq11"><strong>64-bit</strong></td>
</tr>
<tr>
<td headers="wq6">SUSE Linux Enterprise
Server (SLES) 9</td>
<td headers="wq7">GA</td>
<td headers="wq8">GA</td>
<td headers="wq8">GA</td>
<td headers="wq9">GA</td>
<td headers="wq9">GA</td>
<td headers="wq10">GA</td>
<td headers="wq11">GA</td>
<td headers="wq11">GA</td>
</tr>
<tr>
<td headers="wq6">SLES 10 /SUSE Linux Enterprise
Desktop (SLED)10</td>
<td headers="wq7">GA</td>
<td headers="wq8">GA</td>
<td headers="wq8">GA</td>
<td headers="wq9">GA</td>
<td headers="wq9">GA</td>
<td headers="wq10">GA</td>
<td headers="wq11">GA</td>
<td headers="wq11">GA</td>
</tr>
<tr>
<td headers="wq6">SLES 11</td>
<td headers="wq7">SR5</td>
<td headers="wq8">SR5</td>
<td headers="wq8">SR5</td>
<td headers="wq9">SR5</td>
<td headers="wq9">SR5</td>
<td headers="wq10">-</td>
<td headers="wq11">SR5</td>
<td headers="wq11">SR5</td>
</tr>
<tr>
<td headers="wq6">Novell Linux Desktop</td>
<td headers="wq7">GA</td>
<td headers="wq8">-</td>
<td headers="wq8">-</td>
<td headers="wq9">-</td>
<td headers="wq9">-</td>
<td headers="wq10">-</td>
<td headers="wq11">-</td>
<td headers="wq11">-</td>
</tr>
<tr>
<td headers="wq6">RedHat Enterprise Linux (RHEL) 4</td>
<td headers="wq7">GA</td>
<td headers="wq8">GA</td>
<td headers="wq8">GA</td>
<td headers="wq9">GA</td>
<td headers="wq9">GA</td>
<td headers="wq10">GA</td>
<td headers="wq11">GA</td>
<td headers="wq11">GA</td>
</tr>
<tr>
<td headers="wq6">RHEL 5</td>
<td headers="wq7">GA</td>
<td headers="wq8">GA</td>
<td headers="wq8">GA</td>
<td headers="wq9">GA</td>
<td headers="wq9">GA</td>
<td headers="wq10">GA</td>
<td headers="wq11">GA</td>
<td headers="wq11">GA</td>
</tr>
<tr>
<td headers="wq6">RHEL 6</td>
<td headers="wq7"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
<td headers="wq8"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
<td headers="wq8"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
<td headers="wq9"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
<td headers="wq9"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
<td headers="wq10"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
<td headers="wq11"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
<td headers="wq11"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
</tr>
</tbody>
</table>
<p>The latest service details and resources
can be found here:<a href="http://www.ibm.com/developerworks/java/jdk/linux/index.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/linux/index.html</a>.</p>
<p>
<a name="wq12"></a>
<h3 id="wq12">Virtualization software</h3>
<p>For information
about the virtualization software tested for IBM SDK
for Linux, v6, see <a href="#supportforvirtualizationsoftware">Appendix D. Support for virtualization software</a>.</p></p>
<a name="contents_sdk"></a>
<h1 id="contents_sdk"><a href="#ToC_10">Contents of the SDK and Runtime Environment</a></h1>
<div>
<p>The SDK contains
several development tools and a Java Runtime
Environment (JRE). This section describes the contents of the SDK tools and the Runtime
Environment.</p></div>
<p>Applications written entirely in Java must
have <strong>no</strong> dependencies on the IBM SDK's
directory structure (or files in those directories).  Any dependency
on the SDK's directory structure (or the files in those directories)
might result in application portability problems.</p>
<p>The user guides,
Javadoc files, demo
files, and the accompanying license and copyright
files are the only documentation included in this SDK for Linux. You can view Sun's
software documentation by visiting the Sun Web site, or you can download
Sun's software documentation package from the Sun Web site: <a href="http://java.sun.com" target="_blank">http://java.sun.com</a>.</p>
<a name="jretools"></a>
<h2 id="jretools"><a href="#ToC_11">Contents of the Runtime Environment</a></h2>
<div>
<p>A list of classes, tools, and other files that you can
use with the standard Runtime Environment.</p></div>
<p></p>
<ul>
<li>Core Classes - These classes are the compiled class files for
the platform and must remain compressed for the compiler and interpreter
to access them. Do not modify these classes; instead, create subclasses
and override where you need to.</li>
<li>Trusted root certificates from certificate signing authorities
- These certificates are used to validate the identity of signed material. The IBM Runtime
Environment for Java contains
an expired GTE CyberTrust Certificate for compatibility reasons. This
certificate might be removed for later versions of the SDK. See <a href="#limitations__expiredcertificates">Expired
GTE Cybertrust Certificate</a> for
more information.</li>
<li>JRE tools - The following tools are part of the Runtime Environment and are in the /opt/ibm/java-&lt;arch&gt;-60/jre/bin directory unless
otherwise specified.

<dl class="parml">
<dt class="bold"><a id="jretools__ikeyman" name="jretools__ikeyman"></a>ikeyman (iKeyman GUI utility)</dt>
<dd>Allows you to manage keys, certificates, and certificate requests.
For more information see the accompanying <a href="http://www.ibm.com/developerworks/java/jdk/security/60/index.html" target="_blank">Security Guide</a> and <a href="http://public.dhe.ibm.com/software/dw/jdk/security/50/GSK7c_SSL_IKM_Guide.pdf" target="_blank">http://public.dhe.ibm.com/software/dw/jdk/security/50/GSK7c_SSL_IKM_Guide.pdf</a>. The SDK also provides a command-line
version of this utility.
</dd>
<dt class="bold"><a id="jretools__java" name="jretools__java"></a>java (Java Interpreter)</dt>
<dd>Runs Java classes. The Java Interpreter runs programs that
are written in the Java programming
language.
</dd>
<dt class="bold"><a id="jretools__javaw" name="jretools__javaw"></a>javaw (Java Interpreter)</dt>
<dd>Runs Java classes in the
same way as the <strong>java</strong> command does, but does not use a console
window.
</dd>
<dt class="bold"><a id="jretools__javaws" name="jretools__javaws"></a><strong><span class="bold-italic">(Linux IA
32-bit, PPC32, and PPC64 only) </span></strong>javaws (Java Web Start)</dt>
<dd>Enables the deployment and automatic maintenance of Java applications. For more information, see <a href="#installing_webstart">Running Web Start</a>.
</dd>
<dt class="bold"><a id="jretools__jcontrol" name="jretools__jcontrol"></a>jcontrol (Java Control Panel)</dt>
<dd><strong>(Except System
z platforms)</strong> Configures your Runtime Environment.
</dd>
<dt class="bold"><a id="jretools__jextract" name="jretools__jextract"></a>jextract (Dump extractor)</dt>
<dd>Converts a system-produced dump into a common format that can
be used by jdmpview. For more information, see <a href="#sdktools__jdmpview">jdmpview</a>.
</dd>
<dt class="bold"><a id="jretools__keytool" name="jretools__keytool"></a>keytool (Key and Certificate Management
Tool)</dt>
<dd>Manages a keystore (database) of private keys and their associated
X.509 certificate chains that authenticate the corresponding public
keys.
</dd>
<dt class="bold"><a id="jretools__kinit" name="jretools__kinit"></a>kinit</dt>
<dd>Obtains and caches Kerberos ticket-granting tickets.
</dd>
<dt class="bold"><a id="jretools__klist" name="jretools__klist"></a>klist</dt>
<dd>Displays entries in the local credentials cache and key table.
</dd>
<dt class="bold"><a id="jretools__ktab" name="jretools__ktab"></a>ktab</dt>
<dd>Manages the principal names and service keys stored in a local
key table.
</dd>
<dt class="bold"><a id="jretools__pack200" name="jretools__pack200"></a>pack200</dt>
<dd>Transforms a JAR file into a compressed pack200 file using the Java gzip compressor.
</dd>
<dt class="bold"><a id="jretools__policytool" name="jretools__policytool"></a>policytool (Policy File Creation
and Management Tool)</dt>
<dd>Creates and modifies the external policy configuration files that
define your installation's Java security
policy.
</dd>
<dt class="bold"><a id="jretools__rmid" name="jretools__rmid"></a>rmid (RMI activation system daemon)</dt>
<dd>Starts the activation system daemon so that objects can be registered
and activated in a Java virtual
machine (JVM).
</dd>
<dt class="bold"><a id="jretools__rmiregistry" name="jretools__rmiregistry"></a>rmiregistry (Java remote object registry)</dt>
<dd>Creates and starts a remote object registry on the specified port
of the current host.
</dd>
<dt class="bold"><a id="jretools__tnameserv" name="jretools__tnameserv"></a>tnameserv (Common Object Request
Broker Architecture (CORBA) transient naming service)</dt>
<dd>Starts the CORBA transient naming service.
</dd>
<dt class="bold"><a id="jretools__unpack200" name="jretools__unpack200"></a>unpack200</dt>
<dd>Transforms a packed file produced by pack200 into
a JAR file.
</dd>
</dl></li></ul>
<a name="sdktools"></a>
<h2 id="sdktools"><a href="#ToC_12">Contents of the SDK</a></h2>
<div>
<p>A list of tools and reference information that is included
with the standard SDK.</p></div>
<p></p>
<dl class="parml">
<dt class="bold">The following tools are part of the SDK and are located in the /opt/ibm/java-&lt;arch&gt;-60/bin directory:</dt>
<dd>
<dl class="parml">
<dt class="bold"><a id="sdktools__appletviewer" name="sdktools__appletviewer"></a>appletviewer (Java Applet Viewer)</dt>
<dd>Tests and runs applets outside a Web browser.
</dd>
<dt class="bold"><a id="sdktools__apt" name="sdktools__apt"></a>apt (Annotation Processing Tool)</dt>
<dd>Finds and executes annotation processors based on the annotations
present in the set of specified source files being examined.
</dd>
<dt class="bold">ControlPanel (Java Control Panel)</dt>
<dd><strong>(Except System
z platforms)</strong> Configures your Runtime Environment.
</dd>
<dt class="bold"><a id="sdktools__extcheck" name="sdktools__extcheck"></a>extcheck (Extcheck utility)</dt>
<dd>Detects version conflicts between a target jar file and currently-installed
extension jar files.
</dd>
<dt class="bold"><a id="sdktools__htmlconverter" name="sdktools__htmlconverter"></a><strong><span class="bold-italic">(Linux IA
32-bit and PPC32) </span></strong>HtmlConverter (Java Plug-in HTML Converter)</dt>
<dd>Converts an HTML page that contains applets to a format that can
use the Java Plug-in.
</dd>
<dt class="bold"><a id="sdktools__idlj" name="sdktools__idlj"></a>idlj (IDL to Java Compiler) </dt>
<dd>Generates Java bindings
from a given IDL file.
</dd>
<dt class="bold"><a id="sdktools__ikeycmd" name="sdktools__ikeycmd"></a>ikeycmd (iKeyman command-line
utility)</dt>
<dd>Allows you to manage keys, certificates, and certificate requests
from the command line. For more information see the accompanying <em>Security
Guide</em> and <a href="http://www.ibm.com/developerworks/java/jdk/security/" target="_blank">http://www.ibm.com/developerworks/java/jdk/security/</a>.
</dd>
<dt class="bold"><a id="sdktools__jar" name="sdktools__jar"></a>jar (Java Archive
Tool)</dt>
<dd>Combines multiple files into a single Java Archive (JAR) file.
</dd>
<dt class="bold"><a id="sdktools__jarsigner" name="sdktools__jarsigner"></a>jarsigner (JAR Signing and Verification
Tool)</dt>
<dd>Generates signatures for JAR files and verifies the signatures
of signed JAR files.
</dd>
<dt class="bold"><a id="sdktools__java" name="sdktools__java"></a>java (Java Interpreter)</dt>
<dd>Runs Java classes. The Java Interpreter runs programs that
are written in the Java programming
language.
</dd>
<dt class="bold"><a id="sdktools__java-rmi-unix" name="sdktools__java-rmi-unix"></a>java-rmi.cgi (HTTP-to-CGI request forward tool)</dt>
<dd>Accepts RMI-over-HTTP requests and forwards them to an RMI server
listening on any port.
</dd>
<dt class="bold"><a id="sdktools__javac" name="sdktools__javac"></a>javac (Java Compiler) </dt>
<dd>Compiles programs that are written in the Java programming language into bytecodes (compiled Java code).
</dd>
<dt class="bold"><a id="sdktools__javadoc" name="sdktools__javadoc"></a>javadoc (Java Documentation Generator)</dt>
<dd>Generates HTML pages of API documentation from Java source files.
</dd>
<dt class="bold"><a id="sdktools__javah" name="sdktools__javah"></a>javah (C Header and Stub File
Generator)</dt>
<dd>Enables you to associate native methods with code written in the Java programming language.
</dd>
<dt class="bold"><a id="sdktools__javap" name="sdktools__javap"></a>javap (Class File Disassembler)</dt>
<dd>Disassembles compiled files and can print a representation of
the bytecodes.
</dd>
<dt class="bold"><a id="sdktools__javaw" name="sdktools__javaw"></a>javaw (Java Interpreter)</dt>
<dd>Runs Java classes in the
same way as the <strong>java</strong> command does, but does not use a console
window.
</dd>
<dt class="bold"><a id="sdktools__javaws" name="sdktools__javaws"></a><strong><span class="bold-italic">(Linux IA
32-bit, PPC32, and PPC64 only) </span></strong>javaws (Java Web Start)</dt>
<dd>Enables the deployment and automatic maintenance of Java applications. For more information, see <a href="#installing_webstart">Running Web Start</a>.
</dd>
<dt class="bold"><a id="sdktools__jconsole" name="sdktools__jconsole"></a>jconsole (JConsole Monitoring
and Management Tool)</dt>
<dd>Monitors local
and remote JVMs using a GUI. JMX-compliant.
</dd>
<dt class="bold"><a id="sdktools__jdb" name="sdktools__jdb"></a>jdb (Java Debugger)</dt>
<dd>Helps debug your Java programs.
</dd>
<dt class="bold"><a id="sdktools__jdmpview" name="sdktools__jdmpview"></a>jdmpview (Cross-platform dump
formatter)</dt>
<dd>Analyzes dumps. For more information, see the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>.
</dd>
<dt class="bold"><a id="sdktools__keytool" name="sdktools__keytool"></a>keytool (Key and Certificate Management
Tool)</dt>
<dd>Manages a keystore (database) of private keys and their associated
X.509 certificate chains that authenticate the corresponding public
keys.
</dd>
<dt class="bold"><a id="sdktools__native2ascii" name="sdktools__native2ascii"></a>native2ascii (Native-To-ASCII
Converter)</dt>
<dd>Converts a native encoding file to an ASCII file that contains
characters encoded in either Latin-1 or Unicode, or both.
</dd>
<dt class="bold"><a id="sdktools__policytool" name="sdktools__policytool"></a>policytool (Policy File Creation
and Management Tool)</dt>
<dd>Creates and modifies the external policy configuration files that
define your installation's Java security
policy.
</dd>
<dt class="bold"><a id="sdktools__rmic" name="sdktools__rmic"></a>rmic (Java Remote Method Invocation (RMI) Stub Converter)</dt>
<dd>Generates stubs, skeletons, and ties for remote objects. Includes
RMI over Internet Inter-ORB Protocol (RMI-IIOP) support.
</dd>
<dt class="bold"><a id="sdktools__rmid" name="sdktools__rmid"></a>rmid (RMI activation system daemon)</dt>
<dd>Starts the activation system daemon so that objects can be registered
and activated in a Java virtual
machine (JVM).
</dd>
<dt class="bold"><a id="sdktools__rmiregistry" name="sdktools__rmiregistry"></a>rmiregistry (Java remote object registry)</dt>
<dd>Creates and starts a remote object registry on the specified port
of the current host.
</dd>
<dt class="bold"><a id="sdktools__schemagen" name="sdktools__schemagen"></a>schemagen</dt>
<dd>Creates a schema file for each namespace referenced in your Java classes.
</dd>
<dt class="bold"><a id="sdktools__serialver" name="sdktools__serialver"></a>serialver (Serial Version Command)</dt>
<dd>Returns the serialVersionUID for one or more classes in a format
that is suitable for copying into an evolving class.
</dd>
<dt class="bold"><a id="sdktools__tnameserv" name="sdktools__tnameserv"></a>tnameserv (Common Object Request
Broker Architecture (CORBA) transient naming service)</dt>
<dd>Starts the CORBA transient naming service.
</dd>
<dt class="bold"><a id="sdktools__wsgen" name="sdktools__wsgen"></a>wsgen</dt>
<dd>Generates JAX-WS portable artifacts used in JAX-WS Web services.
</dd>
<dt class="bold"><a id="sdktools__wsimport" name="sdktools__wsimport"></a>wsimport</dt>
<dd>Generates JAX-WS portable artifacts from a Web Services Description
Language (WSDL) file.
</dd>
<dt class="bold"><a id="sdktools__xjc" name="sdktools__xjc"></a>xjc</dt>
<dd>Compiles XML Schema files.
</dd>
</dl>
</dd>
<dt class="bold">Include Files</dt>
<dd>C headers for JNI programs.
</dd>
<dt class="bold">Demos</dt>
<dd>The <samp>demo</samp> directory contains a number of subdirectories
containing sample source code, demos, applications, and applets that
you can use. <span>From Version 6, the
RMI-IIOP demonstration is not included with the SDK.</span>
</dd>
<dt class="bold">copyright</dt>
<dd>The copyright notice for the SDK for Linux software.
</dd>
<dt class="bold">License</dt>
<dd>
<p>The
License file, /opt/ibm/java-&lt;arch&gt;-60/docs/content/<em>&lt;locale&gt;</em>/LA_<em>&lt;locale&gt;</em>,
contains the license agreement for the SDK for Linux software (where <em>&lt;locale&gt;</em> is
the name of your locale, for example en). To view or print the license
agreement, open the file in a Web browser.</p>
</dd>
</dl>
<a name="lin_install_config"></a>
<h1 id="lin_install_config"><a href="#ToC_13">Installing and configuring the SDK and Runtime Environment</a></h1>
<div>
<p>You can install the IBM Java SDK and Runtime Environment from either
an RPM or a .tgz file. Unless you want to allow all the users on the
workstation to access this Java installation,
use the .tgz installation method. If you do not have root access,
use the .tgz file.</p></div>
<p>If you install using an RPM file, the Java files
are installed in /opt/ibm/java-&lt;arch&gt;-60/.
The examples in this guide assume that you have installed Java in this directory.</p>
<a name="upgrading"></a>
<h2 id="upgrading"><a href="#ToC_14">Upgrading the SDK</a></h2>
<div>
<p>If you are upgrading the SDK from a previous release, back
up all the configuration files and security policy files before you
start the upgrade.</p></div>
<p>
<a name="wq15"></a>
<h3 id="wq15">What to do next</h3>
<p>After the upgrade, you might have to restore or reconfigure
these files because they might have been overwritten during the upgrade
process. Check the syntax of the new files before restoring the original
files because the format or options for the files might have changed.</p></p>
<a name="installredhat4"></a>
<h2 id="installredhat4"><a href="#ToC_16">Installing on Red Hat Enterprise Linux (RHEL) 4</a></h2>
<div>
<p>The SDK depends on shared libraries that are not installed by default
for Red Hat Enterprise Linux (RHEL).</p></div><a id="idx1" name="idx1"></a><a id="idx2" name="idx2"></a>
<p>
<a name="wq16"></a>
<h3 id="wq16">About this task</h3>
<p>In RHEL 4, the RPMs that contain these libraries are:</p></p>
<ul>
<li><samp class="xph">compat-libstdc++-33-3.2.3</samp> and <samp class="xph">xorg-x11-deprecated-libs-6.8.1</samp> 
(Platforms other than zSeries)</li>
<li><samp class="xph">compat-libstdc++-295-2.95.3</samp>  and <samp class="xph">xorg-x11-deprecated-libs-6.8.1</samp> (zSeries)</li></ul>
<p>To include these libraries during RHEL 4 installation:</p>
<p>
<a name="wq17"></a>
<h3 id="wq17">Procedure</h3></p>
<ol type="1">
<li>When you reach the <strong>Package Defaults</strong> screen,
select <strong>Customize the set of packages to be installed</strong>.</li>
<li>At the <strong>Package Group Selection</strong> screen, under <strong>X
Windows System</strong>, choose <strong>Details</strong> and make
sure that you have selected <samp class="xph">xorg-x11-deprecated-libs</samp></li>
<li>Under the <strong>Development</strong> options, select <strong>Legacy
Software Development</strong>.</li></ol>
<a name="installredhat5"></a>
<h2 id="installredhat5"><a href="#ToC_19">Installing on Red Hat Enterprise Linux (RHEL)
5</a></h2>
<div>
<p>The SDK depends on shared libraries that are not installed
by default for Red Hat Enterprise Linux (RHEL).</p></div><a id="idx3" name="idx3"></a><a id="idx4" name="idx4"></a><a id="idx5" name="idx5"></a>
<p>
<a name="wq19"></a>
<h3 id="wq19">About this task</h3>
<p>In RHEL 5, these RPMs contain the shared libraries:</p></p>
<ul>
<li><samp class="xph">compat-libstdc++-33-3.2.3</samp> (Platforms other than zSeries)</li>
<li><samp class="xph">compat-libstdc++-295-2.95.3</samp> 
(zSeries)</li></ul>
<p>To include these libraries during RHEL 5 installation:</p>
<p>
<a name="wq20"></a>
<h3 id="wq20">Procedure</h3></p>
<ol type="1">
<li>At the software selection screen, select <strong>Customize
now</strong>.</li>
<li>On the next screen, in the left panel, select <strong>Base
System</strong>; in the right panel, select <strong>Legacy Software
Support</strong>. These selections install the compat-libstdc++ packages.</li></ol>
<a name="lin_redhat_selinux"></a>
<h3 id="lin_redhat_selinux"><a href="#ToC_22">Running Java with SELinux on RHEL 5</a></h3>
<div>
<p><span>You can run the IBM SDK for Java on Red Hat Enterprise Linux Version
5 with SELinux enabled on all platforms except PPC without any restrictions.
For PPC platforms, Java must be installed in the default directory
or you must enable it manually.</span></p></div><a id="idx6" name="idx6"></a>
<p>
<a name="wq22"></a>
<h4 id="wq22">About this task</h4>
<p>To
enable Java manually on PPC platforms, enter this command: </p>
<pre class="xmp">chcon -R -t texrel_shlib_t <em>&lt;path_of_sdk&gt;</em></pre>
<p>Where <em>&lt;path_of_sdk&gt;</em> is
the path where Java is installed.</p>
<p>For more information about
SELinux, see <a href="http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/Deployment_Guide-en-US/ch-selinux.html" target="_blank">Introduction to SELinux</a> in the Red Hat documentation.</p></p>
<a name="lin_install_ubuntu"></a>
<h2 id="lin_install_ubuntu"><a href="#ToC_24">Installing on Ubuntu</a></h2>
<div>
<p>The IBM SDK for Java is not available as a <samp>.deb</samp> package.
Use the <samp>.tgz</samp> package to install the SDK on Ubuntu.</p></div>
<p>For information about installing using the <samp>.tgz</samp> package,
see <a href="#lin_tgz_install">Installing from a <samp>.tgz</samp> file</a>.</p>
<p>
<a name="wq24"></a>
<h3 id="wq24">Errors installing using RPM</h3>
<p>The
following error is displayed if you try to install using RPM:</p>
<pre class="xmp">error: Failed dependencies:
        glibc &gt;= 2.3 is needed by ibm-java-<em>&lt;arch&gt;</em>-sdk-6.0-5.0.<em>&lt;arch&gt;</em>
        libstdc++.so.5 is needed by ibm-java-<em>&lt;arch&gt;</em>-sdk-6.0-5.0.<em>&lt;arch&gt;</em>
        /bin/sh is needed by ibm-java-<em>&lt;arch&gt;</em>-sdk-6.0-5.0.<em>&lt;arch&gt;</em></pre>
<p>You
can force RPM installation by using the <strong>--nodeps</strong> command-line
option:</p>
<pre class="xmp">rpm -ivh --nodeps <samp>ibm-java-<em>&lt;arch&gt;</em>-sdk-6.0-5.0.<em>&lt;arch&gt;</em>.rpm</samp></pre><p class="indatacontent"> In
this example, <em>&lt;arch&gt;</em> is the architecture of
your system.</p></p>
<a name="lin_install"></a>
<h2 id="lin_install"><a href="#ToC_26">Installing a 32-bit SDK on 64-bit architecture</a></h2>
<div>
<p>To run the SDK, you must install the correct versions of all libraries
required by the SDK, either 32- or 64-bit.</p></div>
<p>
<a name="wq25"></a>
<h3 id="wq25">About this task</h3>
<p>In RHEL4, the 64-bit versions of the packages are available in
the <strong>Compatibility Arch Support</strong> package group.</p>
<p>You
can use the RPM tool to check which versions of the packages you have installed
by adding the option <samp class="xph">--queryformat "%{NAME}.%{ARCH}\n"</samp> to
your RPM command. For example:</p></p>
<pre class="xmp">/home/username : rpm --queryformat "%{NAME}.%{ARCH}\n" -q libstdc++
libstdc++.x86_64
libstdc++.i386</pre>
<a name="lin_rpm_install"></a>
<h2 id="lin_rpm_install"><a href="#ToC_28">Installing from a <samp>.rpm</samp> file</a></h2>
<div>
<p>A procedure for installing from a <samp>.rpm</samp> file.</p></div>
<p>
<a name="wq26"></a>
<h3 id="wq26">About this task</h3>
<p>To upgrade your JVM using the rpm tool,
you must uninstall any previous version. To install two versions of
the JVM in different locations, use the rpm <strong>--force</strong> option
to ignore the version conflict. Alternatively, install the JVM from the <samp>.tgz</samp> file.</p></p>
<p>
<a name="wq27"></a>
<h3 id="wq27">Procedure</h3></p>
<ol type="1">
<li>Open a shell prompt, making sure that  you are root.</li>
<li>At a shell prompt, type <samp class="xph">rpm -ivh &lt;RPM file&gt;</samp>.  For example: 
<pre class="xmp">rpm -ivh ibm-java-&lt;arch&gt;-sdk-6.0-5.0.&lt;arch&gt;.rpm</pre> or 
<pre class="xmp">rpm -ivh ibm-java-&lt;arch&gt;-jre-6.0-5.0.&lt;arch&gt;.rpm</pre>

<p>Where <samp class="xph">&lt;arch&gt;</samp> represents
your architecture: i386, x86_64, ppc, ppc64, s390, or s390x.</p></li></ol>
<a name="lin_tgz_install"></a>
<h2 id="lin_tgz_install"><a href="#ToC_31">Installing from a <samp>.tgz</samp> file</a></h2>
<div>
<p>A procedure for installing from a <samp>.tgz</samp> file.</p></div>
<p>
<a name="wq29"></a>
<h3 id="wq29">Procedure</h3></p>
<ol type="1">
<li>Create a directory to store the Java package files. The examples in this guide
assume that you have installed in /opt/ibm/java-&lt;arch&gt;-60/. In the rest
of the guide, replace /opt/ibm/java-&lt;arch&gt;-60/ with
the directory in which you installed Java.</li>
<li>At a shell prompt, type <samp class="xph">tar -zxvf &lt;.tgz file&gt;</samp>.  
<pre class="xmp">tar -zxvf ibm-java-sdk-6.0-5.0-linux-&lt;arch&gt;.tgz</pre> or 
<pre class="xmp">tar -zxvf ibm-java-jre-6.0-5.0-linux-&lt;arch&gt;.tgz</pre>

<p>Where <samp class="xph">&lt;arch&gt;</samp> represents your architecture:
i386, x86_64, ppc, ppc64, s390, or s390x.</p></li>
<li>If you are running Security-Enhanced Linux (SELinux), you must identify
the Java shared libraries to
the system. Type:
<pre class="xmp">chcon -R -t texrel_shlib_t /opt/ibm/java-&lt;arch&gt;-60/jre
chcon -R -t texrel_shlib_t /opt/ibm/java-&lt;arch&gt;-60/bin
chcon -R -t texrel_shlib_t /opt/ibm/java-&lt;arch&gt;-60/lib</pre></li></ol>
<a name="lin_jpackage_install"></a>
<h2 id="lin_jpackage_install"><a href="#ToC_33">Using a JPackage compatible format</a></h2>
<div>
<p>The IBM SDK
for Linux, v6 is also
available in a JPackage compatible format.</p></div>
<p>
<a name="wq31"></a>
<h3 id="wq31">Before you begin</h3>
<p>To simplify managing the SDK, the various components of
it are now available as separate RPMs: the base Java Runtime Environment, Development Kit, Plug-in,
JDBC, Demo, Sound, Source, and Fonts. "jpackage-utils" RPM (downloadable
from <a href="http://jpackage.org" target="_blank">http://jpackage.org</a>), which
allows managing multiple Java RPMs
on a system, is a prerequisite for the IBM SDKs.
For more information about the JPackage specification, see <a href="http://jpackage.org" target="_blank">http://jpackage.org</a>.</p>
<p>If you install the SDK using JPackage, it
is not installed in the default location. See the &quot;Directory Structure&quot; section
of the <cite>JPackage Java&trade; infrastructure design and packaging policy</cite> for
details about the default JPackage installation location: <a href="http://www.jpackage.org/cgi-bin/viewvc.cgi/src/jpackage-utils/doc/jpackage-1.5-policy.xhtml?root=jpackage&amp;view=co">http://www.jpackage.org/cgi-bin/viewvc.cgi/src/jpackage-utils/doc/jpackage-1.5-policy.xhtml?root=jpackage&amp;view=co</a></p>
<p>jpackage-utils version 1.5.38 or above
is required to install the IBM SDK
for Linux, v6.</p>
<p>JPackage is not supported on the SLES9, SLES10,
or SLES11 platforms.</p></p>
<a name="lin_config"></a>
<h2 id="lin_config"><a href="#ToC_35">Configuring the SDK and
Runtime Environment for Linux</a></h2>
<div>
<p>Inconsistencies in the font encodings on Red Hat Advanced Server</p></div>
<a name="wq32"></a>
<div class="note-noindent" id="wq32">
<span class="notetitle">Note:</span> <span class="notebody"><strong><span class="bold-italic">(For Linux IA 32-bit Chinese users only)</span></strong> Because
of inconsistencies in the font encodings on Red Hat Advanced Server, when
you install for an environment in which you want Chinese to be the default
language, it is better to install with a default language of English and then
change to Chinese after the installation is complete. Otherwise, you might
find that the Chinese fonts do not display.</span></div>
<a name="pathcons"></a>
<h3 id="pathcons"><a href="#ToC_36">Setting the path</a></h3>
<div>
<p>If you alter the <strong>PATH</strong> environment
variable, you will override any existing Java launchers
in your path.</p></div>
<p>
<a name="wq33"></a>
<h4 id="wq33">About this task</h4>
<p>The <strong>PATH</strong> environment variable enables Linux to find programs
and utilities, such as javac, java,
and javadoc tool, from any current
directory. To display the current value of your <strong>PATH</strong>,
type the following at a command prompt: </p>
<pre class="xmp">echo $PATH</pre>
<p>To add the Java launchers
to your path: 
</p>
<ol type="1">
<li>Edit the shell startup file in your home directory (typically
.bashrc, depending on your shell) and add the absolute paths to the <strong>PATH</strong> environment
variable; for example:  
<pre class="xmp">export PATH=/opt/ibm/java-&lt;arch&gt;-60/bin:/opt/ibm/java-&lt;arch&gt;-60/jre/bin:$PATH</pre></li>
<li>Log on again or run the updated shell script to activate the new <strong>PATH</strong> environment
variable.</li></ol></p>
<p>
<a name="wq35"></a>
<h4 id="wq35">Results</h4>
<p>After setting the path, you can run a tool by typing its name
at a command prompt from any directory. For example, to compile the
file <samp>Myfile.Java</samp>, at a command prompt, type:</p></p>
<pre class="xmp">javac Myfile.Java</pre>
<a name="classpath"></a>
<h3 id="classpath"><a href="#ToC_39">Setting the class path</a></h3>
<div>
<p>The class path tells the SDK tools, such as java, javac,
and the javadoc tool, where to find the Java class libraries.</p></div>
<p>
<a name="wq36"></a>
<h4 id="wq36">About this task</h4>
<p>You should set the class path explicitly
only if: 
</p>
<ul>
<li>You require a different library or class file, such as one that
you develop, and it is not in the current directory.</li>
<li>You change the location of the <samp>bin</samp> and <samp>lib</samp> directories
and they no longer have the same parent directory.</li>
<li>You plan to develop or run applications using different runtime
environments on the same system.</li></ul>
<p>To display the current value of your <strong>CLASSPATH</strong> environment
variable, type the following command at a shell prompt: </p>
<pre class="xmp">  echo $CLASSPATH</pre>
<p>If you develop
and run applications that use different runtime environments, including
other versions that you have installed separately, you must set the <strong>CLASSPATH</strong> and <strong>PATH</strong> explicitly
for each application. If you run multiple applications simultaneously
and use different runtime environments, each application must run
in its own shell prompt.</p></p>
<a name="dt2mg46"></a>
<h3 id="dt2mg46"><a href="#ToC_41">Updating your SDK or JRE for daylight saving time changes</a></h3>
<div>
<p>You can apply recent changes to daylight saving time using
the IBM Time Zone Update Utility
for Java (JTZU).</p></div>
<p>
<a name="wq37"></a>
<h4 id="wq37">About this task</h4>
<p>Many countries around the world use a daylight saving
time (DST) convention. Typically, clocks move forward by one hour
during the summer months to create more daylight hours during the
afternoon and less during the morning. This practice has many implications,
including the need to adjust system clocks in computer systems. Occasionally,
countries change their DST start and end dates. These changes can
affect the date and time functions in applications, because the original
start and end dates are programmed into the operating system and in Java software. To avoid this problem
you must update operating systems and Java installations
with the new DST information.</p>
<p>The Olson time zone database is
an external resource that compiles information about the time zones
around the world. This database establishes standard names for time
zones, such as "America/New_York", and provides regular updates to
time zone information that can be used as reference data. To ensure
that Java JREs and SDKs contain
up to date DST information, IBM incorporates
the latest Olson update into each Java service
refresh. To find out which Olson time zone update is included for
a particular service refresh, see <a href="https://www.ibm.com/developerworks/java/jdk/dst/olson_table.html">https://www.ibm.com/developerworks/java/jdk/dst/olson_table.html</a>.</p>
<p>If
a DST change has been introduced since the last service refresh, you
can use JTZU to directly update your Java installation.
You can also use this tool to update your installation if you are
unable to move straight to the latest service refresh. JTZU is available
from IBM developerWorks&reg; using the following
link: <a href="https://www.ibm.com/developerworks/java/jdk/dst/jtzu.html">https://www.ibm.com/developerworks/java/jdk/dst/jtzu.html</a>.</p></p>
<p>
<a name="wq38"></a>
<h4 id="wq38">Results</h4>
<p>After updating your Java installation
with any recent DST changes, your application can handle time and
date calculations correctly.</p></p>
<a name="lin_uninstall"></a>
<h2 id="lin_uninstall"><a href="#ToC_44">Uninstalling the SDK and Runtime Environment for Linux</a></h2>
<div>
<p>The process that you use to remove the SDK and Runtime Environment for Linux depends
on what type of installation you used.</p></div>
<p>See <a href="#uninstrpm">Uninstalling the Red Hat Package
Manager (RPM) package</a> or <a href="#uninsttar">Uninstalling
the compressed Tape Archive (TAR) package</a> for instructions.</p>
<a name="uninstrpm"></a>
<h3 id="uninstrpm"><a href="#ToC_45">Uninstalling the Red Hat Package Manager (RPM) package</a></h3>
<div>
<p>A procedure for uninstalling the Red Hat Package Manager
(RPM) package.</p></div><a id="idx7" name="idx7"></a><a id="idx8" name="idx8"></a><a id="idx9" name="idx9"></a>
<p>
<a name="wq39"></a>
<h4 id="wq39">About this task</h4>
<p>To uninstall the SDK or Runtime Environment for Linux if you installed
the installable RPM package:</p></p>
<p>
<a name="wq40"></a>
<h4 id="wq40">Procedure</h4></p>
<ol type="1">
<li>To check which RPM packages you have installed, enter: <samp class="xph">rpm -qa | grep -i java</samp> 

<p>You will
see a list of any IBM Java packages
that you have installed; for example:</p>
<pre class="xmp">ibm-java-&lt;arch&gt;-jre-6.0-5.0.<em>&lt;arch&gt;</em>
ibm-java-&lt;arch&gt;-sdk-6.0-5.0.<em>&lt;arch&gt;</em></pre>

<p>This output tells you which packages
you can uninstall, using the <samp class="xph">rpm -e</samp> command; for
example: </p>
<pre class="xmp">rpm -e ibm-java-&lt;arch&gt;-jre-6.0-5.0.<em>&lt;arch&gt;</em>
rpm -e ibm-java-&lt;arch&gt;-sdk-6.0-5.0.<em>&lt;arch&gt;</em></pre>

<p>Alternatively,
you can use a graphical tool such as kpackage or yast2</p></li>
<li>Remove from your <strong>PATH</strong> statement the
directory in which you installed the SDK and Runtime Environment. </li>
<li>(Linux IA
32-bit and PPC32 only) If you installed the Java Plug-in,
remove the Java Plug-in files from the Web
browser directory.</li></ol>
<a name="uninsttar"></a>
<h3 id="uninsttar"><a href="#ToC_48">Uninstalling the compressed Tape Archive
(TAR) package</a></h3>
<div>
<p>A list of the steps to remove the IBM SDK
for Linux, v6 that
was extracted from the compressed package.</p></div><a id="idx10" name="idx10"></a><a id="idx11" name="idx11"></a>
<p>
<a name="wq42"></a>
<h4 id="wq42">Procedure</h4></p>
<ol type="1">
<li>Remove the SDK or Runtime Environment  files
from the directory in which you installed the SDK or Runtime Environment.</li>
<li>Remove from your <strong>PATH</strong> statement the
directory in which you installed the SDK or Runtime Environment.</li>
<li>Log on again or run the updated shell script to activate
the new <strong>PATH</strong> setting.</li>
<li>(Linux IA
32-bit and PPC32 only) If you installed the Java Plug-in,
remove the Java Plug-in files from the Web browser directory.</li></ol>
<a name="running_applications"></a>
<h1 id="running_applications"><a href="#ToC_50">Running Java applications</a></h1>
<div>
<p>Java applications can be started using the java launcher
or through JNI. Settings are passed to a Java application using command-line arguments,
environment variables, and properties files.</p></div>
<a name="invint"></a>
<h2 id="invint"><a href="#ToC_51">The java and javaw commands</a></h2>
<div>
<p>An overview of the java and javaw commands.</p></div>
<p>
<a name="wq44"></a>
<h3 id="wq44">Purpose</h3>
<p>The java and javaw tools
start a Java application by starting a Java Runtime Environment and loading a specified
class.</p>
<p>The javaw command
is identical to java, except that javaw has
no associated console window. Use javaw when you
do not want a command prompt window to be displayed. The javaw launcher
displays a window with error information if it fails.</p></p>
<p>
<a name="wq45"></a>
<h3 id="wq45">Usage</h3>
<p>The JVM searches for the initial class
(and other classes that are used) in three sets of locations: the
bootstrap class path, the installed extensions, and the user class
path. The arguments that you specify after the class name or jar file
name are passed to the main function.</p>
<p>The java and javaw commands
have the following syntax:</p></p>
<pre class="xmp">java [ <em>options</em> ] <em>&lt;class&gt;</em> [ <em>arguments ...</em> ]
java [ <em>options</em> ] -jar <em>&lt;file.jar&gt;</em> [ <em>arguments ...</em> ]
javaw [ <em>options</em> ] <em>&lt;class&gt;</em> [ arguments ... ]
javaw [ <em>options</em> ] -jar <em>&lt;file.jar&gt;</em> [ <em>arguments ...</em> ]</pre>
<p>
<a name="wq46"></a>
<h3 id="wq46">Parameters</h3></p>
<dl class="parml">
<dt class="bold">[<em>options</em>]</dt>
<dd>Command-line options to be passed to the runtime environment.
</dd>
<dt class="bold"><em>&lt;class&gt;</em></dt>
<dd>Startup class. The class must contain a main() method.
</dd>
<dt class="bold"><em>&lt;file.jar&gt;</em></dt>
<dd>Name of the jar file to start. It is used only with the <strong>-jar</strong> option.
The named jar file must contain class and resource files for the application,
with the startup class indicated by the Main-Class manifest header.
</dd>
<dt class="bold">[<em>arguments ...</em>]</dt>
<dd>Command-line arguments to be passed to the main() function
of the startup class.
</dd>
</dl>
<a name="build_number"></a>
<h3 id="build_number"><a href="#ToC_55">Obtaining version information</a></h3>
<div>
<p>You obtain The IBM build and version number for your Java installation
using the <strong>-version</strong> option. <span>You
can also obtain version information for all <samp>jar</samp> files
on the class path by using the <strong>-Xjarversion</strong> option.</span></p></div>
<p>
<a name="wq47"></a>
<h4 id="wq47">Procedure</h4></p>
<ol type="1">
<li>Open a shell prompt.</li>
<li>Type the following command: 
<pre class="xmp">java -version</pre> You will see information similar to:
<pre class="xmp">java version "1.6.0-internal"
Java(TM) SE Runtime Environment (build 20070329_01)
IBM J9 VM (build 2.4, J2RE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260-20070326_12091 (JIT enabled)
J9VM - 20070326_12091_lHdSMR
JIT  - dev_20070326_1800
GC   - 20070319_AA)</pre>Exact build dates and versions will change.</li></ol>
<p>
<a name="wq49"></a>
<h4 id="wq49">What to do next</h4>
<p>You can also list the version information
for all available <samp>jar</samp> files on the class path, the boot
class path, and in the extensions directory. Type the following command:</p></p>
<pre class="xmp">java -Xjarversion</pre>
<p>You
will see information similar to:</p>
<pre class="xmp">...
/opt/ibm/java-&lt;arch&gt;-60/jre/lib/ext/ibmpkcs11impl.jar  VERSION: 1.0 build_20070125
/opt/ibm/java-&lt;arch&gt;-60/jre/lib/ext/dtfjview.jar
/opt/ibm/java-&lt;arch&gt;-60/jre/lib/ext/xmlencfw.jar  VERSION: 1.00, 20061011  LEVEL: -20061011

...</pre>
<p>The information available varies for each <samp>jar</samp> file
and is taken from the <strong>Implementation-Version</strong> and <strong>Build-Level</strong> properties
in the manifest of the <samp>jar</samp> file.</p>
<a name="specifying_options"></a>
<h3 id="specifying_options"><a href="#ToC_58">Specifying Java options and system properties</a></h3>
<div>
<p>You can specify Java options
and system properties on the command line, by using an options file,
or by using an environment variable.</p></div>
<p>
<a name="wq50"></a>
<h4 id="wq50">About this task</h4>
<p>These methods of specifying Java options
are listed in order of precedence. Rightmost options on the command
line have precedence over leftmost options; for example, if you specify:</p></p>
<pre class="xmp">java -Xint -Xjit myClass</pre>
<p>The <strong>-Xjit</strong> option
takes precedence.</p>
<p>
<a name="wq51"></a>
<h4 id="wq51">Procedure</h4></p>
<ol type="1">
<li>By specifying the option or property on the command line. For example: 
<pre class="xmp">java -Dmysysprop1=tcpip -Dmysysprop2=wait -Xdisablejavadump MyJavaClass</pre></li>
<li>By creating a file that contains the options, and specifying
it on the command line using <strong>-Xoptionsfile=</strong><em>&lt;file&gt;</em>.</li>
<li>By creating an environment variable called <strong>IBM_JAVA_OPTIONS</strong> containing
the options. For example: 
<pre class="xmp">export IBM_JAVA_OPTIONS="-Dmysysprop1=tcpip -Dmysysprop2=wait -Xdisablejavadump"</pre></li></ol>
<a name="standard_options"></a>
<h3 id="standard_options"><a href="#ToC_61">Standard options</a></h3>
<div>
<p>The definitions for the standard options.</p></div><a id="idx12" name="idx12"></a><a id="idx13" name="idx13"></a><a id="idx14" name="idx14"></a><a id="idx15" name="idx15"></a><a id="idx16" name="idx16"></a><a id="idx17" name="idx17"></a><a id="idx18" name="idx18"></a><a id="idx19" name="idx19"></a><a id="idx20" name="idx20"></a><a id="idx21" name="idx21"></a><a id="idx22" name="idx22"></a><a id="idx23" name="idx23"></a><a id="idx24" name="idx24"></a><a id="idx25" name="idx25"></a><a id="idx26" name="idx26"></a>
<p>
<p>See <a href="#commands_jvm">JVM command-line options</a> for
information about nonstandard (-X) options.</p></p>
<p></p>
<dl class="parml">
<dt class="bold"><strong>-agentlib</strong>:<em>&lt;libname&gt;</em>[=<em>&lt;options&gt;</em>]</dt>
<dd>Loads a native agent library <em>&lt;libname&gt;</em>;
for example <strong>-agentlib:hprof</strong>.  For more information,
specify <strong>-agentlib:jdwp=help</strong> and <strong>-agentlib:hprof=help</strong> on
the command line.
</dd>
<dt class="bold"><strong>-agentpath</strong>:<em>libname</em>[=<em>&lt;options&gt;</em>]</dt>
<dd>Loads a native agent library by full path name.
</dd>
<dt class="bold"><strong>-cp</strong> <em>&lt;directories and .zip or
.jar files separated by </em>:<em>&gt;</em></dt>
<dd>Sets the search path for application classes and resources. If <strong>-classpath</strong> and <strong>-cp</strong> are
not used and the <strong>CLASSPATH</strong> environment variable
is not set, the user class path is, by default, the current directory
(.).
</dd>
<dt class="bold"><strong>-classpath</strong> <em>&lt;directories and .zip
or .jar files separated by </em>:<em>&gt;</em></dt>
<dd>Sets the search path for application classes and resources. If <strong>-classpath</strong> and <strong>-cp</strong> are
not used and the <strong>CLASSPATH</strong> environment variable
is not set, the user class path is, by default, the current directory
(.).
</dd>
<dt class="bold"><strong>-D</strong><em>&lt;property name&gt;</em>=<em>&lt;value&gt;</em></dt>
<dd>Sets a system property.
</dd>
<dt class="bold"><strong>-help or -?</strong></dt>
<dd>Prints a usage message.
</dd>
<dt class="bold"><strong>-javaagent</strong>:<em>&lt;jarpath&gt;</em>[=<em>&lt;options&gt;</em>] </dt>
<dd>Load a Java programming language agent.
For more information, see the java.lang.instrument API
documentation.
</dd>
<dt class="bold"><strong>-jre-restrict-search</strong></dt>
<dd>Include user private JREs in the version search.
</dd>
<dt class="bold"><strong>-no-jre-restrict-search</strong></dt>
<dd>Exclude user private JREs in the version search.
</dd>
<dt class="bold"><strong>-showversion</strong></dt>
<dd>Prints product version and continues.
</dd>
<dt id="standard_options__verbose" class="bold">
<a name="standard_options__verbose"></a><strong>-verbose</strong>:<em>&lt;option&gt;</em>[,<em>&lt;option&gt;</em>...]</dt>
<dd>Enables verbose output. Separate multiple options using commas.
The available options are:

<dl class="parml">
<dt class="bold">class</dt>
<dd>Writes an entry to stderr for each class that is loaded.
</dd>
<dt class="bold">gc</dt>
<dd>Writes verbose garbage collection
information to stderr. Use <strong>-Xverbosegclog</strong> (see <a href="#commands_gc">Garbage Collector command-line options</a> for
more information)  to control the output. See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> for more information.
</dd>
<dt class="bold">jni</dt>
<dd>Writes information to stderr describing the JNI services called
by the application and JVM.
</dd>
<dt class="bold">sizes</dt>
<dd>Writes information to stderr describing the active memory usage
settings.
</dd>
<dt class="bold">stack</dt>
<dd>Writes information to stderr describing the Java and
C stack usage for each thread.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-version</strong></dt>
<dd>Prints product version.
</dd>
<dt class="bold"><strong>-version</strong>:<em>&lt;value&gt;</em></dt>
<dd>Requires the specified version to run, for example &quot;1.5&quot;.
</dd>
<dt class="bold"><strong>-X</strong></dt>
<dd>Prints help on nonstandard options.
</dd>
</dl>
<a name="globalization"></a>
<h3 id="globalization"><a href="#ToC_62">Globalization of the java command</a></h3>
<div>
<p>The java and javaw launchers
accept arguments and class names containing any character that is in the character
set of the current locale. You can also specify any Unicode character in the
class name and arguments by using Java escape sequences.</p></div>
<p>To do this, use the <strong>-Xargencoding</strong> command-line option.</p>
<dl class="parml">
<dt class="bold"><strong>-Xargencoding</strong></dt>
<dd>Use argument encoding. To specify a Unicode character, use escape sequences
in the form <samp>\u####</samp>, where # is a hexadecimal digit (0 to 9, A to
F).
</dd>
<dt class="bold"><strong>-Xargencoding:utf8</strong></dt>
<dd>Use UTF8 encoding.
</dd>
<dt class="bold"><strong>-Xargencoding:latin</strong></dt>
<dd>Use ISO8859_1 encoding.
</dd>
</dl>
<p>For example, to specify a class called HelloWorld using Unicode encoding
for both capital letters, use this command:</p>
<pre class="xmp">java -Xargencoding '\u0048ello\u0057orld'</pre>
<p>The java and javaw commands provide
translated messages. These messages differ based on the locale in which Java is
running. The detailed error descriptions and other debug information that
is returned by java is in English.</p>
<a name="setlpath"></a>
<h2 id="setlpath"><a href="#ToC_63">Working with the <strong>LD_LIBRARY_PATH</strong> environment variable</a></h2>
<div>
<p>The <strong>LD_LIBRARY_PATH</strong> environment variable tells Linux applications,
such as the JVM, where to find shared libraries when they are located
in a different directory from the directory that is specified in the
header section of the program.</p></div>
<p>The shared libraries for the SDK are in <samp>/usr/java6/jre/lib/&lt;platform&gt;/</samp> and <samp>/usr/java6/jre/lib/&lt;platform&gt;/j9vm</samp>,
where <samp>&lt;platform&gt;</samp> is one of:
</p>
<ul>
<li>Linux PPC 32 bit: <samp>ppc</samp></li>
<li>Linux PPC 64 bit: <samp>ppc64</samp></li>
<li>Linux 390 32 bit: <samp>s390</samp></li>
<li>Linux 390: <samp>s390x</samp></li>
<li>Linux 32 bit: <samp>i386</samp></li>
<li>Linux 64 bit: <samp>amd64</samp></li></ul>
<p>The SDK launcher programs, including java, javac,
and jar automatically search these directories.
The parent directory is usually <samp>/usr/java6/</samp>,
but packages that bundle Java might
use different directories. This path is already set by the Java launcher programs such as java, javac,
or jar.</p>
<p>Set the <strong>LD_LIBRARY_PATH</strong> if either of the following
conditions applies: 
</p>
<ul>
<li>You are using other shared libraries (including JNI native libraries
you use or develop). Set the <strong>LD_LIBRARY_PATH</strong> to include the directory
or directories that contain your libraries.</li>
<li>You are using the JNI Invocation API to call Java code from your C/C++ application. Set the <strong>LD_LIBRARY_PATH</strong> to
include the directories that contain the JVM libraries in addition
to the directories that contain your own libraries.</li></ul>
<a name="jit"></a>
<h2 id="jit"><a href="#ToC_64">The Just-In-Time (JIT) compiler</a></h2>
<div>
<p>The IBM Just-In-Time
(JIT) compiler dynamically generates machine code for frequently used
bytecode sequences in Java applications
and applets during their execution. <span>The JIT v6 compiler delivers
new optimizations as a result of compiler research, improves optimizations
implemented in previous versions of the JIT, and provides better hardware
exploitation.</span></p></div><a id="idx27" name="idx27"></a><a id="idx28" name="idx28"></a><a id="idx29" name="idx29"></a><a id="idx30" name="idx30"></a><a id="idx31" name="idx31"></a>
<p>The JIT is included in both the IBM SDK
and Runtime Environment, which is enabled by default in user applications
and SDK tools. Typically, you do not start the JIT explicitly; the
compilation of Java bytecode
to machine code occurs transparently. You can disable the JIT to help
isolate a problem. If a problem occurs when executing a Java application or an applet, you can disable
the JIT to help isolate the problem. Disabling the JIT is a temporary
measure only; the JIT is required to optimize performance.</p>
<p>For more information about the JIT, see the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>.</p>
<a name="disjit"></a>
<h3 id="disjit"><a href="#ToC_65">Disabling the JIT</a></h3>
<div>
<p>The JIT can be disabled in a number of different ways. Both command-line
options override the <strong>JAVA_COMPILER</strong> environment variable.</p></div>
<p>
<a name="wq55"></a>
<h4 id="wq55">About this task</h4>
<p>Turning off the JIT is a temporary measure that can help isolate
problems when debugging Java applications.</p></p>
<p>
<a name="wq56"></a>
<h4 id="wq56">Procedure</h4></p>
<ul>
<li>Set the <strong>JAVA_COMPILER</strong> environment variable
to <samp>NONE</samp> or the empty string before running the java application. Type
the following at a shell prompt:
<pre class="xmp">export JAVA_COMPILER=NONE</pre></li>
<li>Use the <strong>-D</strong> option on the JVM command line
to set the <strong>java.compiler</strong> property to <samp>NONE</samp> or
the empty string. Type the following at a shell prompt:
<pre class="xmp">java -Djava.compiler=NONE <em>&lt;class&gt;</em></pre></li>
<li>Use the <strong>-Xint</strong> option on the JVM command line. Type the following at a shell prompt:
<pre class="xmp">java -Xint <em>&lt;class&gt;</em></pre></li></ul>
<a name="enajit"></a>
<h3 id="enajit"><a href="#ToC_68">Enabling the JIT</a></h3>
<div>
<p>The JIT is enabled by default. You can explicitly enable the JIT
in a number of different ways. Both command-line options override the <strong>JAVA_COMPILER</strong> environment
variable.</p></div>
<p>
<a name="wq57"></a>
<h4 id="wq57">Procedure</h4></p>
<ul>
<li>Set the <strong>JAVA_COMPILER</strong> environment variable
to <samp>jitc</samp> before running the Java application. At
a shell prompt, enter:
<pre class="xmp">export JAVA_COMPILER=jitc</pre> If the <strong>JAVA_COMPILER</strong> environment variable is an
empty string, the JIT remains disabled. To disable the environment variable,
at the prompt, enter:
<pre class="xmp">unset JAVA_COMPILER</pre></li>
<li>Use the <strong>-D</strong> option on the JVM command line
to set the <strong>java.compiler</strong> property to <samp>jitc</samp>. At a prompt,
enter: 
<pre class="xmp">java -Djava.compiler=jitc <em>&lt;class&gt;</em></pre></li>
<li>Use the <strong>-Xjit</strong> option on the JVM command line. Do <strong>not</strong> specify the <strong>-Xint</strong> option at the same
time. At a prompt,
enter: 
<pre class="xmp">java -Xjit <em>&lt;class&gt;</em></pre></li></ul>
<a name="detjit"></a>
<h3 id="detjit"><a href="#ToC_70">Determining whether the JIT is enabled</a></h3>
<div>
<p>You can determine the status of the JIT using the <strong>-version</strong> option.</p></div><a id="idx32" name="idx32"></a><a id="idx33" name="idx33"></a>
<p>
<a name="wq58"></a>
<h4 id="wq58">Procedure</h4>
<p>Run the java launcher with the <strong>-version</strong> option.
Enter the following at a shell prompt: </p>
<pre class="xmp">java -version</pre><p class="indatacontent"> 
<br />If
the JIT is not in use, a message is displayed that includes the following:
<br /></p>
<pre class="xmp">(JIT disabled)</pre>
<br /><p class="indatacontent">If
the JIT is in use, a message is displayed that includes the following:
<br /></p>
<pre class="xmp">(JIT enabled)</pre></p>
<p>
<a name="wq59"></a>
<h4 id="wq59">What to do next</h4>
<p>For more information about the JIT, see the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>.</p></p>
<a name="garbage"></a>
<h2 id="garbage"><a href="#ToC_73">Specifying garbage collection policy</a></h2>
<div>
<p>The Garbage Collector manages the memory used by Java and by applications running in the JVM.</p></div><a id="idx34" name="idx34"></a>
<p>When the Garbage Collector receives a request for storage, unused
memory in the heap is set aside in a process called "allocation".
 The Garbage Collector also checks for areas of memory that are no
longer referenced, and releases them for reuse. This is known as "collection".</p>
<p>The collection phase can be triggered by a memory allocation fault,
which occurs when no space is left for a storage request, or by an
explicit System.gc() call.</p>
<p>Garbage collection can significantly affect application performance,
so the IBM virtual machine provides various methods
of optimizing the way garbage collection is carried out, potentially
reducing the effect on your application.</p>
<p>For more detailed information about garbage collection,
see the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>.</p>
<a name="garbage_options"></a>
<h3 id="garbage_options"><a href="#ToC_74">Garbage collection options</a></h3>
<div>
<p>The <strong>-Xgcpolicy</strong> options control the
behavior of the Garbage Collector. They make trade-offs between throughput
of the application and overall system, and the pause times that are
caused by garbage collection.</p></div><a id="idx35" name="idx35"></a><a id="idx36" name="idx36"></a><a id="idx37" name="idx37"></a>
<p>
<p>The format of the option and its values
is:
</p>
<dl class="parml">
<dt class="bold"><strong>-Xgcpolicy:gencon</strong></dt>
<dd>Requests the combined
use of concurrent and generational GC to help minimize the time that
is spent in any garbage collection pause.
</dd>
<dt class="bold"><strong>-Xgcpolicy:optavgpause</strong></dt>
<dd>Reduces the time spent in garbage collection pauses and limits
the effect of increasing heap size on the length of the garbage collection
pause. Use <strong>optavgpause</strong> if your configuration
has a large heap.
</dd>
<dt class="bold"><strong>-Xgcpolicy:optthruput</strong></dt>
<dd>(Default value.) Delivers high throughput
to applications, but at the cost of occasional pauses.
</dd>
<dt class="bold"><strong>-Xgcpolicy:subpool</strong></dt>
<dd>(PPC and zSeries only.) Uses
an improved object allocation algorithm to achieve better performance
when allocating objects on the heap.  This option might improve performance
on large SMP systems.
</dd>
</dl></p>
<a name="garbage_compressed_refs"></a>
<h3 id="garbage_compressed_refs"><a href="#ToC_75">More effective heap usage using compressed references</a></h3>
<div>
<p>Many Java application
workloads depend on the Java heap
size. The IBM SDK for Java can use compressed references
on 64-bit platforms to decrease the size of Java objects and make more effective use of
the available space.</p></div>
<p>The IBM SDK for Java 64-bit stores object references as 64-bit
values. The <strong>-Xcompressedrefs</strong> command-line option
causes object references to be stored as 32-bit representation<span>, which reduces the 64-bit object size to be the same
as a 32-bit object.</span></p>
<p>As the 64-bit objects with compressed references
are smaller than default 64-bit objects, they occupy a smaller memory
footprint in the Java heap and improves data locality. This results
in better memory utilization and improved performance.</p>
<p>Use <strong>-Xcompressedrefs</strong> in any
of these situations:
</p>
<ul>
<li>When your Java applications
does not need more than a 25 GB Java heap.</li>
<li>When your application uses a lot of native memory and needs the
JVM to run in a small footprint.</li></ul>
<p>See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html">Diagnostics
Guide</a> for
more detailed information and hardware/operating system specific guidance
on compressed references. <span>More information is also
available in the <a href="ftp://public.dhe.ibm.com/software/webserver/appserv/was/WAS_V7_64-bit_performance.pdf" target="_blank">Websphere white paper</a> on compressed references.</span></p>
<a name="garbage_pause"></a>
<h3 id="garbage_pause"><a href="#ToC_76">Pause time</a></h3>
<div>
<p>If an object cannot be created from the available space
in the heap, the Garbage Collector attempts to tidy the heap. The
intention is that subsequent allocation requests can be satisfied
quickly.</p></div><a id="idx38" name="idx38"></a><a id="idx39" name="idx39"></a>
<p>The Garbage Collector tries to returning the heap to a state in
which the immediate and subsequent space requests are successful.
The Garbage Collector identifies unreferenced &quot;garbage&quot; objects,
and deletes them. This work takes place in a garbage collection cycle.
These cycles might introduce occasional, unexpected pauses in the
execution of application code. As applications grow in size and complexity,
and heaps become correspondingly larger, the garbage collection pause
time tends to grow in size and significance. Pause time can vary from
a few milliseconds to many seconds. The actual time depends on the
size of the heap, and the quantity of garbage.</p>
<a name="pausetimereduction"></a>
<h3 id="pausetimereduction"><a href="#ToC_77">Pause time reduction</a></h3>
<div>
<p>The JVM uses two techniques to reduce
pause times: concurrent garbage collection and generational garbage
collection.</p></div><a id="idx40" name="idx40"></a><a id="idx41" name="idx41"></a>
<p>The <strong>-Xgcpolicy:optavgpause</strong> command-line option
requests the use of concurrent garbage collection (GC) to  reduce
significantly the time that is spent in garbage collection pauses.
Concurrent GC reduces the pause time by performing some garbage collection
activities concurrently with normal program execution to minimize
the disruption caused by the collection of the heap.  The <strong>-Xgcpolicy:optavgpause</strong> option
also limits the effect of increasing the heap size on the length of
the garbage collection pause. The <strong>-Xgcpolicy:optavgpause</strong> option
is most useful for configurations that have large heaps. With the
reduced pause time, you might experience some reduction of throughput
to your applications.</p>
<p>During concurrent GC, a significant amount of time is wasted identifying
relatively long-lasting objects that cannot then be collected.  If
garbage collection concentrates on only the objects that are most
likely to be recyclable, you can further reduce pause times for some
applications. Generational GC reduces pause times by dividing the
heap into two generations: the &quot;new&quot; and the &quot;tenure&quot; areas.
Objects are placed in one of these areas depending on their age. The
new area is the smaller of the two and contains new objects; the tenure
is larger and contains older objects. Objects are first allocated
to the new area; if they have active references for long enough, they
are promoted to the tenure area.</p>
<p>Generational GC depends on most objects not lasting long. Generational
GC reduces pause times by concentrating the effort to reclaim storage
on the new area because it has the most recyclable space. Rather than
occasional but lengthy pause times to collect the entire heap, the
new area is collected more frequently and, if the new area is small
enough, pause times are comparatively short. However, generational
GC has the drawback that, over time, the tenure area might become
full. To minimize the pause time when this situation occurs, use a
combination of concurrent GC and generational GC. The <strong>-Xgcpolicy:gencon</strong> option
requests the combined use of concurrent and generational GC to help
minimize the time that is spent in any garbage collection pause.</p>
<a name="garbage_full_heap"></a>
<h3 id="garbage_full_heap"><a href="#ToC_78">Environments with very full heaps</a></h3>
<div>
<p>If the Java heap becomes nearly full, and
very little garbage can be reclaimed, requests for new objects might
not be satisfied quickly because no space is immediately available.</p></div><a id="idx42" name="idx42"></a><a id="idx43" name="idx43"></a>
<p>If the heap is operated at near-full capacity, application performance
might suffer regardless of which garbage collection options are used;
and, if requests for more heap space continue to be made, the application
might receive an OutOfMemoryError, which results
in JVM termination if the exception is not caught and handled. At
this point, the JVM produces a Javadump file for use during diagnostics.
In these conditions, you are recommended either to increase the heap
size by using the <strong>-Xmx</strong> option or to reduce the
number of objects in use.</p>
<p>For more information, see the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>.</p>
<a name="euro_symbol"></a>
<h2 id="euro_symbol"><a href="#ToC_79">Euro symbol support</a></h2>
<div>
<p>The IBM SDK and Runtime Environment set
the Euro as the default currency for those countries in the European Monetary
Union (EMU) for dates on or after 1 January, 2002. <span>From
1 January 2008, Cyprus and Malta also have the Euro as the default
currency.</span></p></div>
<p>To use the old national currency, specify <strong>-Duser.variant=PREEURO</strong> on
the Java command
line.</p>
<p>If you are running the UK, Danish, or Swedish locales and want to use the
Euro, specify <strong>-Duser.variant=EURO</strong> on the Java command
line.</p>
<a name="fallback_font"></a>
<h2 id="fallback_font"><a href="#ToC_80">Fallback font configuration files</a></h2>
<div>
<p>The Linux fallback font configuration files (<samp>fontconfig.RedHat.bfc</samp> and <samp>fontconfig.SuSE.bfc</samp>) are installed to
provide font settings suitable for new enterprise Linux distributions.</p></div>
<p>These files are for your convenience only. Their presence does not imply
that the new Linux distribution
is a supported platform for the IBM SDK
and Runtime Environment for Linux platforms, Java Technology Edition, Version 6.</p>
<a name="input_method_extensions"></a>
<h2 id="input_method_extensions"><a href="#ToC_81">Using Indian and Thai input methods</a></h2>
<div>
<p>From Version 6, the Indian and Thai input methods are not
available by default. You must manually include the input method <samp>jar</samp> files
in your Java extensions path to use the
Indian and Thai input methods.</p></div>
<p>
<a name="wq61"></a>
<h3 id="wq61">About this task</h3>
<p>In Version 5.0, the input method <samp>jar</samp> files
were included in the <a name="input_method_extensions__ext"></a><samp id="input_method_extensions__ext">jre/lib/ext</samp> directory
and were automatically loaded by the JVM. In Version 6, the input
method <samp>jar</samp> files are included in the <a name="input_method_extensions__im"></a><samp id="input_method_extensions__im">jre/lib/im</samp> directory
and you must manually add them to the Java extensions
path to enable Indian and Thai input methods.</p></p>
<p>
<a name="wq62"></a>
<h3 id="wq62">Procedure</h3></p>
<ul>
<li>Copy the <samp>indicim.jar</samp> and <samp>thaiim.jar</samp> files
from the <samp>jre/lib/im</samp> directory
to the <samp>jre/lib/ext</samp> directory.</li>
<li>Add the <samp>jre/lib/im</samp> directory
to the extension directories system property. Use the
following command-line option:
<pre class="xmp">java -Djava.ext.dirs=<samp>/opt/ibm/java-&lt;arch&gt;-60/</samp><samp>jre/lib/ext</samp>:<samp>/opt/ibm/java-&lt;arch&gt;-60/</samp><samp>jre/lib/im</samp> <em>&lt;class&gt;</em></pre></li></ul>
<p>
<a name="wq63"></a>
<h3 id="wq63">What to do next</h3>
<p>If you installed the SDK or Runtime Environment in a different directory,
replace /opt/ibm/java-&lt;arch&gt;-60/ with
the directory in which you installed the SDK or Runtime Environment.</p></p>
<a name="developing"></a>
<h1 id="developing"><a href="#ToC_85">Developing Java applications</a></h1>
<div>
<p>The SDK for Linux contains many tools and
libraries required for Java software development.</p></div>
<p> See <a href="#sdktools">Contents of the SDK</a> for details of the tools
available.</p>
<a name="xml_using"></a>
<h2 id="xml_using"><a href="#ToC_86">Using XML</a></h2>
<div>
<p>The IBM SDK contains the XML4J and
XL XP-J parsers, the XL TXE-J 1.0 XSLT compiler, and the XSLT4J XSLT interpreter.
These tools allow you to parse, validate, transform, and serialize XML documents
independently from any given XML processing implementation.</p></div><a id="idx44" name="idx44"></a><a id="idx45" name="idx45"></a>
<p>
<p> Use factory finders to locate implementations of the abstract
factory classes, as described in <a href="#xml_using__select_processor">Selecting an XML processor</a>.
By using factory finders, you can select a different XML library without changing
your Java code.</p></p>
<p>
<a name="wq65"></a>
<h3 id="wq65">Available XML libraries</h3>
<p>The IBM SDK for Java contains the following XML libraries:</p></p>
<dl>
<dt class="bold">XML4J 4.5</dt>
<dd>
<p>XML4J is a validating parser providing support for the following standards:
</p>
<ul>
<li>XML 1.0 (4th edition)</li>
<li>Namespaces in XML 1.0 (2nd edition)</li>
<li>XML 1.1 (2nd edition)</li>
<li>Namespaces in XML 1.1 (2nd edition)</li>
<li>W3C XML Schema 1.0 (2nd Edition)</li>
<li>XInclude 1.0 (2nd Edition)</li>
<li>OASIS XML Catalogs 1.0</li>
<li>SAX 2.0.2</li>
<li>DOM Level 3 Core, Load and Save</li>
<li>DOM Level 2 Core, Events, Traversal and Range</li>
<li>JAXP 1.4</li></ul>

<p>XML4J 4.5 is based on Apache Xerces-J 2.9.0. See <a href="http://xerces.apache.org/xerces2-j/" target="_blank">http://xerces.apache.org/xerces2-j/</a> for more
information.</p>
</dd>
<dt class="bold">XL XP-J 1.1</dt>
<dd>
<p>XL XP-J 1.1 is a high-performance non-validating parser that provides
support for StAX 1.0 (JSR 173). StAX is a bidirectional API for pull-parsing
and streaming serialization of XML 1.0 and XML 1.1 documents. See the <a href="#xlxpj_reference">XL XP-J reference information</a> section for more details about what is
supported by XL XP-J 1.1.</p>
</dd>
<dt class="bold">XL TXE-J 1.0.1 Beta</dt>
<dd>
<p>For Version 5.0, the IBM SDK for Java included the XSLT4J compiler and interpreter.
The XSLT4J interpreter was used by default.</p>

<p>For Version 6, the IBM SDK for Java includes
XL TXE-J. XL TXE-J includes the XSLT4J 2.7.8 interpreter and a new XSLT compiler.
The new compiler is used by default. The XSLT4J compiler is no longer included
with the IBM SDK
for Java.
See <a href="#xslt_migration_steps">Migrating to the XL-TXE-J</a> for information about migrating
to XL TXE-J.</p>

<p>XL TXE-J provides support for the following standards:
</p>
<ul>
<li>XSLT 1.0</li>
<li>XPath 1.0</li>
<li>JAXP 1.4</li></ul>
</dd>
</dl>
<p>
<a name="xml_using__select_processor"></a>
<h3 id="xml_using__select_processor">Selecting an XML processor</h3>
<p>XML
processor selection is performed using service providers. When using a factory
finder, Java looks in the following places, in this order, to
see which service provider to use:
</p>
<ol type="1">
<li>The system property with the same name as the service provider.</li>
<li>The service provider specified in a properties file.

<ul>
<li><strong>For XMLEventFactory, XMLInputFactory,
and XMLOutputFactory only.</strong> The value of the service
provider in the file /opt/ibm/java-&lt;arch&gt;-60/jre/lib/stax.properties.</li>
<li><strong>For other factories.</strong> The value of the service provider in the file /opt/ibm/java-&lt;arch&gt;-60/jre/lib/jaxp.properties.</li></ul></li>
<li>The contents of the META-INF/services/&lt;service.provider&gt;
file.</li>
<li>The default service provider.</li></ol>
<p>The following service providers control the XML processing libraries
used by Java:
</p>
<dl class="parml">
<dt class="bold"><strong>javax.xml.parsers.SAXParserFactory</strong></dt>
<dd>Selects the SAX parser. By default, org.apache.xerces.jaxp.SAXParserFactoryImpl from
the XML4J library is used.
</dd>
<dt class="bold"><strong>javax.xml.parsers.DocumentBuilderFactory</strong></dt>
<dd>Selects the document builder. By default, org.apache.xerces.jaxp.DocumentBuilderFactoryImpl from
the XML4J library is used.
</dd>
<dt class="bold"><strong>javax.xml.datatype.DatatypeFactory</strong></dt>
<dd>Selects the datatype factory. By default, org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl from
the XML4J library is used.
</dd>
<dt class="bold"><strong>javax.xml.stream.XMLEventFactory</strong></dt>
<dd>Selects the StAX event factory. By default, com.ibm.xml.xlxp.api.stax.XMLEventFactoryImpl from
the XL XP-J library is used.
</dd>
<dt class="bold"><strong>javax.xml.stream.XMLInputFactory</strong></dt>
<dd>Selects the StAX parser. By default, com.ibm.xml.xlxp.api.stax.XMLInputFactoryImpl from
the XL XP-J library is used.
</dd>
<dt class="bold"><strong>javax.xml.stream.XMLOutputFactory</strong></dt>
<dd>Selects the StAX serializer. By default, com.ibm.xml.xlxp.api.stax.XMLOutputFactoryImpl from
the XL XP-J library is used.
</dd>
<dt class="bold"><strong>javax.xml.transform.TransformerFactory</strong></dt>
<dd>Selects the XSLT processor. Possible values are:

<dl class="parml">
<dt class="bold">com.ibm.xtq.xslt.jaxp.compiler.TransformerFactoryImpl</dt>
<dd>Use the XL TXE-J compiler. This value is the default.
</dd>
<dt class="bold">org.apache.xalan.processor.TransformerFactoryImpl</dt>
<dd>Use the XSLT4J interpreter.
</dd>
</dl>
</dd>
<dt class="bold"><strong>javax.xml.validation.SchemaFactory:http://www.w3.org/2001/XMLSchema</strong></dt>
<dd>Selects the schema factory for the W3C XML Schema language. By default, org.apache.xerces.jaxp.validation.XMLSchemaFactory from
the XML4J library is used.
</dd>
<dt class="bold"><strong>javax.xml.xpath.XPathFactory</strong></dt>
<dd>Selects the XPath processor. By default, org.apache.xpath.jaxp.XPathFactoryImpl from
the XSLT4J library is used.
</dd>
</dl></p>
<a name="xslt_migration_steps"></a>
<h3 id="xslt_migration_steps"><a href="#ToC_89">Migrating to the XL-TXE-J</a></h3>
<div>
<p>The XL TXE-J compiler has replaced the XSLT4J interpreter
as the default XSLT processor. Follow these steps to prepare your
application for the new library.</p></div>
<p>
<a name="wq67"></a>
<h4 id="wq67">About this task</h4>
<p>The XL TXE-J compiler is faster than the XSLT4J interpreter
when you are applying the same transformation more than once. If you
perform each individual transformation only once, the XL TXE-J compiler
is slower than the XSLT4J interpreter because compilation and optimization
reduce performance.</p>
<p>To continue using the XSLT4J
interpreter as your XSLT processor, set the <strong>javax.xml.transform.TransformerFactory</strong> service
provider to org.apache.xalan.processor.TransformerFactoryImpl.</p>
<p>To
migrate to the XL-TXE-J compiler, follow the instructions in this
task.</p></p>
<p>
<a name="wq68"></a>
<h4 id="wq68">Procedure</h4></p>
<ol type="1">
<li>Use com.ibm.xtq.xslt.jaxp.compiler.TransformerFactoryImpl when
setting the <strong>javax.xml.transform.TransformerFactory</strong> service
provider.</li>
<li>Regenerate class files generated by the XSLT4J compiler.
XL TXE-J cannot execute class files generated by the XSLT4J compiler.</li>
<li>Some methods generated by the compiler might exceed the
JVM method size limit, in which case the compiler attempts to split
these methods into smaller methods.

<ul>
<li>If the compiler splits the method successfully, you receive
the following warning: 

<p><samp>Some generated functions exceeded
the JVM method size limit and were automatically split into smaller
functions.  You might get better performance by manually splitting
very large templates into smaller templates, by using the 'splitlimit'
option to the Process or Compile command, or by setting the 'http://www.ibm.com/xmlns/prod/xltxe-j/split-limit'
transformer factory attribute.</samp></p>You can use the compiled
classes, but you might get better performance by controlling the split
limit manually.</li>
<li>If the compiler does not split the method successfully, you
receive one of the following exceptions: 

<p><samp>com.ibm.xtq.bcel.generic.ClassGenException:
Branch target offset too large for short</samp></p> or 

<p><samp>bytecode
array size &gt; 65535 at offset=#####</samp></p>Try setting the
split limit manually, or using a lower split limit.</li></ul> To set the split limit, use the <strong>-SPLITLIMIT</strong> option
when using the Process or Compile commands,
or the <strong>http://www.ibm.com/xmlns/prod/xltxe-j/split-limit</strong> transformer
factory attribute when using the transformer factory. The split limit
can be between 100 and 2000. When setting the split limit manually,
use the highest split limit possible for best performance.</li>
<li>XL TXE-J might need more memory than the XSLT4J compiler.
If you are running out of memory or performance seems slow, increase
the size of the heap using the <strong>-Xmx</strong> option.</li>
<li>Migrate your application to use the new attribute keys.
The old transformer factory attribute keys are deprecated. The old
names are accepted with a warning. 

<a name="wq70"></a>
<table id="wq70" width="90%" summary="" border="1" frame="border" rules="all">
<caption>Table 2. Changes to attribute keys from the XSL4J compiler to the XL TXE-J compiler</caption>
<thead valign="bottom">
<tr valign="bottom">
<th id="wq71" width="32%" align="left">XSL4J compiler attribute</th>
<th id="wq72" width="67%" align="left">XL TXE-J compiler attribute</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq71">translet-name</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/translet-name</td>
</tr>
<tr>
<td headers="wq71">destination-directory</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/destination-directory</td>
</tr>
<tr>
<td headers="wq71">package-name</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/package-name</td>
</tr>
<tr>
<td headers="wq71">jar-name</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/jar-name</td>
</tr>
<tr>
<td headers="wq71">generate-translet</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/generate-translet</td>
</tr>
<tr>
<td headers="wq71">auto-translet</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/auto-translet</td>
</tr>
<tr>
<td headers="wq71">use-classpath</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/use-classpath</td>
</tr>
<tr>
<td headers="wq71">debug</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/debug</td>
</tr>
<tr>
<td headers="wq71">indent-number</td>
<td headers="wq72">http://www.ibm.com/xmlns/prod/xltxe-j/indent-number</td>
</tr>
<tr>
<td headers="wq71">enable-inlining</td>
<td headers="wq72"><em>Obsolete in new compiler</em></td>
</tr>
</tbody>
</table></li>
<li>Optional: For best performance, ensure that
you are not recompiling XSLT transformations that can be reused. Use one of the following methods to reuse compiled transformations:

<ul>
<li>If your stylesheet does not change at runtime, compile the
stylesheet as part of your build process and put the compiled classes
on your classpath. Use the org.apache.xalan.xsltc.cmdline.Compile command
to compile the stylesheet and set the <strong>http://www.ibm.com/xmlns/prod/xltxe-j/use-classpath</strong> transformer
factory attribute to <samp>true</samp> to load the classes
from the classpath.</li>
<li>If your application will use the same stylesheet during multiple
runs, set the <strong>http://www.ibm.com/xmlns/prod/xltxe-j/auto-translet</strong> transformer
factory attribute to <samp>true</samp> to automatically
save the compiled stylesheet to disk for reuse. The compiler will
use a compiled stylesheet if it is available, and compile the stylesheet
if it is not available or is out-of-date. Use the <strong>http://www.ibm.com/xmlns/prod/xltxe-j/destination-directory</strong> transformer
factory attribute to set the directory used to store compiled stylesheets.
By default, compiled stylesheets are stored in the same directory
as the stylesheet.</li>
<li>If your application is a long-running application that reuses
the same stylesheet, use the transformer factory to compile the stylesheet
and create a Templates object. You can use the Templates object
to create Transformer objects without recompiling
the stylesheet. The Transformer objects can also
be reused but are not thread-safe.</li></ul></li></ol>
<a name="xml_reference"></a>
<h3 id="xml_reference"><a href="#ToC_92">XML reference information</a></h3>
<div>
<p>The XL XP-J and XL TXE-J XML libraries are new for Version 6 of
the SDK. This reference information describes the features supported by these
libraries.</p></div>
<a name="xlxpj_reference"></a>
<h4 id="xlxpj_reference">XL XP-J reference information</h4>
<div>
<p>XL XP-J 1.1 is a high-performance non-validating parser
that provides support for StAX 1.0 (JSR 173). StAX is a bidirectional
API for pull-parsing and streaming serialization of XML 1.0 and XML
1.1 documents.</p></div>
<p>
<a name="wq73"></a>
<h5 id="wq73">Unsupported features</h5>
<p>The following optional
StAX features are not supported by XL XP-J:
</p>
<ul>
<li>DTD validation when using an XMLStreamReader or XMLEventReader.
The XL XP-J parser is non-validating.</li>
<li>When using an XMLStreamReader to read from
a character stream (java.io.Reader), the Location.getCharaterOffset() method
always returns -1. The Location.getCharaterOffset() returns
the byte offset of a Location when using an XMLStreamReader to
read from a byte stream (java.io.InputStream).</li></ul></p>
<p>
<a name="wq74"></a>
<h5 id="wq74">XMLInputFactory reference</h5>
<p>The javax.xml.stream.XMLInputFactory implementation
supports the following properties, as described in the XMLInputFactory Javadoc
information: <a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLInputFactory.html" target="_blank">http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLInputFactory.html</a>.</p></p>
<a name="wq75"></a>
<table id="wq75" width="100%" summary="" border="1" frame="border" rules="all">
<thead valign="bottom">
<tr valign="bottom">
<th id="wq76" align="left">Property name</th>
<th id="wq77" align="left">Supported?</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq76"><strong>javax.xml.stream.isValidating</strong></td>
<td headers="wq77">No. The XL XP-J scanner does not support validation.</td>
</tr>
<tr>
<td headers="wq76"><strong>javax.xml.stream.isNamespaceAware</strong></td>
<td headers="wq77">Yes, supports true and false. For XMLStreamReaders
created from DOMSources, namespace processing depends
on the methods that were used to create the DOM tree, and this value
has no effect.</td>
</tr>
<tr>
<td headers="wq76"><strong>javax.xml.stream.isCoalescing</strong></td>
<td headers="wq77">Yes</td>
</tr>
<tr>
<td headers="wq76"><strong>javax.xml.stream.isReplacingEntityReferences</strong></td>
<td headers="wq77">Yes. For XMLStreamReaders
created from DOMSources, if entities have already
been replaced in the DOM tree, setting this parameter has no effect.</td>
</tr>
<tr>
<td headers="wq76"><strong>javax.xml.stream.isSupportingExternalEntities</strong></td>
<td headers="wq77">Yes</td>
</tr>
<tr>
<td headers="wq76"><strong>javax.xml.stream.supportDTD</strong></td>
<td headers="wq77">
<p>True is always supported.
Setting the value to false works only if the <strong>com.ibm.xml.xlxp.support.dtd.compat.mode</strong> system
property is also set to false.</p>

<p>When both properties are set
to false, parsers created by the factory throw an XMLStreamException when
they encounter an entity reference that requires expansion. This setting
is useful for protecting against Denial of Service (DoS) attacks involving
entities declared in the DTD.</p>

<p>Setting the value
to false does not work before Service Refresh 2.</p></td>
</tr>
<tr>
<td headers="wq76"><strong>javax.xml.stream.reporter</strong></td>
<td headers="wq77">Yes</td>
</tr>
<tr>
<td headers="wq76"><strong>javax.xml.stream.resolver</strong></td>
<td headers="wq77">Yes</td>
</tr>
</tbody>
</table>
<p>XL XP-J also supports the optional method createXMLStreamReader(javax.xml.transform.Source),
which allows StAX readers to be created from DOM and SAX sources.</p>
<p>XL
XP-J also supports the <strong>javax.xml.stream.isSupportingLocationCoordinates</strong> property.
If you set this property to true, XMLStreamReaders
created by the factory return accurate line, column, and character
information using Location objects. If you set
this property to false, line, column, and character information is
not available. By default, this property is set to false for performance
reasons.</p>
<p>
<a name="wq78"></a>
<h5 id="wq78">XMLStreamReader reference</h5>
<p>The javax.xml.stream.XMLStreamReader implementation
supports the following properties, as described in the XMLStreamReader Javadoc: <a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamReader.html" target="_blank">http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamReader.html</a>.</p></p>
<a name="wq79"></a>
<table id="wq79" width="100%" summary="" border="1" frame="border" rules="all">
<thead valign="bottom">
<tr valign="bottom">
<th id="wq80" align="left">Property name</th>
<th id="wq81" align="left">Supported?</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq80"><strong>javax.xml.stream.entities</strong></td>
<td headers="wq81">Yes</td>
</tr>
<tr>
<td headers="wq80"><strong>javax.xml.stream.notations</strong></td>
<td headers="wq81">Yes</td>
</tr>
</tbody>
</table>
<p>XL XP-J also supports the <strong>javax.xml.stream.isInterning</strong> property.
This property returns a boolean value indicating whether or not XML
names and namespace URIs returned by the API calls have been interned
by the parser. This property is read-only.</p>
<p>
<a name="wq82"></a>
<h5 id="wq82">XMLOutputFactory reference</h5>
<p>The javax.xml.stream.XMLOutputFactory implementation
supports the following properties, as described in the XMLOutputFactory Javadoc: <a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLOutputFactory.html" target="_blank">http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLOutputFactory.html</a>.</p></p>
<a name="wq83"></a>
<table id="wq83" width="100%" summary="" border="1" frame="border" rules="all">
<thead valign="bottom">
<tr valign="bottom">
<th id="wq84" align="left">Property name</th>
<th id="wq85" align="left">Supported?</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq84"><strong>javax.xml.stream.isRepairingNamespaces</strong></td>
<td headers="wq85">Yes</td>
</tr>
</tbody>
</table>
<p>XL XP-J also supports the <strong>javax.xml.stream.XMLOutputFactory.recycleWritersOnEndDocument</strong> property.
If you set this property to true, XMLStreamWriters
created by this factory are recycled when writeEndDocument() is
called. After recycling, some XMLStreamWriter methods,
such as getNamespaceContext(), must not be called.
By default, XMLStreamWriters are recycled when close() is
called. You must call the XMLStreamWriter.close() method
when you have finished with an XMLStreamWriter,
even if this property is set to true.</p>
<p>
<a name="wq86"></a>
<h5 id="wq86">XMLStreamWriter reference</h5>
<p>The javax.xml.stream.XMLStreamWriter implementation
supports the following properties, as described in the XMLStreamWriter Javadoc: <a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html" target="_blank">http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html</a>.</p></p>
<a name="wq87"></a>
<table id="wq87" width="100%" summary="" border="1" frame="border" rules="all">
<thead valign="bottom">
<tr valign="bottom">
<th id="wq88" align="left">Property name</th>
<th id="wq89" align="left">Supported?</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq88"><strong>javax.xml.stream.isRepairingNamespaces</strong></td>
<td headers="wq89">Yes</td>
</tr>
</tbody>
</table>
<p>Properties on XMLStreamWriter objects
are read-only.</p>
<p>XL XP-J also supports the <strong>javax.xml.stream.XMLStreamWriter.isSetPrefixBeforeStartElement</strong> property.
This property returns a Boolean indicating whether
calls to setPrefix() and setDefaultNamespace() should
occur before calls to writeStartElement() or writeEmptyElement() to
put a namespace prefix in scope for that element.  XL XP-J always
returns false; calls to setPrefix() and setDefaultNamespace() should
occur after writeStartElement() or writeEmptyElement().</p>
<a name="xltxej_reference"></a>
<h4 id="xltxej_reference">XL TXE-J reference information</h4>
<div>
<p>XL TXE-J is an XSLT library containing the XSLT4J 2.7.8 interpreter
and a XSLT compiler.</p></div>
<p>
<a name="wq90"></a>
<h5 id="wq90">Feature comparison table</h5></p>
<a name="wq91"></a>
<table id="wq91" width="100%" summary="" border="1" frame="border" rules="all">
<caption>Table 3. Comparison of the features in the XSLT4J interpreter, the XSLT4J compiler, and the XL TXE-J compiler.</caption>
<thead valign="bottom">
<tr valign="bottom">
<th id="wq92" width="46%" align="left">Feature</th>
<th id="wq93" width="17%" align="left">XSLT4J interpreter (included)</th>
<th id="wq94" width="17%" align="left">XSLT4J compiler (not included)</th>
<th id="wq95" width="17%" align="left">XL TXE-J compiler (included)</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq92">http://javax.xml.transform.stream.StreamSource/feature
feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.stream.StreamResult/feature
feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.dom.DOMSource/feature feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.dom.DOMResult/feature feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.sax.SAXSource/feature feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.sax.SAXResult/feature feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.stax.StAXSource/feature feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.stax.StAXResult/feature feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.sax.SAXTransformerFactory/feature
feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.transform.sax.SAXTransformerFactory/feature/xmlfilter
feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://javax.xml.XMLConstants/feature/secure-processing
feature</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">http://xml.apache.org/xalan/features/incremental attribute</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">http://xml.apache.org/xalan/features/optimize attribute</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">http://xml.apache.org/xalan/properties/source-location
attribute</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">translet-name attribute</td>
<td headers="wq93">N/A</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">destination-directory attribute</td>
<td headers="wq93">N/A</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">package-name attribute</td>
<td headers="wq93">N/A</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">jar-name attribute</td>
<td headers="wq93">N/A</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">generate-translet attribute</td>
<td headers="wq93">N/A</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">auto-translet attribute</td>
<td headers="wq93">N/A</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">use-classpath attribute</td>
<td headers="wq93">N/A</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">enable-inlining attribute</td>
<td headers="wq93">No</td>
<td headers="wq94">Yes</td>
<td headers="wq95">No (obsolete in TL TXE-J)</td>
</tr>
<tr>
<td headers="wq92">indent-number attribute</td>
<td headers="wq93">No</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">debug attribute</td>
<td headers="wq93">No</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes (with new name)</td>
</tr>
<tr>
<td headers="wq92">Java extensions</td>
<td headers="wq93">Yes</td>
<td colspan="2" headers="wq94 wq95">Yes (abbreviated syntax only, xalan:component/xalan:script
constructs not supported)</td>
</tr>
<tr>
<td headers="wq92">JavaScript extensions</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">Extension elements</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">EXSLT extension functions</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes (excluding dynamic)</td>
<td headers="wq95">Yes (excluding dynamic)</td>
</tr>
<tr>
<td headers="wq92">redirect extension</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes (excluding redirect:open and redirect:close)</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">output extension</td>
<td headers="wq93">No</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">nodeset extension</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
<tr>
<td headers="wq92">NodeInfo extension functions</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">SQL library extension</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">pipeDocument extension</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">evaluate extension</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">tokenize extension</td>
<td headers="wq93">Yes</td>
<td headers="wq94">No</td>
<td headers="wq95">No</td>
</tr>
<tr>
<td headers="wq92">XML 1.1</td>
<td headers="wq93">Yes</td>
<td headers="wq94">Yes</td>
<td headers="wq95">Yes</td>
</tr>
</tbody>
</table>
<p>
<a name="wq96"></a>
<h5 id="wq96">Notes</h5></p>
<ol type="1">
<li>With the Process command, use <strong>-FLAVOR sr2sw</strong> to transform
using StAX stream processing, and <strong>-FLAVOR er2ew</strong> for StAX
event processing.</li>
<li>The new compiler does not look for the org.apache.xalan.xsltc.dom.XSLTCDTMManager service
provider. Instead, if StreamSource is used, the compiler
switches to a high-performance XML parser.</li>
<li>Inlining is obsolete in XL TXE-J.

<ul>
<li>The <strong>-XN</strong> option to the Process command
is silently ignored.</li>
<li>The <strong>-n</strong> option to the Compile command
is silently ignored.</li>
<li>The <strong>enable-inlining</strong> transformer factory attribute
is silently ignored.</li></ul></li>
<li>The org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl class
is no longer supported.</li></ol>
<a name="old_xerces"></a>
<h4 id="old_xerces">Using an older version of Xerces or Xalan</h4>
<div>
<p>If you are using an older version of Xerces (before 2.0)
or Xalan (before 2.3) in the endorsed override, you might get a NullPointerException when
you start your application. This exception occurs because these older
versions do not handle the <samp>jaxp.properties</samp> file
correctly.</p></div>
<p>
<a name="wq98"></a>
<h5 id="wq98">About this task</h5>
<p>To avoid this situation, use one of the following workarounds: 
</p>
<ul>
<li>Upgrade to a newer version of the application that implements
the latest Java API for XML Programming (JAXP)
specification (https://jaxp.dev.java.net/).</li>
<li>Remove the <samp>jaxp.properties</samp> file
from /opt/ibm/java-&lt;arch&gt;-60/jre/lib.</li>
<li>Uncomment the
entries in the <samp>jaxp.properties</samp> file in /opt/ibm/java-&lt;arch&gt;-60/jre/lib.</li>
<li>Set the system property for <strong>javax.xml.parsers.SAXParserFactory</strong>, <strong>javax.xml.parsers.DocumentBuilderFactory</strong>,
or <strong>javax.xml.transform.TransformerFactory</strong> using
the <strong>-D</strong> command-line option.</li>
<li>Set the system property for <strong>javax.xml.parsers.SAXParserFactory</strong>, <strong>javax.xml.parsers.DocumentBuilderFactory</strong>,
or <strong>javax.xml.transform.TransformerFactory</strong> in
your application. For an example, see the JAXP 1.4 specification.</li>
<li>Explicitly set the SAX parser, Document builder, or Transformer
factory using the <strong>IBM_JAVA_OPTIONS</strong> environment
variable. 
<pre class="xmp">export IBM_JAVA_OPTIONS=-Djavax.xml.parsers.SAXParserFactory=
  org.apache.xerces.jaxp.SAXParserFactoryImpl </pre>or 
<pre class="xmp">export IBM_JAVA_OPTIONS=-Djavax.xml.parsers.DocumentBuilderFactory=
  org.apache.xerces.jaxp.DocumentBuilderFactoryImpl</pre>or
 
<pre class="xmp">export IBM_JAVA_OPTIONS=-Djavax.xml.transform.TransformerFactory=
  org.apache.xalan.processor.TransformerFactoryImpl  </pre></li></ul></p>
<a name="debugger"></a>
<h2 id="debugger"><a href="#ToC_104">Debugging Java applications</a></h2>
<div>
<p>To debug Java programs,
you can use the Java Debugger (JDB) application
or other debuggers that communicate by using the Java Platform
Debugger Architecture (JPDA) that is provided by the SDK for the operating
system.</p></div>
<p>More information about problem diagnosis using Java can be found in the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>.</p>
<a name="jdb"></a>
<h3 id="jdb"><a href="#ToC_105">Java Debugger (JDB)</a></h3>
<div>
<p>The Java Debugger (JDB) is included
in the SDK for Linux. The debugger is
started with the jdb command; it attaches to the
JVM using JPDA.</p></div>
<p>
<p> To debug a Java application: 
</p>
<ol type="1">
<li id="jdb__jdb_start_jvm">
<a name="jdb__jdb_start_jvm"></a>Start the JVM with the following options: 
<pre class="xmp">java -agentlib:jdwp=transport=dt_socket,server=y,address=<em>&lt;port&gt;</em> <em>&lt;class&gt;</em></pre>The JVM starts up, but suspends execution before it starts
the Java application.</li>
<li>In a separate session, you can attach the debugger to the JVM: 
<pre class="xmp">jdb -attach <em>&lt;port&gt;</em></pre>The
debugger will attach to the JVM, and you can now issue a range of
commands to examine and control the Java application;
for example, type <samp class="xph">run</samp> to allow the Java application
to start.</li></ol></p>
<p>
<p>For more information about JDB options, type: </p>
<pre class="xmp">jdb -help</pre><p class="indatacontent">For
more information about JDB commands: 
</p>
<ol type="1">
<li>Type <samp class="xph">jdb</samp></li>
<li>At the jdb prompt, type <samp class="xph">help</samp></li></ol></p>
<p>
<p>You can also use JDB to debug Java applications
running on remote workstations.  JPDA uses a TCP/IP socket to connect
to the remote JVM. 
</p>
<ol type="1">
<li>Start the JVM with the following options: 
<pre class="xmp">java -agentlib:jdwp=transport=dt_socket,server=y,address=<em>&lt;port&gt;</em> <em>&lt;class&gt;</em></pre>The JVM starts up, but suspends execution before it starts
the Java application.</li>
<li>Attach the debugger to the remote JVM: 
<pre class="xmp">jdb -attach <em>&lt;host&gt;</em>:<em>&lt;port&gt;</em></pre></li></ol></p>
<p>
<p>The Java Virtual
Machine Debugging Interface (JVMDI) is not supported in this release.
It has been replaced by the Java Virtual
Machine Tool Interface (JVMTI).</p></p>
<p>
<p>For more information about JDB and JPDA and their usage,
see these Web sites:  
</p>
<ul>
<li><a href="http://java.sun.com/products/jpda/" target="_blank">http://java.sun.com/products/jpda/</a></li>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/jpda/" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jpda/</a></li>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/jpda/jdb.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jpda/jdb.html</a></li></ul></p>
<a name="selective"></a>
<h3 id="selective"><a href="#ToC_106">Selective debugging</a></h3>
<div>
<p>Use the com.ibm.jvm.Debuggable annotation
to mark classes and methods that should be available for debugging.
Use the <strong>-XselectiveDebug</strong> parameter to enable
selective debugging at run time. The JVM optimizes methods that do
not need debugging to provide better performance in a debugging environment.</p></div><a id="idx46" name="idx46"></a><a id="idx47" name="idx47"></a>
<p>
<a name="wq107"></a>
<h4 id="wq107">About this task</h4>
<p>Selective debugging is useful when Java is
being used as a framework for development, for example, as an IDE.
The Java code for the IDE is optimized for performance
while the user code is debugged.</p></p>
<p>
<a name="wq108"></a>
<h4 id="wq108">Procedure</h4></p>
<ol type="1">
<li>Import the Debuggable annotation from
the com.ibm.jvm package. 
<pre class="xmp">import com.ibm.jvm.Debuggable;</pre></li>
<li>Decorate methods using the Debuggable annotation. 
<pre class="xmp">@Debuggable
public int method1() {
  ...
}</pre></li>
<li>Optional: You can also decorate classes using
the Debuggable annotation. All methods in the class
will remain debuggable. 
<pre class="xmp">@Debuggable
public class Class1 {
  ...
}</pre></li>
<li>Enable selective debugging at run time using the <strong>-XselectiveDebug</strong> command-line
option.</li></ol>
<p>
<a name="wq110"></a>
<h4 id="wq110">Results</h4>
<p>Applications will run faster while being debugged because
the core Java API and any IDE code can be
optimized for performance.</p></p>
<a name="bit_check"></a>
<h2 id="bit_check"><a href="#ToC_110">Determining whether your application is running on a 32-bit
or 64-bit JVM</a></h2>
<div>
<p>Some Java applications must be able to
determine whether they are running on a 32-bit
JVM or on a 64-bit JVM. For example, if your application has a native
code library, the library must be compiled separately in 32-
and 64-bit forms for platforms that support both 32-
and 64-bit modes of operation. In this case, your application must
load the correct library at runtime, because it is not possible to
mix 32- and 64-bit code.</p></div>
<p>
<a name="wq111"></a>
<h3 id="wq111">About this task</h3>
<p>The system property <strong>com.ibm.vm.bitmode</strong> allows
applications to determine the mode in which your JVM is running. It
returns the following values:  
</p>
<ul>
<li>32 - the JVM is running in 32-bit
mode (31-bit mode for Linux on System
z)</li>
<li>64 - the JVM is  running in 64-bit mode</li></ul><p class="indatacontent">You can inspect the <strong>com.ibm.vm.bitmode</strong> property
from inside your application code using the call: </p>
<pre class="xmp">System.getProperty("com.ibm.vm.bitmode");</pre></p>
<a name="signals"></a>
<h2 id="signals"><a href="#ToC_112">How the JVM processes signals</a></h2>
<div>
<p>When a signal is raised that is of interest to the JVM,
a signal handler is called. This signal handler determines whether
it has been called for a Java or
non-Java thread.</p></div>
<p>If the signal is for a Java thread,
the JVM takes control of the signal handling. If an application handler
for this signal is installed and you did not specify the <strong>-Xnosigchain</strong> command-line
option, the application handler for this signal is called after the
JVM has finished processing.</p>
<p>If the signal is for a non-Java thread, and the application that
installed the JVM had previously installed its own handler for the
signal, control is given to that handler. Otherwise, if the signal
is requested by the JVM or Java application,
the signal is ignored or the default action is taken.</p>
<p>For exception and error signals, the JVM either:  
</p>
<ul>
<li>Handles the condition and recovers, or</li>
<li>Enters a controlled shut down sequence where it:  

<ol type="1">
<li>Produces dumps, to describe the JVM state at the point of failure</li>
<li>Calls your application's signal handler for that signal</li>
<li>Calls any application-installed
unexpected shut down hook</li>
<li>Performs the necessary JVM cleanup</li></ol></li></ul>For information
about writing a launcher that specifies the above hooks, see: <a href="http://www.ibm.com/developerworks/java/library/i-signalhandling/" target="_blank">http://www.ibm.com/developerworks/java/library/i-signalhandling/</a>.
This item was written for Java V1.3.1,
but still applies to later versions.
<p>For interrupt signals, the JVM also enters a controlled shut down
sequence, but this time it is treated as a normal termination that:
</p>
<ol type="1">
<li>Calls your application's signal handler for that signal</li>
<li>Calls all application
shut down hooks</li>
<li>Calls any application-installed
exit hook</li>
<li>Performs the necessary JVM cleanup</li></ol>
<p>The shut down is identical to the shut down initiated by a call to
the Java method <samp class="xph">System.exit()</samp>.</p>
<p>Other signals that are used by the JVM are for internal control
purposes and do not cause it to stop. The only control
signal of interest is SIGQUIT, which causes a Javadump to be generated.</p>
<a name="sighand"></a>
<h3 id="sighand"><a href="#ToC_113">Signals used by the JVM</a></h3>
<div>
<p>The types of signals are Exceptions,
Errors, Interrupts, and Controls.</p></div>
<p>
<p><a href="#sighand__sig_table">Table 4</a> shows the signals that are used
by the JVM. The signals are grouped in the table by type or use, as
follows: 
</p>
<dl>
<dt class="bold">Exceptions</dt>
<dd>The operating system synchronously raises an appropriate exception
signal whenever an unrecoverable condition occurs.
</dd>
<dt class="bold">Errors</dt>
<dd>The JVM raises a SIGABRT if it detects a condition
from which it cannot recover.
</dd>
<dt class="bold">Interrupts</dt>
<dd>Interrupt signals are raised asynchronously, from outside a JVM
process, to request shut down.
</dd>
<dt class="bold">Controls</dt>
<dd>Other signals that are used by the JVM for control purposes.
</dd>
</dl><p class="indatacontent">
</p>
<a name="sighand__sig_table"></a>
<table id="sighand__sig_table" width="100%" summary="" border="1" frame="border" rules="all">
<caption>Table 4. Signals used by the JVM</caption>
<thead valign="bottom">
<tr>
<th id="wq115" width="20%" align="left">Signal Name</th>
<th id="wq116" width="20%" align="left">Signal type</th>
<th id="wq117" width="20%" align="left">Description</th>
<th id="wq118" width="20%" align="left">Disabled by -Xrs</th>
<th id="wq119" width="20%" align="left">Disabled by -Xrs:sync</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq115">SIGBUS (7)</td>
<td headers="wq116">Exception</td>
<td headers="wq117">Incorrect access to memory (data misalignment)</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">Yes</td>
</tr>
<tr>
<td headers="wq115">SIGSEGV (11)</td>
<td headers="wq116">Exception</td>
<td headers="wq117">Incorrect access to memory (write to inaccessible
memory)</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">Yes</td>
</tr>
<tr>
<td headers="wq115">SIGILL (4)</td>
<td headers="wq116">Exception</td>
<td headers="wq117">Illegal instruction (attempt to call an unknown
machine instruction)</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">Yes</td>
</tr>
<tr>
<td headers="wq115">SIGFPE (8)</td>
<td headers="wq116">Exception</td>
<td headers="wq117">Floating point exception (divide by zero)</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">Yes</td>
</tr>
<tr>
<td headers="wq115">SIGABRT (6)</td>
<td headers="wq116">Error</td>
<td headers="wq117">Abnormal termination. The JVM raises this
signal whenever it detects a JVM fault.</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">Yes</td>
</tr>
<tr>
<td headers="wq115">SIGINT (2)</td>
<td headers="wq116">Interrupt</td>
<td headers="wq117">Interactive attention (CTRL-C). JVM exits
normally.</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">No</td>
</tr>
<tr>
<td headers="wq115">SIGTERM (15)</td>
<td headers="wq116">Interrupt</td>
<td headers="wq117">Termination request. JVM will exit normally.</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">No</td>
</tr>
<tr>
<td headers="wq115">SIGHUP (1)</td>
<td headers="wq116">Interrupt</td>
<td headers="wq117">Hang up. JVM exits normally.</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">No</td>
</tr>
<tr>
<td headers="wq115">SIGQUIT (3)</td>
<td headers="wq116">Control</td>
<td headers="wq117">A quit signal for a
terminal. By default, this triggers a Javadump.</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">No</td>
</tr>
<tr>
<td headers="wq115">SIGTRAP (5)</td>
<td headers="wq116">Control</td>
<td headers="wq117">Used by the JIT.</td>
<td align="center" headers="wq118">Yes</td>
<td align="center" headers="wq119">Yes</td>
</tr>
<tr>
<td headers="wq115">SIGRTMIN (32)</td>
<td headers="wq116">Control</td>
<td headers="wq117">Used by the JVM for internal control purposes.</td>
<td align="center" headers="wq118">No</td>
<td align="center" headers="wq119">No</td>
</tr>
<tr>
<td headers="wq115">SIGRTMAX (2)</td>
<td headers="wq116">Control</td>
<td headers="wq117">Used by the SDK.</td>
<td align="center" headers="wq118">No</td>
<td align="center" headers="wq119">No</td>
</tr>
<tr>
<td headers="wq115">SIGCHLD (17)</td>
<td headers="wq116">Control</td>
<td headers="wq117">Used by the SDK for internal control.</td>
<td align="center" headers="wq118">No</td>
<td align="center" headers="wq119">No</td>
</tr>
</tbody>
</table>
<a name="wq120"></a>
<div class="note-noindent" id="wq120">
<span class="notetitle">Note:</span> <span class="notebody">A number supplied after the signal name is the standard
numeric value for that signal.</span></div></p>
<p>
<p>Use the <strong>-Xrs</strong> (reduce
signal usage) option to prevent the JVM from handling most signals.
For more information, see <a href="http://java.sun.com/javase/6/docs/technotes/tools/windows/java.html" target="_blank">Sun's Java application
launcher page</a>.</p></p>
<p>
<p>Signals 1 (SIGHUP), 2
(SIGINT), 4 (SIGILL), 7 (SIGBUS), 8
(SIGFPE), 11 (SIGSEGV), and 15
(SIGTERM) on JVM threads cause the JVM to shut down; therefore,
an application signal handler should not attempt to recover from these
unless it no longer requires the JVM.</p></p>
<a name="native_signals"></a>
<h3 id="native_signals"><a href="#ToC_114">Linking a native code driver to the signal-chaining library</a></h3>
<div>
<p>The Runtime Environment contains signal-chaining. Signal-chaining
enables the JVM to interoperate more efficiently with native code
that installs its own signal handlers.</p></div>
<p>
<a name="wq123"></a>
<h4 id="wq123">About this task</h4>
<p>Signal-chaining
enables an application to link and load the shared library <samp>libjsig.so</samp> before
the system libraries. The libjsig.so library
ensures that calls such as signal(), sigset(),
and sigaction() are intercepted so that their handlers
do not replace the JVM's signal handlers. Instead, these calls save
the new signal handlers, or "chain" them behind the handlers that
are installed by the JVM. Later, when any of these signals are raised
and found not to be targeted at the JVM, the preinstalled handlers
are invoked.</p>
<p>If
you install signal handlers that use sigaction() ,
some <strong>sa_flags</strong> are not observed when the JVM uses
the signal. These are:
</p>
<ul>
<li>SA_NOCLDSTOP - This is always
unset.</li>
<li>SA_NOCLDWAIT - This is always
unset.</li>
<li>SA_RESTART - This is always set.</li></ul>
<p>The libjsig.so library also
hides JVM signal handlers from the application. Therefore, calls such
as signal(), sigset(), and sigaction() that
are made after the JVM has started no longer return a reference to
the JVM's signal handler, but instead return any handler that was
installed before JVM startup.</p>
<p>To use libjsig.so: 
</p>
<ul>
<li>Link it with the application that creates or embeds a JVM: 
<pre class="xmp">gcc -L$JAVA_HOME/bin -ljsig -L$JAVA_HOME/bin/j9vm -ljvm java_application.c</pre>or</li>
<li>Use the <strong>LD_PRELOAD</strong> environment variable: 
<pre class="xmp">export LD_PRELOAD=$JAVA_HOME/bin/libjsig.so; java_application (bash and ksh)

setenv LD_PRELOAD=$JAVA_HOME/bin/libjsig.so; java_application (csh)</pre></li></ul>
<p>The environment variable <strong>JAVA_HOME</strong> should
be set to the location of the SDK, for example,/opt/ibm/java-&lt;arch&gt;-60/.</p>
<p>To use libjsig.a: 
</p>
<ul>
<li>Link it with the application that creates or embeds
a JVM: 
<pre class="xmp">cc_r -q64 &lt;other compile/link parameter&gt; -L/opt/ibm/java-&lt;arch&gt;-60/jre/bin -ljsig 
-L/opt/ibm/java-&lt;arch&gt;-60/jre/bin/j9vm -ljvm java_application.c</pre> 
<a name="wq124"></a>
<div class="note-noindent" id="wq124">
<span class="notetitle">Note:</span> <span class="notebody">Use <samp class="xph">xlc_r</samp> or <samp class="xph">xlC_r</samp> in
place of <samp class="xph">cc_r</samp> if that is how you usually
call the compiler or linker.</span></div></li></ul></p>
<a name="usejni"></a>
<h2 id="usejni"><a href="#ToC_116">Writing JNI applications</a></h2>
<div>
<p>Valid Java Native
Interface (JNI) version numbers that programs can specify on the JNI_CreateJavaVM()
API call are: JNI_VERSION_1_2(0x00010002) and JNI_VERSION_1_4(0x00010004).</p></div>
<a name="wq125"></a>
<div class="note-noindent" id="wq125">
<span class="notetitle">Restriction:</span> <span class="notebody">Version 1.1 of the JNI is not supported.</span></div>
<p>This version number determines only the level of the JNI to use.
The actual level of the JVM that is created is specified by the JSE
libraries (that is, v6).
The JNI level <em>does not</em> affect the language specification that
is implemented by the JVM, the class library APIs, or any other area
of JVM behavior. For more information, see <a href="http://java.sun.com/javase/6/docs/technotes/guides/jni/" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/jni/</a>.</p>
<p>If your application needs two JNI libraries, one built
for 32- and the other for 64-bit, use the <strong>com.ibm.vm.bitmode</strong> system
property to determine if you are running with a 32-
or 64-bit JVM and choose the appropriate library.</p>
<p>To compile and link a local application
with the SDK,
use the following command: </p>
<pre class="xmp">gcc -I/opt/ibm/java-&lt;arch&gt;-60/include -L/opt/ibm/java-&lt;arch&gt;-60/jre/lib/&lt;arch&gt;/j9vm 
-ljvm -ldl -lpthread &lt;JNI program filename&gt;</pre><p class="indatacontent">The <strong>-ljvm</strong> option
specifies that <samp>libjvm.so</samp> is
the shared library that implements the JVM. The <strong>-lpthread</strong> option
indicates that you are using native pthread support; if you do not
link with the pthread library, a segmentation fault (signal SIGSEGV)
might be caused when you run the JNI program.</p>
<a name="supportedcompilers"></a>
<h3 id="supportedcompilers"><a href="#ToC_117">Supported compilers</a></h3>
<div>
<p>These compilers have been tested with the IBM SDK.</p></div>
<p>The GNU Compiler Collection (gcc)
v3.3.3 is supported for:
</p>
<ul>
<li>32-bit Linux on PowerPC&reg;</li>
<li>64-bit Linux on PowerPC</li>
<li>32-bit Linux on Intel</li>
<li>64-bit Linux on Intel</li>
<li>31-bit Linux on S/390&reg;</li></ul>
<a name="blocked_threads"></a>
<h2 id="blocked_threads"><a href="#ToC_118">Support for thread-level recovery of blocked connectors</a></h2>
<div>
<p>Four new IBM-specific SDK classes have been added to the com.ibm.jvm package
to support the thread-level recovery of Blocked connectors. The new
classes are packaged in <samp>core.jar</samp>.</p></div>
<p>These classes allow you to unblock threads that have become blocked
on networking or synchronization calls. If an application does not
use these classes, it must end the whole process, rather than interrupting
an individual blocked thread.</p>
<p>The classes are:</p>
<dl class="parml">
<dt class="bold">public interface InterruptibleContext</dt>
<dd>Defines two methods, isBlocked() and unblock().
The other three classes implement InterruptibleContext.
</dd>
<dt class="bold">public class InterruptibleLockContext</dt>
<dd>A utility class for interrupting synchronization calls.
</dd>
<dt class="bold">public class InterruptibleIOContext</dt>
<dd>A utility class for interrupting network calls.
</dd>
<dt class="bold">public class InterruptibleThread</dt>
<dd>A utility class that extends java.lang.Thread,
to allow wrapping of interruptible methods. It uses instances of InterruptibleLockContext and InterruptibleIOContext to
perform the required isBlocked() and unblock() methods
depending on whether a synchronization or networking operation is
blocking the thread.
</dd>
</dl>
<p>Both InterruptibleLockContext and InterruptibleIOContext work
by referencing the current thread. Therefore if you do not use InterruptibleThread,
you must provide your own class that extends java.lang.Thread,
to use these new classes.</p>
<p>The Javadoc information for these
classes is provided with the SDK in the <samp>docs/content/apidoc</samp> directory.</p>
<a name="alloc_large_page"></a>
<h2 id="alloc_large_page"><a href="#ToC_119">Configuring large page memory allocation</a></h2>
<div>
<p>You can enable large page support, on systems that support
it, by starting Java with the <strong>-Xlp</strong> option.</p></div>
<p>
<a name="wq126"></a>
<h3 id="wq126">About this task</h3>
<p>Large page usage is primarily intended to provide performance
improvements to applications that allocate a great deal of memory
and frequently access that memory. The large page performance improvements
are a result of the reduced number of misses in the Translation Lookaside
Buffer (TLB). The TLB maps a larger virtual storage area range and
thus causes this improvement.</p>
<p>Large page support
must be available in the kernel, and enabled, so that Java can use large pages.</p>
<p>To
configure large page memory allocation, first ensure that the running
kernel supports large pages. Check that the file <samp>/proc/meminfo</samp> contains
the following lines:  </p>
<pre class="xmp">HugePages_Total:     &lt;number of pages&gt;
HugePages_Free:      &lt;number of pages&gt;
Hugepagesize:        &lt;page size, in kB&gt;</pre><p class="indatacontent"> The number
of pages available and their sizes vary between distributions.</p>
<p>If large page support is not available in your kernel,
these lines are not present in the <samp>/proc/meminfo</samp> file.
In this case, you must install a new kernel containing support for
large pages.</p>
<p>If large page support is available,
but not enabled, <samp class="xph">HugePages_Total</samp> has the value 0.
 In this case, your administrator must enable large page support.
Check your operating system manual for more instructions.</p>
<p>For
the JVM to use large pages, your system must have an adequate number
of contiguous large pages available. If large pages cannot be allocated,
even when enough pages are available, possibly the large pages are
not contiguous. Configuring the number of large
pages at boot up creates them contiguously.</p>
<p>Large page allocations only succeed if the
user is a member of the group with its gid stored in <samp>/proc/sys/vm/hugetlb_shm_group</samp>,
or if Java is run with root
access. See <a href="http://devresources.linux-foundation.org/dev/robustmutexes/src/fusyn.hg/Documentation/vm/hugetlbpage.txt" target="_blank">http://devresources.linux-foundation.org/dev/robustmutexes/src/fusyn.hg/Documentation/vm/hugetlbpage.txt</a> for more information.</p>
<p>If a non-root user needs access to large pages,
their locked memory limit must be increased. The locked memory limit
must be at least as large as the maximum size of the Java heap. The maximum size of the Java heap can be specified using the <strong>-Xmx</strong> command-line
option, or determined by adding <strong>-verbose:sizes</strong> and
inspecting the output for the value <samp class="xph">-Xmx</samp>. If pam is
not installed, change the locked memory limit using the ulimit command.
If pam is installed, change the locked memory limit
by adding the following lines to <samp>/etc/security/limits.conf</samp>:</p>
<pre class="xmp">@<em>&lt;large group name&gt;</em> soft memlock 2097152
@<em>&lt;large group name&gt;</em> hard memlock 2097152</pre><p class="indatacontent"> Where <em>&lt;large
group name&gt;</em> is the name of the group with its gid stored
in <samp>/proc/sys/vm/hugetlb_shm_group</samp>.</p></p>
<a name="corba"></a>
<h2 id="corba"><a href="#ToC_121">CORBA support</a></h2>
<div>
<p>The Java Platform, Standard Edition
(JSE) supports, at a minimum, the specifications
that are defined in the compliance document from Sun. In some cases,
the IBM JSE ORB supports
more recent versions of the specifications.</p></div>
<p>The minimum specifications supported are defined
in the Official Specifications for CORBA support in Java SE
6: <a href="http://java.sun.com/javase/6/docs/api/org/omg/CORBA/doc-files/compliance.html" target="_blank">http://java.sun.com/javase/6/docs/api/org/omg/CORBA/doc-files/compliance.html</a>.</p>
<p>
<a name="corba__corba_giop"></a>
<h3 id="corba__corba_giop">Support for GIOP 1.2</h3>
<p>This SDK supports all versions
of GIOP, as defined by chapters 13 and 15 of the CORBA 2.3.1 specification,
OMG document <cite>formal/99-10-07</cite>.</p>
<p><a href="http://www.omg.org/cgi-bin/doc?formal/99-10-07" target="_blank">http://www.omg.org/cgi-bin/doc?formal/99-10-07</a></p>
<p>Bidirectional
GIOP is not supported.</p></p>
<p>
<a name="corba__corba_support_intercepters"></a>
<h3 id="corba__corba_support_intercepters">Support for Portable
Interceptors</h3>
<p>This SDK supports
Portable Interceptors, as defined by the OMG in the document <cite>ptc/01-03-04</cite>,
which you can obtain from:</p>
<p><a href="http://www.omg.org/cgi-bin/doc?ptc/01-03-04" target="_blank">http://www.omg.org/cgi-bin/doc?ptc/01-03-04</a></p>
<p>Portable
Interceptors are hooks into the ORB that ORB services can use to intercept
the normal flow of execution of the ORB.</p></p>
<p>
<a name="corba__corba_interop_naming"></a>
<h3 id="corba__corba_interop_naming">Support for Interoperable
Naming Service</h3>
<p>This SDK supports the Interoperable
Naming Service, as defined by the OMG in the document <cite>ptc/00-08-07</cite>,
which you can obtain from:</p>
<p><a href="http://www.omg.org/cgi-bin/doc?ptc/00-08-07" target="_blank">http://www.omg.org/cgi-bin/doc?ptc/00-08-07</a></p>
<p>The
default port that is used by the Transient Name Server (the tnameserv command),
when no <strong>ORBInitialPort</strong> parameter is given, has
changed from <em>900</em> to <em>2809</em>, which is the port number that
is registered with the IANA (Internet Assigned Number Authority) for
a CORBA Naming Service. Programs that depend on this default might
have to be updated to work with this version.</p>
<p>The initial context
that is returned from the Transient Name Server is now an org.omg.CosNaming.NamingContextExt.
Existing programs that narrow the reference to a context org.omg.CosNaming.NamingContext still
work, and do not need to be recompiled.</p>
<p>The ORB supports the <strong>-ORBInitRef</strong> and <strong>-ORBDefaultInitRef</strong> parameters
that are defined by the Interoperable Naming Service specification,
and the ORB::string_to_object operation now supports
the ObjectURL string formats (corbaloc: and corbaname:)
that are defined by the Interoperable Naming Service specification.</p>
<p>The
OMG specifies a method ORB::register_initial_reference to
register a service with the Interoperable Naming Service. However,
this method is not available in the Sun Java Core
API at Version 6.
Programs that have to register a service in the current version must
invoke this method on the IBM internal ORB implementation
class. For example, to register a service &quot;MyService&quot;:</p>
<p> </p>
<pre class="xmp">((com.ibm.CORBA.iiop.ORB)orb).register_initial_reference("MyService",
serviceRef);</pre>
<p>Where <samp>orb</samp> is an instance of org.omg.CORBA.ORB,
which is returned from ORB.init(), and <samp>serviceRef</samp> is
a CORBA Object, which is connected to the ORB. This mechanism is an
interim one, and is not compatible with future versions or portable
to non-IBM ORBs.</p></p>
<a name="corba_properties"></a>
<h3 id="corba_properties"><a href="#ToC_125">System properties for tracing the ORB</a></h3>
<div>
<p>A runtime debug feature provides improved serviceability.
You might find it useful for problem diagnosis or it might be requested
by IBM service personnel.</p></div>
<p>
<a name="wq127"></a>
<h4 id="wq127">Tracing Properties</h4></p>
<dl class="parml">
<dt class="bold"><strong>com.ibm.CORBA.Debug</strong>=<em>true</em></dt>
<dd>Turns on ORB tracing.
</dd>
<dt class="bold"><strong>com.ibm.CORBA.CommTrace</strong>=<em>true</em></dt>
<dd>Adds GIOP messages (sent and received) to the trace.
</dd>
<dt class="bold"><strong>com.ibm.CORBA.Debug.Output</strong>=<em>&lt;file&gt;</em></dt>
<dd>Specify the trace output file. By default, this is of the form <samp>orbtrc.DDMMYYYY.HHmm.SS.txt</samp>.
</dd>
</dl>
<p>
<a name="wq128"></a>
<h4 id="wq128">Example of ORB tracing</h4>
<p> For example, to trace
events and formatted GIOP messages from the command line, type:</p></p>
<pre class="xmp">java -Dcom.ibm.CORBA.Debug=true
     -Dcom.ibm.CORBA.CommTrace=true <em>&lt;myapp&gt;</em></pre>
<p>
<a name="wq129"></a>
<h4 id="wq129">Limitations</h4>
<p>Do not enable tracing
for normal operation, because it might cause performance degradation.
Even if you have switched off tracing, FFDC (First Failure Data Capture)
is still working, so serious errors are reported. If a debug output
file is generated, examine it to check on the problem. For example,
the server might have stopped without performing an ORB.shutdown().</p>
<p>The
content and format of the trace output might vary from version to
version.</p></p>
<p></p>
<a name="corba_tuning"></a>
<h3 id="corba_tuning"><a href="#ToC_129">System properties for tuning the ORB</a></h3>
<div>
<p>The ORB can be tuned to work well with your specific network. The
properties required to tune the ORB are described here.</p></div>
<p></p>
<dl class="parml">
<dt class="bold"><strong>com.ibm.CORBA.FragmentSize</strong>=<em>&lt;size in bytes&gt;</em></dt>
<dd>Used to control GIOP 1.2 fragmentation. The default size is 1024 bytes.

<p>To disable fragmentation, set the fragment size to 0 bytes:</p>
<pre class="xmp">java -Dcom.ibm.CORBA.FragmentSize=0 <em>&lt;myapp&gt;</em></pre>
</dd>
<dt class="bold"><strong>com.ibm.CORBA.RequestTimeout</strong>=<em>&lt;time in
seconds&gt;</em></dt>
<dd>Sets the maximum time to wait for a CORBA Request. By default the ORB
waits indefinitely. Do not set the timeout too low to avoid connections ending
unnecessarily.
</dd>
<dt class="bold"><strong>com.ibm.CORBA.LocateRequestTimeout</strong>=<em>&lt;time
in seconds&gt;</em></dt>
<dd>Set the maximum time to wait for a CORBA LocateRequest. By default the
ORB waits indefinitely.
</dd>
<dt class="bold"><strong>com.ibm.CORBA.ListenerPort</strong>=<em>&lt;port number&gt;</em></dt>
<dd>Set the port for the ORB to read incoming requests on. If this property
is set, the ORB starts listening as soon as it is initialized. Otherwise,
it starts listening only when required.
</dd>
</dl>
<a name="corba_security"></a>
<h3 id="corba_security"><a href="#ToC_130">Java security permissions for the ORB</a></h3>
<div>
<p>When running with a Java SecurityManager,
invocation of some methods in the CORBA API classes might cause permission
checks to be made, which might result in a SecurityException.
If your program uses any of these methods, ensure that it is granted the necessary
permissions.</p></div>
<p></p>
<a name="corba_security__corbatable"></a>
<table id="corba_security__corbatable" width="100%" summary="" border="1" frame="border" rules="all">
<caption>Table 5. Methods affected when running with Java SecurityManager</caption>
<thead valign="bottom">
<tr>
<th id="wq133" width="32%" align="left">Class/Interface</th>
<th id="wq134" width="32%" align="left">Method</th>
<th id="wq135" width="34%" align="left">Required permission</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq133">org.omg.CORBA.ORB</td>
<td headers="wq134">init</td>
<td headers="wq135">java.net.SocketPermission resolve</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA.ORB</td>
<td headers="wq134">connect</td>
<td headers="wq135">java.net.SocketPermission listen</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA.ORB</td>
<td headers="wq134">resolve_initial_references</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq134">_is_a</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq134">_non_existent</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq134">OutputStream _request (String, boolean)</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA. portable.ObjectImpl</td>
<td headers="wq134">_get_interface_def</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA. Request</td>
<td headers="wq134">invoke</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA. Request</td>
<td headers="wq134">send_deferred</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">org.omg.CORBA. Request</td>
<td headers="wq134">send_oneway</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
<tr>
<td headers="wq133">javax.rmi. PortableRemoteObject</td>
<td headers="wq134">narrow</td>
<td headers="wq135">java.net.SocketPermission connect</td>
</tr>
</tbody>
</table>
<a name="corba_classes"></a>
<h3 id="corba_classes"><a href="#ToC_131">ORB implementation classes</a></h3>
<div>
<p>A list of the ORB implementation classes.</p></div>
<p>
<p>The ORB implementation classes in this release are: 
</p>
<ul>
<li>org.omg.CORBA.ORBClass=com.ibm.CORBA.iiop.ORB</li>
<li>org.omg.CORBA.ORBSingletonClass=com.ibm.rmi.corba.ORBSingleton</li>
<li>javax.rmi.CORBA.UtilClass=com.ibm.CORBA.iiop.UtilDelegateImpl</li>
<li>javax.rmi.CORBA.StubClass=com.ibm.rmi.javax.rmi.CORBA.StubDelegateImpl</li>
<li>javax.rmi.CORBA.PortableRemoteObjectClass=com.ibm.rmi.javax.rmi.PortableRemoteObject</li></ul>
<p>These are the default values, and you are advised not to set these
properties or refer to the implementation classes directly.  For portability,
make references only to the CORBA API classes, and not to the implementation.
These values might be changed in future releases.</p></p>
<a name="rmi-iiop"></a>
<h2 id="rmi-iiop"><a href="#ToC_132">RMI over IIOP</a></h2>
<div>
<p>Java Remote Method Invocation (RMI)
provides a simple mechanism for distributed Java programming.
RMI over IIOP (RMI-IIOP) uses the Common Object Request Broker Architecture
(CORBA) standard Internet Inter-ORB Protocol (IIOP) to extend the
base Java RMI to perform communication. This allows
direct interaction with any other CORBA Object Request Brokers (ORBs),
whether they were implemented in Java or
another programming language.</p></div>
<p>The following documentation is available:</p>
<ul>
<li>The <a href="http://www.ibm.com/developerworks/java/jdk/additional/rmi-iiop6.html" target="_blank">RMI-IIOP Programmer's Guide</a> is
an introduction to writing RMI-IIOP programs.</li>
<li>The <cite>Java Language to IDL Mapping</cite> document
is a detailed technical specification of RMI-IIOP: <a href="http://www.omg.org/cgi-bin/doc?ptc/00-01-06.pdf" target="_blank">http://www.omg.org/cgi-bin/doc?ptc/00-01-06.pdf</a>.</li></ul>
<a name="rmi"></a>
<h2 id="rmi"><a href="#ToC_133">Implementing the Connection Handler Pool for RMI</a></h2>
<div>
<p>Thread pooling for RMI Connection Handlers is not enabled by default.</p></div>
<p>
<a name="wq137"></a>
<h3 id="wq137">About this task</h3>
<p>To enable the connection pooling implemented at the RMI TCPTransport level,
set the option  </p>
<pre class="xmp">-Dsun.rmi.transport.tcp.connectionPool=true</pre>
<p>This
version of the Runtime Environment does not have a setting that you can use
to limit the number of threads in the connection pool.</p></p>
<a name="bigd"></a>
<h2 id="bigd"><a href="#ToC_135">Enhanced BigDecimal</a></h2>
<div>
<p>From Java 5.0, the IBM BigDecimal class
has been adopted by Sun as java.math.BigDecimal. The com.ibm.math.BigDecimal class
is reserved for possible future use by IBM and is currently deprecated. Migrate
existing Java code to use java.math.BigDecimal.</p></div>
<p>The new java.math.BigDecimal uses the
same methods as both the previous java.math.BigDecimal and com.ibm.math.BigDecimal.
Existing code using java.math.BigDecimal continues to work
correctly. The two classes do not serialize.</p>
<p>To migrate existing Java code to use the java.math.BigDecimal class,
change the import statement at the top of your <samp>.java</samp> file
from: <samp class="xph">import com.ibm.math.*;</samp> to <samp class="xph">import java.math.*;</samp>.</p>
<a name="xtoolkit"></a>
<h2 id="xtoolkit"><a href="#ToC_136">Support for XToolkit</a></h2>
<div>
<p>The IBM SDK
for Linux, v6 includes XToolkit
by default. You need XToolkit when using the SWT_AWT bridge in Eclipse
to build an application that uses both SWT and Swing.</p></div>
<a name="wq138"></a>
<div class="note-noindent" id="wq138">
<span class="notetitle">Restriction:</span> <span class="notebody">Motif is no longer supported and will be removed
in a later release.</span></div>
<p>Related links:
</p>
<ul>
<li>An example of integrating Swing into Eclipse RCPs: <a href="http://eclipsezone.com/eclipse/forums/t45697.html" target="_blank">http://eclipsezone.com/eclipse/forums/t45697.html</a></li>
<li>Reference Information in the Eclipse information center: <a href="http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.platform.doc.isv/reference/api/org/eclipse/swt/awt/SWT_AWT.html" target="_blank">http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.platform.doc.isv/reference/api/org/eclipse/swt/awt/SWT_AWT.html</a></li>
<li>Set up information is available on the Sun Microsystems Inc. Web
site: <a href="http://java.sun.com/javase/6/docs/technotes/guides/awt/1.5/xawt.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/awt/1.5/xawt.html</a></li></ul>
<a name="attachapi"></a>
<h2 id="attachapi"><a href="#ToC_137">Support for the Java Attach
API</a></h2>
<div>
<p>Your application can connect to another &quot;target&quot; virtual
machine using the Java Attach
API. Your application can then load an agent application into the
target virtual machine, for example to perform tasks such as monitoring
status.</p></div>
<p>Code for agent applications, such as JMX agents or JVMTI agents,
is normally loaded during virtual machine startup by specifying special
startup parameters. Requiring startup parameters might not be convenient
for using agents on applications that are already running, such as WebSphere Application Servers.
You can use the Java Attach
API to load an agent at any time, by specifying the process ID of
the target virtual machine. The Attach API capability is sometimes
called the &quot;late attach&quot; capability.</p>
<p>The Attach API is enabled by default for Java 6 SR 6 and later. <span><img src="../delta.gif" alt="Start of change" /><font color="RED">For Java 6 SR 9 and later, processes
using the default z/OS&reg; OMVS
segment cannot enable the attach API for security reasons.</font><img src="../deltaend.gif" alt="End of change" /></span></p>
<p>
<a name="wq139"></a>
<h3 id="wq139">Security considerations</h3>
<p>Security for the Java Attach API is handled by UNIX user and group file permissions.</p>
<p>The Java Attach API creates files and
directories in a common directory. The
common directory, subdirectories, and files in it, have UNIX file permissions. To prevent &quot;spoofing&quot; attacks,
change the ownership of the common directory to ROOT or another privileged
user ID.</p>
<p>The key security features of the Java Attach API are:
</p>
<ul>
<li>A process using
the Java Attach API must be
owned by the same UNIX user
ID as the target process. This constraint ensures that only the target
process owner can attach other applications to the target process.</li>
<li>For Java 6 after
SR 6, access to the files or directories owned by
a process is controlled by user permissions only; group access (read/write)
is disabled.</li>
<li>The common directory uses the sticky bit to prevent a user from
deleting or replacing a subdirectory belonging to another user. To
preserve the security of this mechanism, set the ownership of the
common directory to ROOT.</li>
<li>The subdirectory for a process is accessible only by members of
the same UNIX group as the
owner of a process. For Java 6 after SR 6, read/write
access is restricted to the owner only, except for the <samp>attachNotificationSync</samp> file.
The <samp>attachNotificationSync</samp> file can be written
to by all users. This exception does not affect security because the
file is used exclusively for synchronization and is never written
to or read.</li>
<li>Information about the target process can be written only by the
owner. Information about the target process can be read only by the
owner or a member of the same group as the owner. For Java 6 after SR 6, read/write
access is restricted to the owner only.</li></ul>
<p>You must secure access to the Java Attach API capability to ensure that only
authorized users or processes can connect to another virtual machine.
If you do not intend to use the Java Attach
API capability, disable this feature using a Java system property. Set the <strong>com.ibm.tools.attach.enable</strong> system
property to the value <strong>no</strong>; for example:</p>
<pre class="xmp">-Dcom.ibm.tools.attach.enable=no</pre><p class="indatacontent">The
Attach API can be enabled by setting the <strong>com.ibm.tools.attach.enable</strong> system
property to the value <strong>yes</strong>; for example:</p>
<pre class="xmp">-Dcom.ibm.tools.attach.enable=yes</pre></p>
<p>
<a name="wq140"></a>
<h3 id="wq140">Using the Java Attach
API</h3>
<p>By default, the target virtual machine is identified
by its process ID. To use a different target, change the system property <strong>com.ibm.tools.attach.id</strong>;
for example: </p>
<pre class="xmp">-Dcom.ibm.tools.attach.id=&lt;process_ID&gt;</pre>
<p>The
target process also has a human-readable &quot;display name&quot;. By default,
the display name is the command line used to start Java. To change the default display name,
use the <strong>com.ibm.tools.attach.displayName</strong> system
property. The ID and display name cannot be changed after the application
has started.</p>
<p>The Attach API creates working files in a common
directory called <samp>.com_ibm_tools_attach</samp>, which
is created in the system temporary directory. The system property <strong>java.io.tmpdir</strong> holds
the value of the system temporary directory. On non-Windows systems, the system temporary directory
is typically <samp>/tmp</samp>. To modify the working directory, use
the Java system property <strong>com.ibm.tools.attach.directory</strong>;
for example:</p>
<pre class="xmp">-Dcom.ibm.tools.attach.directory=/working</pre><p class="indatacontent">The
directory must be located on a local drive. Specifying a network mounted
file system might result in incorrect behavior.</p>
<p>If your Java application ends abnormally,
for example, following a crash or a SIGKILL signal, the process subdirectory
is not deleted. The Java VM
detects and removes obsolete subdirectories where possible. The subdirectory
can also be deleted by the owning user ID.</p>
<p>On heavily loaded
system, applications might experience timeouts when attempting to
connect to target applications. The default timeout is 120 seconds.
Use the <strong>com.ibm.tools.attach.timeout</strong> system property
to specify a different timeout value in milliseconds. For example,
to timeout after 60 seconds:</p>
<pre class="xmp">-Dcom.ibm.tools.attach.timeout=60000</pre><p class="indatacontent">A
timeout value of zero indicates an indefinite wait.</p>
<p>For JMX
applications, you can disable authentication by editing the <samp class="xph">&lt;JAVA_HOME&gt;/jre/lib/management/management.properties</samp> file.
Set the following properties to disable authentication in JMX: </p>
<pre class="xmp">com.sun.management.jmxremote.authenticate=false
com.sun.management.jmxremote.ssl=false</pre>
<p>An unsuccessful
attempt to start the Attach API results in one of the following exceptions: 
</p>
<ul>
<li><samp class="xph">com.ibm.tools.attach.AgentLoadException</samp></li>
<li><samp class="xph">com.ibm.tools.attach.AgentInitializationException</samp></li>
<li><samp class="xph">com.ibm.tools.attach.AgentNotSupportedException</samp></li>
<li><samp class="xph">java.io.IOException</samp></li></ul>
<p>A useful reference for information about the Attach API
can be found at <a href="http://java.sun.com/javase/6/docs/technotes/guides/attach/index.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/attach/index.html</a>. The IBM implementation
of the Attach API corresponds approximately to the Sun Microsystems,
Inc. implementation. However, if your application originally used com.sun.tools.attach.* methods
or classes, you must modify and recompile the application to use the com.ibm.tools.attach.* implementation.</p></p>
<a name="deploying"></a>
<h1 id="deploying"><a href="#ToC_140">Plug-in, Applet Viewer and Web Start</a></h1>
<div>
<p>The Java plug-in is used to run Java applications in the browser. The <strong>appletviewer</strong> is used to test applications designed to
be run in a browser. Java Web
Start is used to deploy desktop Java applications
over a network, and provides a mechanism for keeping them up-to-date.</p></div>
<a name="using_plugin"></a>
<h2 id="using_plugin"><a href="#ToC_141"><strong><span class="bold-italic">(Linux IA 32 bit and PPC32 only) </span></strong>Using
the Java plug-in</a></h2>
<div>
<p>The Java plug-in
is a web browser plug-in. You use the Java plug-in
to run applets in the browser.</p></div>
<p>Allow enough time for applets to finish loading, otherwise your
browser might seem to &quot;stop&quot;. For example, if you click <strong>Back</strong> and
then click <strong>Forward</strong> while an applet is loading,
the HTML pages might be unable to load.</p>
<p>The Java plug-in is documented
at: <a href="http://download.oracle.com/javase/6/docs/technotes/guides/plugin/developer_guide/contents.html" target="_blank">http://download.oracle.com/javase/6/docs/technotes/guides/plugin/developer_guide/contents.html</a>.</p>
<a name="suppbrowse"></a>
<h3 id="suppbrowse"><a href="#ToC_142">Supported browsers</a></h3>
<div>
<p>The Java plug-in
supports SeaMonkey, and Mozilla
Firefox.</p></div>
<p></p>
<a name="suppbrowse__plugintable-linux"></a>
<table id="suppbrowse__plugintable-linux" width="100%" summary="" border="1" frame="border" rules="all">
<caption>Table 6. Browsers supported by the Java plug-in on Linux IA32</caption>
<thead valign="bottom">
<tr>
<th id="wq142" width="50%" align="left" valign="top">Browser</th>
<th id="wq143" width="50%" align="left" valign="top">Supported versions</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq142">Firefox</td>
<td headers="wq143">2.0, <span>3.0,</span> <span>3.5, </span><span><img src="../delta.gif" alt="Start of change" /><font color="RED"> 3.6</font><img src="../deltaend.gif" alt="End of change" /></span></td>
</tr>
</tbody>
</table>
<a name="suppbrowse__plugintable-ppc32-60"></a>
<table id="suppbrowse__plugintable-ppc32-60" width="100%" summary="" border="1" frame="border" rules="all">
<caption>Table 7. Browsers supported by the Java plug-in on Linux PPC32</caption>
<thead valign="bottom">
<tr>
<th id="wq144" width="50%" align="left" valign="top">Browser</th>
<th id="wq145" width="50%" align="left" valign="top">Supported Versions</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq144">SeaMonkey</td>
<td headers="wq145">1.0.8
<a name="wq146"></a>
<div class="note-noindent" id="wq146">
<span class="notetitle">Note:</span> <span class="notebody">SeaMonkey is not supported on some Linux PPC32 operating systems.</span></div></td>
</tr>
</tbody>
</table>
<p>Later minor releases of these browsers are also supported.</p>
<a name="installing_plugin"></a>
<h3 id="installing_plugin"><a href="#ToC_143">Installing the Java plug-in</a></h3>
<div>
<p>To install the Java plug-in,
symbolically link it to the plug-in directory for your browser.</p></div>
<p>The Java plug-in is based
on the Mozilla <a href="http://www-archive.mozilla.org/oji/" target="_blank">Open JVM
Integration</a> initiative, which is used with most Mozilla products
and derivatives, including Firefox.</p>
<p>You must symbolically link the plug-in, rather than
copy it, so that the browser and plug-in can locate the JVM.</p>
<a name="lnx_firefox"></a>
<h4 id="lnx_firefox">Firefox</h4>
<div>
<p>These steps make the Java plug-in
available to Mozilla Firefox users.</p></div>
<p>
<a name="wq147"></a>
<h5 id="wq147">Procedure</h5></p>
<ol type="1">
<li>Log in as root.</li>
<li>Change to your Firefox plug-ins directory (which differs,
depending on the Linux distributions). 
<pre class="xmp">cd /usr/local/mozilla-firefox/plugins/</pre></li>
<li>Create a symbolic link to
the plug-in. To link with an old style plug-in:
<pre class="xmp"> ln -s /opt/ibm/java-&lt;arch&gt;-60/jre/plugin/&lt;arch&gt;/ns7/libjavaplugin_oji.so .</pre> To link with a Next-Generation plug-in, which is available
only with IA32:
<pre class="xmp"> ln -s /opt/ibm/java-&lt;arch&gt;-60/jre/lib/&lt;arch&gt;/libnpjp2.so .</pre> Where &lt;arch&gt; is the architecture
of your system.</li></ol>
<p>
<a name="wq149"></a>
<h5 id="wq149">What to do next</h5>
<p>You must symbolically link the plug-in, rather than copy
it, so that it can locate the JVM.</p></p>
<a name="plugin_dom"></a>
<h3 id="plugin_dom"><a href="#ToC_147">Common Document Object Model (DOM) support</a></h3>
<div>
<p>Because of limitations in particular browsers, you might not be
able to implement all the functions of the org.w3c.dom.html package.</p></div>
<p>
<p>One of the following errors is thrown: 
</p>
<ul>
<li> sun.plugin.dom.exception.InvalidStateException</li>
<li> sun.plugin.dom.exception.NotSupportedException</li></ul></p>
<a name="plugin_dbcs"></a>
<h3 id="plugin_dbcs"><a href="#ToC_148">Using DBCS parameters</a></h3>
<div>
<p>The Java plug-in supports double-byte
characters (for example, Chinese Traditional BIG-5, Korean, and Japanese)
as parameters for the tags &lt;APPLET&gt;, &lt;OBJECT&gt;,
and &lt;EMBED&gt;. You must select the correct character
encoding for your HTML document so that the Java plug-in
can parse the parameter.</p></div>
<p>
<a name="wq151"></a>
<h4 id="wq151">About this task</h4>
<p>Specify character encoding for your HTML document by
using the <samp class="xph">&lt;META&gt;</samp> tag in the <samp class="xph">&lt;HEAD&gt;</samp> section
like this: </p>
<pre class="xmp">&lt;meta http-equiv="Content-Type" content="text/html; charset=big5"&gt;</pre><p class="indatacontent">This
example tells the browser to use the Chinese BIG-5 character encoding
to parse the HTML file.</p></p>
<a name="applets"></a>
<h2 id="applets"><a href="#ToC_150">Working with applets</a></h2>
<div>
<p>With the Applet Viewer, you can run one or more applets that are
called by reference in a Web page (HTML file) by using the &lt;APPLET&gt; tag.
The Applet Viewer finds the &lt;APPLET&gt; tags in the HTML
file and runs the applets, in separate windows, as specified by the tags.</p></div>
<p>Because the Applet Viewer is for viewing applets, it cannot display a whole
Web page that contains many HTML tags. It parses only the &lt;APPLET&gt; tags
and no other HTML on the Web page.</p>
<a name="applet_viewer"></a>
<h3 id="applet_viewer"><a href="#ToC_151">Running and debugging applets with the Applet Viewer</a></h3>
<div>
<p>Use the following commands to run and debug an applet with
the Applet Viewer.</p></div>
<p>
<a name="wq152"></a>
<h4 id="wq152">About this task</h4>
<p><strong>Running applets with the Applet Viewer:</strong></p>
<p>From
a shell prompt, enter:</p></p>
<pre class="xmp">   appletviewer <em>&lt;name&gt;</em></pre>
<p>where <em>&lt;name&gt;</em> is
one of the following:</p>
<ul>
<li>The file name of an HTML file that calls an applet.</li>
<li>The URL of a Web page that calls an applet.</li></ul>
<p>For example, to start the Applet Viewer on an HTML file that
calls an applet, type at a shell prompt:</p>
<pre class="xmp">  appletviewer $HOME/<em>&lt;filename&gt;</em>.html</pre>
<p>Where <em>filename</em> is the name of the
HTML file.</p>
<p>To
start the Applet Viewer on a Web page, type at a shell prompt:</p>
<pre class="xmp">appletviewer http://java.sun.com/applets/jdk/1.4/demo/applets/NervousText/example1.html</pre>
<p>The
Applet Viewer does not recognize the <strong>charset</strong> option
of the &lt;</p>
<pre class="xmp">META</pre><p class="indatacontent">&gt; tag. If the file that the
Applet Viewer loads is not encoded as the system default, an I/O exception
might occur. To avoid the exception, use the <strong>-encoding</strong> option
when you run appletviewer.  For example:  </p>
<pre class="xmp">appletviewer -encoding JISAutoDetect sample.html</pre>
<p><strong>Debugging
applets with the Applet Viewer:</strong></p>
<p>For example:</p>
<pre class="xmp">cd demo/applets/TicTacToe
../../../bin/appletviewer -debug example1.html</pre>
<p>You
can find documentation about how to debug applets using the Applet
Viewer at the Sun Web site: <a href="http://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/debugger.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/debugger.html</a>.</p>
<a name="using_webstart"></a>
<h2 id="using_webstart"><a href="#ToC_153"><strong><span class="bold-italic">(Linux IA 32-bit, PPC32, and PPC64 only)</span></strong> Using
Web Start</a></h2>
<div>
<p>Java Web Start is
used for Java application deployment.</p></div>
<p>
<p>With Web Start, you can start and manage applications
directly from the Web. Applications are cached to minimize installation
times. Applications are automatically upgraded when new versions become
available.</p></p>
<p>
<p>Web Start supports these command-line arguments
documented at <a href="http://java.sun.com/javase/6/docs/technotes/guides/javaws/developersguide/syntax.html#resources" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/javaws/developersguide/syntax.html#resources</a>: 
</p>
<ul>
<li>-verbose</li>
<li>-version</li>
<li>-showversion</li>
<li>-help</li>
<li>-X</li>
<li>-ea</li>
<li>-enableassertions</li>
<li>-da</li>
<li>-disableassertions</li>
<li>-esa</li>
<li>-enablesystemassertions</li>
<li>-dsa</li>
<li>-disablesystemassertions</li>
<li>-Xint</li>
<li>-Xnoclassgc</li>
<li>-Xdebug</li>
<li>-Xfuture</li>
<li>-Xrs</li>
<li>-Xms</li>
<li>-Xmx</li>
<li>-Xss</li></ul></p>
<p>
<p>Web Start also supports <strong>-Xgcpolicy</strong> to
set the garbage collection policy.</p></p>
<p>
<p>For more information about
Web Start, see: 
</p>
<ul>
<li><a href="http://java.sun.com/products/javawebstart" target="_blank">http://java.sun.com/products/javawebstart</a> and</li></ul>
<ul>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/javaws/index.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/javaws/index.html</a>.</li></ul><p class="indatacontent"> For more information about deploying applications, see: </p>
<ul>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/deployment/index.html" target="_blank">http://java.sun.com/javase/6/docs/technotes/guides/deployment/index.html</a>.</li></ul></p>
<a name="installing_webstart"></a>
<h3 id="installing_webstart"><a href="#ToC_154">Running Web Start</a></h3>
<div>
<p>Web Start can be run from a Web page or the command line.
Web Start applications are stored in the Java Application
Cache.</p></div>
<p>
<a name="wq157"></a>
<h4 id="wq157">About this task</h4>
<p>You can start Web Start in a number of different ways.</p></p>
<p>
<a name="wq158"></a>
<h4 id="wq158">Procedure</h4></p>
<ul>
<li>Select a link on a Web page that refers to a <samp>.jnlp</samp> file. If your browser does not have the correct
association to run Web Start applications, select the <samp>/opt/ibm/java-&lt;arch&gt;-60/jre/bin/javaws</samp> command from the <strong>Open/Save</strong> window
to start the Web Start application.</li>
<li>At a shell prompt,
type: 
<pre class="xmp">javaws <em>&lt;URL&gt;</em></pre>Where <em>&lt;URL&gt;</em> is
the location of a <samp>.jnlp</samp> file.</li>
<li>If you have used Java Web
Start to open the application in the past, use the Java Application
Cache Viewer. At a shell prompt, type:
<pre class="xmp"><samp>/opt/ibm/java-&lt;arch&gt;-60/jre/bin/javaws</samp><span> -viewer</span></pre> 

<p>All Java Web Start applications are stored in the Java Application Cache. An application is downloaded
only if the latest version is not in the cache.</p></li></ul>
<a name="webstart_ssv"></a>
<h3 id="webstart_ssv"><a href="#ToC_157"><strong><span class="bold-italic">(Linux IA
32-bit only) </span></strong>WebStart Secure Static Versioning</a></h3>
<div>
<p>Static versioning allows Web Start applications to request
a specific JVM version on which those applications will run. Because
static versioning also allows applications to exploit old security
vulnerabilities on systems that have been upgraded to a new JVM, Secure
Static Versioning (SSV) is now used by default.</p></div>
<p>With SSV, the user is warned before running any unsigned Web Start
application that requests a specific JVM, if the requested JVM is
installed. Signed applications and applications that request the latest
version of the JVM run as usual.</p>
<p>You can disable SSV by setting the <strong>deployment.javaws.ssv.enabled</strong> property
in the <samp>deployment.properties</samp> file to false.</p>
<a name="shipping"></a>
<h2 id="shipping"><a href="#ToC_158">Distributing Java applications</a></h2>
<div>
<p>Java applications typically consist
of class, resource, and data files.</p></div>
<p>When you distribute a Java application,
your software package probably consists of the following parts:</p>
<ul>
<li>Your own class, resource, and data files</li>
<li>An installation procedure or program</li></ul>
<p>To run your application,
a user needs the Runtime Environment for Linux.  The  SDK for Linux software contains
a Runtime Environment. However,
you cannot assume that your users have the SDK for Linux software installed.</p>
<p>Your SDK for Linux software license
does <strong>not</strong> allow you to redistribute any of the SDK's files with your
application. You must ensure that a licensed version of the SDK for Linux is installed on
the target workstation.</p>
<a name="classdatasharing"></a>
<h1 id="classdatasharing"><a href="#ToC_159">Class data sharing between JVMs</a></h1>
<div>
<p>Class data sharing enables multiple JVMs
to share a single space in memory.</p></div><a id="idx48" name="idx48"></a>
<p>You can share class data between Java Virtual Machines (JVMs) by storing it in
a memory-mapped cache file
on disk. Sharing
reduces the overall virtual storage consumption when more than one
JVM shares a cache. Sharing also reduces the startup time for a JVM
after the cache has been created. The shared class cache is independent
of any running JVM and persists until it is deleted.</p>
<p>A shared cache can contain:
</p>
<ul>
<li>Bootstrap classes</li>
<li>Application classes</li>
<li>Metadata that describes the classes</li>
<li>Ahead-of-time (AOT) compiled code</li></ul>
<a name="shc_overview"></a>
<h2 id="shc_overview"><a href="#ToC_160">Overview of class data sharing</a></h2>
<div>
<p>Class data sharing provides a method of reducing memory
footprint and improving JVM start-up time. <span>Java 6 provides new and improved
features in cache management, isolation, and performance.</span></p></div>
<p>
<a name="wq159"></a>
<h3 id="wq159">Enabling class data sharing</h3>
<p>Enable class
data sharing by using the <strong>-Xshareclasses</strong> option
when starting a JVM. The JVM connects to an existing cache or creates a new
cache if one does not exist.</p>
<p>All bootstrap and application classes
loaded by the JVM are shared by default. Custom class loaders share
classes automatically if they extend the application class loader.
Otherwise, they must use the Java Helper
API provided with the JVM to access the cache. See <a href="#adaptingclassloaders">Adapting custom class loaders to share classes</a>.</p>
<p>The JVM can also store ahead-of-time
(AOT) compiled code in the cache for certain methods to improve the
startup time of subsequent JVMs. The AOT compiled code is not shared
between JVMs, but is cached to reduce compilation time when the JVM starts.
The amount of AOT code stored in the cache is determined heuristically. You
cannot control which methods get stored in the cache. You can set
upper and lower limits on the amount of cache space used for AOT code,
or you can disable AOT caching completely. See <a href="#sharedclassesxoptions">Class data sharing command-line options</a> for
more information.</p></p>
<p>
<a name="wq160"></a>
<h3 id="wq160">Cache access</h3>
<p><span>A
JVM can access a cache with either read-write or read-only access.</span> Any
JVM connected to a cache with read-write access can
update the cache. Any number of JVMs can concurrently read from the
cache, even while another JVM is writing to it.</p>
<p>You must take
care if runtime bytecode modification is being used. See <a href="#runtimebytecode">Runtime bytecode modification</a> for more information.</p></p>
<p>
<a name="wq161"></a>
<h3 id="wq161">Dynamic updating of the cache</h3>
<p>The shared
class cache persists beyond the lifetime of any JVM. Therefore, the
cache is updated dynamically to reflect any modifications that might
have been made to JARs or classes on the file system. The dynamic
updating makes the cache independent of the application using it.</p></p>
<p>
<a name="wq162"></a>
<h3 id="wq162">Cache security</h3>
<p>Access to the shared class
cache is limited by operating system permissions and Java security permissions. The
shared class cache is created with user access by default unless the <strong>groupAccess</strong> command-line
suboption is used. Only a class loader that has registered to
share class data can update the shared class cache.</p>
<p>The
cache memory is protected against accidental or deliberate corruption
using memory page protection. This protection is not an absolute guarantee
against corruption because the JVM must unprotect pages to write to
them. The only way to guarantee that a cache cannot be modified is
to open it read-only.</p>
<p>If a Java SecurityManager is installed, classloaders,
excluding the default bootstrap, application, and extension class loaders,
must be granted permission to share classes. Grant permission by adding SharedClassPermission lines
to the <samp>java.policy</samp> file. See <a href="#usingsharedclasspermissions">Using SharedClassPermission</a> for
more information. The RuntimePermission createClassLoader restricts
the creation of new class loaders and therefore also restricts access
to the cache.</p></p>
<p>
<a name="wq163"></a>
<h3 id="wq163">Cache lifespan</h3>
<p>Multiple caches can exist
on a system and you specify them by name as a suboption to the <strong>-Xshareclasses</strong> command.
A JVM can connect to only one cache at any one time.</p>
<p>You can override
the default cache size on startup using <strong>-Xscmx&lt;n&gt;&lt;size&gt;</strong>.
This size is then fixed for the lifetime of the cache. Caches exist
until they are explicitly deleted using a suboption to the <strong>-Xshareclasses</strong> command
or the cache file is deleted manually.</p></p>
<p>
<a name="wq164"></a>
<h3 id="wq164">Cache utilities</h3>
<p>All cache utilities are
suboptions to the <strong>-Xshareclasses</strong> command. See <a href="#sharedclassesxoptions">Class data sharing command-line options</a> or
use <strong>-Xshareclasses:help</strong> to see a list of available
suboptions.</p></p>
<a name="sharedclassesxoptions"></a>
<h2 id="sharedclassesxoptions"><a href="#ToC_167">Class data sharing command-line options</a></h2>
<div>
<p>Class data sharing and the cache management utilities are
controlled using command-line options to the Java launcher.</p></div><a id="idx49" name="idx49"></a><a id="idx50" name="idx50"></a>
<p>
<p>For options that take a <em>&lt;size&gt;</em> parameter,
suffix the number with "k" or "K" to indicate kilobytes, "m" or "M"
to indicate megabytes, or "g" or "G" to indicate gigabytes.</p></p>
<dl class="parml">
<dt class="bold"><strong>-Xscmaxaot</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the maximum number of bytes in the cache that can be used
for AOT data. Use this option to ensure a certain amount of cache
space is available for non-AOT data. By default, the maximum limit
for AOT data is the amount of free space in the cache. The value of
this option should not be smaller than the value of <strong>-Xscminaot</strong> and
must not be larger than the value of <strong>-Xscmx</strong>.
</dd>
<dt class="bold"><strong>-Xscminaot</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the minimum number of bytes in the cache to reserve for AOT
data. By default, no space is reserved for AOT data, although AOT
data is written to the cache until the cache is full or the <strong>-Xscmaxaot</strong> limit
is reached. The value of this option must not exceed the value of <strong>-Xscmx</strong> or <strong>-Xscmaxaot</strong>.
The value of <strong>-Xscminaot</strong> must always be considerably
less than the total cache size because AOT data can be created only
for cached classes. If the value of <strong>-Xscminaot</strong> is
equal to the value of <strong>-Xscmx</strong>, no class data or
AOT data is stored because AOT data must be associated with a class
in the cache.
</dd>
<dt class="bold"><strong>-Xscdmx</strong><em>&lt;size&gt;</em></dt>
<dd>You can use the <strong>-Xscdmx</strong> option to control
the size of the class debug area when creating a shared class cache.
The <strong>-Xscdmx</strong> option works in a similar way to
the <strong>-Xscmx</strong> option used to control the overall
size of the shared class cache. The size of <strong>-Xscdmx</strong> must
not exceed the size of <strong>-Xscmx</strong>. By default, the
size of the class debug area is a percentage of the free bytes in
a newly created or empty cache. 

<p><em>size</em> can be
a percentage, expressed as a number, or an absolute value.</p>

<p>A
class debug area is still created if you use the <strong>-Xnolinenumbers</strong> option
with the <strong>-Xscdmx</strong> option on the command line.</p>
</dd>
<dt class="bold"><strong>-Xscmx</strong><em>&lt;size&gt;</em></dt>
<dd>Specifies cache size. This option applies only if a cache is being
created and no cache of the same name exists.  The default cache size
is platform-dependent. You can find out the size value being used
by adding <strong>-verbose:sizes</strong> as a command-line argument.
The minimum cache size is 4 KB. The maximum cache size is also platform-dependent.
(See <a href="#cachesizelimits">Cache size limits</a>.)
</dd>
<dt class="bold"><strong>-Xshareclasses</strong>:<em>&lt;suboption&gt;</em>[,<em>&lt;suboption&gt;</em>...]</dt>
<dd>Enables class data sharing. Can take a number of suboptions, some
of which are cache utilities. Cache utilities perform the required
operation on the specified cache, without starting the VM. You can
combine multiple suboptions, separated by commas, but the cache utilities
are mutually exclusive. When running cache utilities, the message <samp>Could
not create the Java virtual
machine</samp> is expected. Cache utilities do not create the virtual
machine.

<p>Some cache utilities can work with caches
from previous Java versions
or caches created by JVMs with different bit-widths. These caches
are referred to as &quot;incompatible&quot; caches.</p>

<p>You can use the
following suboptions with the <strong>-Xshareclasses</strong> option: 
</p>
<dl class="parml">
<dt class="bold"><strong>help</strong></dt>
<dd>Lists all the command-line suboptions.
</dd>
<dt class="bold"><strong>name</strong>=<em>&lt;name&gt;</em></dt>
<dd>Connects to a cache of a given name, creating the cache if it
does not already exist. Also used to indicate the cache that is to
be modified by cache utilities; for example, <strong>destroy</strong>.
Use the <strong>listAllCaches</strong> utility to show which named
caches are currently available. If you do not specify a name, the
default name &quot;sharedcc_%u&quot; is used. %u in the cache name inserts
the current user name. You can specify &quot;%g&quot; in
the cache name to insert the current group name.
</dd>
<dt class="bold"><strong>cacheDir=</strong><em>&lt;directory&gt;</em></dt>
<dd>Sets the directory in which cache data is read and written. By
default, <em>&lt;directory&gt;</em> is <samp>/tmp/javasharedresources</samp>.
The user must have sufficient permissions in <em>&lt;directory&gt;</em>. The JVM writes
persistent cache files directly into the directory specified. Persistent
cache files can be safely moved and deleted from the file system. Non-persistent caches are stored in shared memory and have control
files that describe the location of the memory. Control files are
stored in a <samp>javasharedresources</samp> subdirectory
of the <strong>cacheDir</strong> specified. Do not move or delete
control files in this directory. The <strong>listAllCaches</strong> utility,
the <strong>destroyAll</strong> utility, and the <strong>expire</strong> suboption
work only in the scope of a given <strong>cacheDir</strong>.
</dd>
<dt class="bold"><strong>readonly</strong></dt>
<dd>Opens an existing cache with read-only permissions. The JVM does
not create a new cache with this suboption. Opening a cache read-only
prevents the JVM from making any updates to the cache. It also allows
the JVM to connect to caches created by other users or groups without
requiring write access. By default, this suboption is not specified.
</dd>
<dt class="bold"><strong>persistent</strong> (default)</dt>
<dd>Uses a persistent cache. The cache is created on disk, which persists
beyond operating system restarts. Non-persistent and persistent caches
can have the same name.
</dd>
<dt class="bold"><strong>nonpersistent</strong> </dt>
<dd>Uses a non-persistent cache. The cache is
created in shared memory, which is lost when the operating system shuts down. Non-persistent
and persistent caches can have the same name. You must always use the <strong>nonpersistent</strong> suboption
when running utilities such as <strong>destroy</strong> on a non-persistent
cache.
</dd>
<dt class="bold"><strong>groupAccess</strong></dt>
<dd>Sets operating system permissions on a new cache to allow group
access to the cache. The default is user access only.
</dd>
<dt class="bold"><strong>verbose</strong></dt>
<dd>Enables verbose output, which provides overall status on the shared
class cache and more detailed error messages.
</dd>
<dt class="bold"><strong>verboseAOT</strong></dt>
<dd>Enables verbose output when compiled AOT code is being found or
stored in the cache. AOT code is generated heuristically. You might
not see any AOT code generated at all for a small application. You
can disable AOT caching using the <strong>noaot</strong> suboption.
</dd>
<dt class="bold"><strong>verboseIO</strong></dt>
<dd>Gives detailed output on the cache I/O activity, listing information
on classes being stored and found. Each class loader is given a unique
ID (the bootstrap loader is always 0) and the output shows the class
loader hierarchy at work, where class loaders must ask their parents
for a class before they can load it themselves. It is usual to see
many failed requests; this behavior is expected for the class loader
hierarchy.
</dd>
<dt class="bold"><strong>verboseHelper</strong></dt>
<dd>Enables verbose output for the Java Helper
API. This output shows you how the Helper API is used by your class
loader.
</dd>
<dt class="bold"><strong>silent</strong></dt>
<dd>Turns off all shared classes messages, including error messages.
Unrecoverable error messages, which prevent the JVM from initializing,
are displayed.
</dd>
<dt class="bold"><strong>nonfatal</strong></dt>
<dd>Allows the JVM to start even if class data sharing
fails. Normal behavior for the JVM is to refuse to start if class
data sharing fails. If you select <strong>nonfatal</strong> and
the shared classes cache fails to initialize, the JVM attempts to
connect to the cache in read-only mode. If this attempt fails, the
JVM starts without class data sharing.
</dd>
<dt class="bold"><strong>none</strong></dt>
<dd>Can be added to the end of a command line to disable class data
sharing. This suboption overrides class sharing arguments found earlier
on the command line.
</dd>
<dt class="bold"><strong>modified=</strong><em>&lt;modified context&gt;</em></dt>
<dd>Used when a JVMTI agent is installed that might modify bytecode
at runtime. If you do not specify this suboption and a bytecode modification
agent is installed, classes are safely shared with an extra performance
cost. The <em>&lt;modified context&gt;</em> is a descriptor chosen by the
user; for example, &quot;myModification1&quot;. This option partitions
the cache, so that only JVMs using context myModification1 can share
the same classes. For instance, if you run HelloWorld with a modification
context and then run it again with a different modification context,
all classes are stored twice in the cache. See <a href="#runtimebytecode">Runtime bytecode modification</a> for more information.
</dd>
<dt class="bold"><strong>reset</strong></dt>
<dd>Causes a cache to be destroyed and then recreated when the JVM
starts up. Can be added to the end of a command line as <strong>-Xshareclasses:reset</strong>.
</dd>
<dt class="bold"><strong>destroy</strong> (Utility option)</dt>
<dd>Destroys a cache specified by the <strong>name</strong>, <strong>cacheDir</strong>,
and <strong>nonpersistent</strong> suboptions. A cache can be
destroyed only if all JVMs using it have shut down, and the user has
sufficient permissions.
</dd>
<dt class="bold"><strong>destroyAll</strong> (Utility option)</dt>
<dd>Tries to destroy all caches available using the
specified <strong>cacheDir</strong> and <strong>nonpersistent</strong> suboptions.
A cache can be destroyed only if all JVMs using it have shut down,
and the user has sufficient permissions.
</dd>
<dt class="bold"><strong>expire</strong>=<em>&lt;time in minutes&gt;</em></dt>
<dd>Destroys all caches that have been unused for the time specified
before loading shared classes. This option is not a utility option
because it does not cause the JVM to exit.
</dd>
<dt class="bold"><strong>listAllCaches</strong> (Utility option)</dt>
<dd>Lists all the compatible and incompatible caches
that exist in the specified cache directory. If you do not specify <strong>cacheDir</strong>,
the default directory is used. Summary information, such as Java version and current usage is
displayed for each cache.
</dd>
<dt class="bold"><strong>printStats</strong> (Utility option)</dt>
<dd>Displays summary information for the cache specified
by the <strong>name</strong>, <strong>cacheDir</strong>, and <strong>nonpersistent</strong> suboptions.
The most useful information displayed is how full the cache is and
how many classes it contains. Stale classes are classes that have
been updated on the file system and which the cache has therefore
marked "stale". Stale classes are not purged from the cache and can
be reused. See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> for more information.
</dd>
<dt class="bold"><strong>printAllStats</strong> (Utility option)</dt>
<dd>Displays detailed information for the cache specified
by the <strong>name</strong>, <strong>cacheDir</strong>, and <strong>nonpersistent</strong> suboptions.
Every class is listed in chronological order, with a reference to
the location from which it was loaded. AOT code for class methods
is also listed.

<p>See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> for more information.</p>
</dd>
<dt class="bold"><strong>mprotect=</strong>[
all | default | none ]</dt>
<dd>By default, the memory pages containing the cache are protected
at all times, unless a specific page is being updated. This protection
helps prevent accidental or deliberate corruption to the cache. The
cache header is not protected by default because this protection has
a small performance cost. Specifying <samp>all</samp> ensures
that all the cache pages are protected, including the header. Specifying <samp>none</samp> disables
the page protection.
</dd>
<dt class="bold"><strong>noBootclasspath</strong></dt>
<dd>Prevents storage of classes loaded by the bootstrap class loader
in the shared classes cache. Can be used with the SharedClassURLFilter API
to control exactly which classes get cached. See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> for more information about
shared class filtering.
</dd>
<dt class="bold"><strong>cacheRetransformed</strong></dt>
<dd>Enables caching of classes that have been transformed using the
JVMTI RetransformClasses function.
</dd>
<dt class="bold"><strong>noaot</strong></dt>
<dd>Disables caching of AOT code. AOT code already in the shared data
cache can be loaded.
</dd>
</dl><p class="indatacontent">/user</p>
</dd>
</dl>
<a name="shc_admin"></a>
<h2 id="shc_admin"><a href="#ToC_168">Creating, populating, monitoring, and deleting a cache</a></h2>
<div>
<p>An overview of the life-cycle of a shared
class data cache including examples of the cache management utilities.</p></div><a id="idx51" name="idx51"></a><a id="idx52" name="idx52"></a><a id="idx53" name="idx53"></a><a id="idx54" name="idx54"></a>
<p>To enable class data sharing, add <strong>-Xshareclasses[:name=&lt;name&gt;]</strong> to
your application command line.</p>
<p>The JVM either connects to an existing cache of the given name
or creates a new cache of that name. If a new cache is created, it
is populated with all bootstrap and application classes being loaded
until the cache becomes full. If two or more JVMs are started concurrently,
they populate the cache concurrently.</p>
<p>To check that the cache has been created, run <samp class="xph">java -Xshareclasses:listAllCaches</samp>.
To see how many classes and how much class data is being shared, run <samp class="xph">java
-Xshareclasses:[name=&lt;name&gt;],printStats</samp>. You can run
these utilities after the application JVM has terminated or in another
command window.</p>
<p>For more feedback on cache usage while the JVM is running, use
the <strong>verbose</strong> suboption. For example, <samp class="xph">java
-Xshareclasses:[name=&lt;name&gt;],verbose</samp>.</p>
<p>To see classes being loaded from the cache or stored in the cache,
add <samp class="xph">-Xshareclasses:[name=&lt;name&gt;],verboseIO</samp> to
your application command line.</p>
<p>To delete the cache, run <samp class="xph">java -Xshareclasses:[name=&lt;name&gt;],destroy</samp>.
 You usually delete caches only if they contain many stale classes
or if the cache is full and you want to create a bigger cache.</p>
<p>You should tune the cache size for your specific application, because
the default is unlikely to be the optimum size. To determine the optimum
cache size, specify a large cache, using <strong>-Xscmx</strong>,
run the application, and then use <strong>printStats</strong> to
determine how much class data has been stored. Add a small amount
to the value shown in <strong>printStats</strong> for contingency.
Because classes can be loaded at any time during the lifetime of the
JVM, it is best to do this analysis after the application has terminated.
However, a full cache does not have a negative affect on the performance
or capability of any JVMs connected to it, so it is acceptable to
decide on a cache size that is smaller than required.</p>
<p>If a cache becomes full, a message is displayed on the command
line of any JVMs using the <strong>verbose</strong> suboption.
All JVMs sharing the full cache then loads any further classes into
their own process memory. Classes in a full cache can still be shared,
but a full cache is read-only and cannot be updated with new classes.</p>
<a name="shc_performance"></a>
<h2 id="shc_performance"><a href="#ToC_169">Performance and memory consumption</a></h2>
<div>
<p>Class data sharing is particularly useful on systems that
use more than one JVM running similar code; the system benefits from
reduced virtual storage consumption. It is also useful
on systems that frequently start and shut down JVMs, which benefit
from the improvement in startup time.</p></div><a id="idx55" name="idx55"></a><a id="idx56" name="idx56"></a>
<p>The processor and memory usage required to create and populate
a new cache is minimal. The JVM startup cost in time for a single
JVM is typically between 0 and 5% slower compared with a system not
using class data sharing, depending on how many classes are loaded.
JVM startup time improvement with a populated cache is typically between
10% and 40% faster compared with a system not using class data sharing,
depending on the operating system and the number of classes loaded.
Multiple JVMs running concurrently show greater overall startup time
benefits.</p>
<p>Duplicate classes are consolidated in the shared
class cache. For example, class A loaded from <samp>myClasses.jar</samp> and
class A loaded from <samp>myOtherClasses.jar</samp> (with
identical content) is stored only once in the cache. The <strong>printAllStats</strong> utility
shows multiple entries for duplicated classes, with each entry pointing
to the same class.</p>
<p>When you run your application with class data sharing, you can
use the operating system tools to see the reduction in virtual storage
consumption.</p>
<a name="shc_limitations"></a>
<h2 id="shc_limitations"><a href="#ToC_170">Considerations and limitations of using class data sharing</a></h2>
<div>
<p>Consider these factors when deploying class data sharing in a product
and using class data sharing in a development environment.</p></div><a id="idx57" name="idx57"></a><a id="idx58" name="idx58"></a>
<a name="cachesizelimits"></a>
<h3 id="cachesizelimits"><a href="#ToC_171">Cache size limits</a></h3>
<div>
<p>The maximum theoretical cache size is 2 GB. The size of cache you can specify is limited by the
amount of physical memory and paging space available to the system.</p></div><a id="idx59" name="idx59"></a>
<p>The shared class cache consists
of memory mapped files that are created on disk and remain when the
operating system is restarted. If you change the default behavior
using the <strong>-Xshareclasses:nonpersistent</strong> option,
so that the cache is not retained on restart, the cache for sharing
classes is allocated using the System V IPC shared memory mechanism.
In this case, cache size is limited by <strong>SHMMAX</strong> settings,
which limits the amount of shared memory that can be allocated. You
can find these settings by looking at the<samp>/proc/sys/kernel/shmmax</samp> file. <strong>SHMMAX</strong> is
typically set to 30 MB.</p>
<p>Because the virtual address
space of a process is shared between the shared classes cache and
the Java heap, if you increase
the maximum size of the Java heap
you might reduce the size of the shared classes cache you can create.</p>
<a name="retransformationclasses"></a>
<h3 id="retransformationclasses"><a href="#ToC_172">JVMTI RetransformClasses() is unsupported</a></h3>
<div>
<p>You cannot run RetransformClasses() on
classes loaded from the shared class cache.</p></div><a id="idx60" name="idx60"></a>
<p>The JVM might throw the exception UnmodifiableClassException if
you attempt to run RetransformClasses().
It does not work because class file bytes are not available for classes
loaded from the shared class cache. If you must use RetransformClasses(),
ensure that the classes to be transformed are not loaded from the
shared class cache, or disable the shared class cache feature.</p>
<a name="runtimebytecode"></a>
<h3 id="runtimebytecode"><a href="#ToC_173">Runtime bytecode modification</a></h3>
<div>
<p>Any JVM using a JVM Tool Interface (JVMTI) agent that can
modify bytecode data must use the <strong>modified=</strong><em>&lt;modified_context&gt;</em> suboption
if it wants to share the modified classes with another JVM.</p></div><a id="idx61" name="idx61"></a>
<p>The modified context is a user-specified descriptor
that describes the type of modification being performed. The modified
context partitions the cache so that all JVMs running under the same
context share a partition.</p>
<p>This partitioning allows JVMs that are not using modified bytecode
to safely share a cache with those that are using modified bytecode.
All JVMs using a given modified context must modify bytecode in a
predictable, repeatable manner for each class, so that the modified
classes stored in the cache have the expected modifications when they
are loaded by another JVM. Any modification must be predictable because
classes loaded from the shared class cache cannot be modified again
by the agent.</p>
<p>If a JVMTI agent is used without a modification
context, classes are still safely shared by the JVM, but with a small
affect on performance. Using a modification context with a JVMTI agent
avoids the need for extra checks and therefore has no affect on performance.
 A custom ClassLoader that extends java.net.URLClassLoader and
modifies bytecode at load time without using JVMTI automatically stores
that modified bytecode in the cache, but the cache does not treat
the bytecode as modified. Any other VM sharing that cache loads the
modified classes. You can use the <strong>modified=</strong><em>&lt;modification_context&gt;</em> suboption
in the same way as with JVMTI agents to partition modified bytecode
in the cache. If a custom ClassLoader needs to
make unpredictable load-time modifications to classes, that ClassLoader must
not attempt to use class data sharing.</p>
<p>See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a> for more detail on this
topic.</p>
<a name="shc_os_limitations"></a>
<h3 id="shc_os_limitations"><a href="#ToC_174">Operating system limitations</a></h3>
<div>
<p>You cannot share
classes between 32-bit and 64-bit JVMs. Temporary disk space must be
available to hold cache information. The operating system enforces cache permissions.</p></div><a id="idx62" name="idx62"></a>
<p>For operating systems that
can run both 32-bit and 64-bit applications, class data sharing is not permitted
between 32-bit and 64-bit JVMs. The <strong>listAllCaches</strong> suboption
lists 32-bit or 64-bit caches, depending on the address mode of the JVM being
used.</p>
<p>The shared class cache requires disk space to store identification information
about the caches that exist on the system. This
information is stored in <samp>/tmp/javasharedresources</samp>. If
the identification information directory is deleted, the JVM cannot identify
the shared classes on the system and must re-create the cache. Use
the ipcs command to view the memory segments used by a
JVM or application.</p>
<p>Users running a JVM must be in the same group to use
a shared class cache. The operating system enforces the permissions for
accessing a shared class cache. If you do not specify a cache name, the user
name is appended to the default name so that multiple users on the same system
create their own caches by default.</p>
<a name="usingsharedclasspermissions"></a>
<h3 id="usingsharedclasspermissions"><a href="#ToC_175">Using SharedClassPermission</a></h3>
<div>
<p>If a SecurityManager is being used with class
data sharing and the running application uses its own class loaders, you must
grant these class loaders shared class permissions before they can share classes.</p></div><a id="idx63" name="idx63"></a>
<p>You add shared class permissions to the <samp>java.policy</samp> file
using the ClassLoader class name (wildcards are permitted)
and either &quot;read&quot;, &quot;write&quot;, or &quot;read,write&quot; to determine the
access granted. For example: </p>
<pre class="xmp">permission com.ibm.oti.shared.SharedClassPermission
        "com.abc.customclassloaders.*", "read,write";</pre><p class="indatacontent">If a ClassLoader does
not have the correct permissions, it is prevented from sharing classes.  You
cannot change the permissions of the default bootstrap, application, or extension
class loaders.</p>
<a name="adaptingclassloaders"></a>
<h2 id="adaptingclassloaders"><a href="#ToC_176">Adapting custom class loaders to share classes</a></h2>
<div>
<p>Any class loader that extends java.net.URLClassLoader can
share classes without modification. You must adopt class loaders that
do not extend java.net.URLClassLoader to share
class data.</p></div><a id="idx64" name="idx64"></a>
<p>You must grant all custom class loaders shared class permissions
if a SecurityManager is being used; see <a href="#usingsharedclasspermissions">Using SharedClassPermission</a>. IBM provides
several Java interfaces for various types
of custom class loaders, which allow the class loaders to find and store
classes in the shared class cache. These classes are in the com.ibm.oti.shared package.</p>
<p>The Javadoc document for this package is provided
with the SDK in the <samp>docs/content/apidoc</samp> directory.</p>
<p>See the <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">Diagnostics Guide</a>  for more information about
how to use these interfaces.</p>
<a name="jcommchapter"></a>
<h1 id="jcommchapter"><a href="#ToC_177">Java Communications API (JavaComm)</a></h1>
<div>
<p>The Java Communications (API) package (JavaComm) is an optional
package provided for use with the Runtime Environment for Linux on the IA32, PPC32/PPC64, and AMD64/EM64T platforms.
You install JavaComm independently of the SDK or Runtime Environment.</p></div>
<p>The JavaComm API gives Java applications a platform-independent
way of performing serial and parallel port communications for technologies
such as voice mail, fax, and smartcards.</p>
<p>The Java Communications API supports Electronic Industries
Association (EIA)-232 (RS232) serial ports and Institute of Electrical and
Electronics Engineers (IEEE) 1284 parallel ports and is supported on systems
with the IBM Version 6 Runtime Environment.</p>
<p>Using the Java Communications API, you can:</p>
<ul>
<li>List ports on a system</li>
<li>Open and claim ownership of ports</li>
<li>Resolve port ownership contention among applications that use Java Communications
API</li>
<li>Perform asynchronous and synchronous I/O port-monitoring using event notification</li>
<li>Receive bean-style events describing state changes on the port</li></ul>
<a name="instcomm"></a>
<h2 id="instcomm"><a href="#ToC_178">Installing Java Communications API from a compressed
file</a></h2>
<div>
<p>Make sure that the SDK or Runtime Environment is installed
before you install the Java Communications
API.</p></div>
<p>
<a name="wq166"></a>
<h3 id="wq166">About this task</h3>
<p>If you used the RPM package to install Java originally, install the Java Communications
API from the RPM file. To install the Java Communications
API from an RPM package, see <a href="#instcomm_rpm">Installing the Java Communications
API from an RPM file</a>.</p>
<p>To
install the Java Communications API from a compressed
file:</p></p>
<p>
<a name="wq167"></a>
<h3 id="wq167">Procedure</h3></p>
<ol type="1">
<li>Download the Java Communications
API compressed file from <a href="http://www.ibm.com/developerworks/java/jdk/linux/download.html">http://www.ibm.com/developerworks/java/jdk/linux/download.html</a>.</li>
<li>Put the Java Communications API compressed
file, <a name="instcomm__install-file"></a><samp id="instcomm__install-file">ibm-java-javacomm-3.0-0.0-&lt;plat&gt;-&lt;arch&gt;.tar.gz</samp>,
in the directory where the SDK or Runtime Environment is installed.
If you installed to the default directory, this is <samp>/opt/ibm/java-&lt;arch&gt;-60/</samp>.</li>
<li>From a shell prompt, in the directory
containing the compressed file, extract the contents: 
<pre class="xmp">tar -xvzf <samp>ibm-java-javacomm-3.0-0.0-&lt;plat&gt;-&lt;arch&gt;.tar.gz</samp></pre>

<p>Where <samp class="xph">&lt;arch&gt;</samp> represents
your architecture: i386, x86_64, ppc, or ppc64.</p></li>
<li>Copy the Java Communications
API files into the correct directories in your SDK.

<ol type="a">
<li>Copy <samp>lib/libLinuxSerialParallel.so</samp> to
your <samp>jre/lib/<em>&lt;arch&gt;</em>/</samp> directory. Where <em>&lt;arch&gt;</em> is the architecture of your
platform.</li>
<li>Copy <samp>jar/comm.jar</samp> to
your <samp>jre/lib/ext/</samp> directory.</li>
<li>Copy <samp>lib/javax.comm.properties</samp> to
your <samp>jre/lib/</samp> directory.</li></ol> By default, the SDK is installed in the /opt/ibm/java-&lt;arch&gt;-60/ directory.</li></ol>
<a name="instcomm_rpm"></a>
<h2 id="instcomm_rpm"><a href="#ToC_181">Installing the Java Communications
API from an RPM file</a></h2>
<div>
<p>Make sure that a copy of the SDK or Runtime Environment
is installed before you install the Java Communications
API.</p></div>
<p>
<a name="wq170"></a>
<h3 id="wq170">About this task</h3>
<p>If you used the RPM package to install Java originally,
install the Java Communications API from the
RPM file.</p></p>
<p>
<a name="wq171"></a>
<h3 id="wq171">Procedure</h3></p>
<ol type="1">
<li>Download the Java Communications
API RPM package from <a href="http://www.ibm.com/developerworks/java/jdk/linux/download.html">http://www.ibm.com/developerworks/java/jdk/linux/download.html</a>.</li>
<li>Open a shell prompt, making sure you are root.</li>
<li>Use the <samp class="xph">rpm -ivh</samp> command to install the Java Communications API RPM file. For example:
<pre class="xmp">rpm -ivh ibm-java-&lt;arch&gt;-javacomm-3.0-0.0.rpm</pre> The Java Communications API is installed
in the /opt/ibm/java-&lt;arch&gt;-60/ directory
structure.</li>
<li>Copy the javacomm files into
the correct directories in your SDK.

<ol type="a">
<li>Copy <samp>lib/libLinuxSerialParallel.so</samp> to
your <samp>jre/lib/<em>&lt;arch&gt;</em>/</samp> directory. Where <em>&lt;arch&gt;</em> is the architecture of your
platform.</li>
<li>Copy <samp>jar/comm.jar</samp> to
your <samp>jre/lib/ext/</samp> directory.</li>
<li>Copy <samp>lib/javax.comm.properties</samp> to
your <samp>jre/lib/</samp> directory.</li></ol> By default, the SDK is installed in the /opt/ibm/java-&lt;arch&gt;-60/ directory.</li></ol>
<a name="fileloc"></a>
<h2 id="fileloc"><a href="#ToC_184">Location of the Java Communications
API files</a></h2>
<div>
<p>By default, the Java Communications
API files are installed in the <samp>/opt/ibm/java-&lt;arch&gt;-60/</samp> directory.</p></div>
<p>
<p>The files and their structure are:</p></p>
<ul>
<li><samp>jar/comm.jar</samp></li>
<li><samp>jar/commtest.jar</samp></li>
<li><samp>jar/tools/BlackBox.jar</samp></li>
<li><samp>jar/tools/ParallelBlackBox.jar</samp></li>
<li><samp>lib/javax.comm.properties</samp></li>
<li><samp>lib/libLinuxSerialParallel.so</samp></li></ul>
<a name="javacomm_configure"></a>
<h2 id="javacomm_configure"><a href="#ToC_185">Configuring the Java Communications API</a></h2>
<div>
<p>To use the Java Communications API, you must change
the access mode of serial and parallel ports, and set the <strong>PATH</strong> if
you did not set it when you installed Java.</p></div>
<p>
<a name="wq175"></a>
<h3 id="wq175">About this task</h3>
<p>See <a href="#pathcons">Setting the path</a>.</p></p>
<a name="javacomm_lnx_serial"></a>
<h3 id="javacomm_lnx_serial"><a href="#ToC_187">Changing the access mode of serial and parallel ports</a></h3>
<div>
<p>After you install Java Communications
API, you must change the access mode of serial and parallel ports
so that users can access these devices.</p></div>
<p>
<a name="wq176"></a>
<h4 id="wq176">About this task</h4>
<p>You must give a user read and write access to the required
devices. Log on as root and use the following commands, as applicable:
 </p>
<pre class="xmp">    chmod 660 /dev/ttyS0    (serial port COM1)
    chmod 660 /dev/ttyS1    (serial port COM2)
    chmod 660 /dev/ttyS2    (serial port COM3)
    chmod 660 /dev/ttyS3    (serial port COM4)
    chmod 660 /dev/parport0 (raw parallel ports)
    chmod 660 /dev/parport1 (raw parallel ports)</pre>
<p>Add specific users to the same group that the
devices are in. On a SUSE system, for example, the devices are in
the <samp>uucp</samp> group. Thus, users can be added to the <samp>uucp</samp> group
to gain access to the devices.</p>
<p>Change the access mode of any
other ports as needed.</p></p>
<a name="javacomm_lnx_devices"></a>
<h3 id="javacomm_lnx_devices"><a href="#ToC_189">Specifying devices in the <samp>javax.comm.properties</samp> file</a></h3>
<div>
<p>Use the javax.comm.properties file to
specify the devices and drivers that are
available to the Java Communications API and whether
they are parallel or serial. Do not change this file without a very
clear understanding of its use.</p></div>
<p>
<a name="wq177"></a>
<h4 id="wq177">About this task</h4>
<p>The following properties must be defined:</p>
<pre class="xmp">driver=<em>&lt;driver_name&gt;</em>
serpath0=<em>&lt;serial_port_device&gt;</em>
parpath0=<em>&lt;parallel_port_device&gt;</em></pre>
<p>For example:</p>
<pre class="xmp"># Implementation specific driver
driver=com.sun.comm.LinuxDriver

# Paths to server-side serial port devices
serpath0 = /dev/ttyS0
serpath1 = /dev/ttyS1

# Paths to server-side parallel port devices
parpath0 = /dev/parport0
parpath1 = /dev/parport1</pre>
<p>For parallel port access, use <samp>/dev/parport<em>&lt;n&gt;</em></samp>. <samp>/dev/lp<em>&lt;n&gt;</em></samp> is
not supported in Javacomm version 3.0.</p></p>
<a name="javacomm_thinkpad"></a>
<h2 id="javacomm_thinkpad"><a href="#ToC_191">Enabling serial ports on IBM ThinkPads</a></h2>
<div>
<p>Most ThinkPads have their serial ports disabled by default in the
BIOS. Currently, there is no way to enable the ports with Linux (the tpctl
package <em>does not</em> enable the ports if they are disabled in the BIOS).</p></div>
<p>
<a name="wq178"></a>
<h3 id="wq178">About this task</h3>
<p>To enable the ports in the BIOS, you must use the DOS version
of the ThinkPad Configuration Utility that is available from the IBM ThinkPad Download
site. To use the ThinkPad Configuration Utility, you need a bootable DOS diskette.
The ThinkPad Configuration Utility might have been installed as part of the
ThinkPad Utilities under Windows, depending on your installation
options, and you can run it from a command prompt in Windows.</p>
<p>The
ThinkPad Configuration application provided with Windows has options to enable or disable
the serial and parallel ports but this <em>does not</em> also change the settings
in the BIOS. So if you use this application with Windows, the ports are available; however,
if you reboot your system with Linux, the ports <em>will not</em> be enabled.</p></p>
<a name="javacomm_printing"></a>
<h2 id="javacomm_printing"><a href="#ToC_193">Printing limitation with the Java Communications API</a></h2>
<div>
<p>When printing with the Java Communications API, you might have
to select &quot;Form feed&quot;, &quot;Continue&quot;, or a similar option on the printer.</p></div>
<a name="javacomm_lnx_remove"></a>
<h2 id="javacomm_lnx_remove"><a href="#ToC_194">Uninstalling Java Communications API</a></h2>
<div>
<p>The process you use to uninstall the Java Communications API depends on whether
you installed the installable Red Hat Package Manager (RPM) package or the
compressed Tape Archive (TAR) package.</p></div>
<p>
<a name="wq179"></a>
<h3 id="wq179">About this task</h3>
<p></p></p>
<a name="javacomm_redhat_remove"></a>
<h3 id="javacomm_redhat_remove"><a href="#ToC_196">Uninstalling the Red Hat Package Manager (RPM) package</a></h3>
<div>
<p>Uninstalling the Java Communications
API using the RPM package.</p></div>
<p>
<a name="wq180"></a>
<h4 id="wq180">About this task</h4>
<p></p></p>
<p>
<a name="wq181"></a>
<h4 id="wq181">Procedure</h4></p>
<ol type="1">
<li>Use the rpm tool to uninstall the package. Enter the following
command at a shell prompt:
<pre class="xmp">rpm -e ibm-java-<em>&lt;arch&gt;</em>-javacomm-3.0-0.0</pre>

<p>Where <em>&lt;arch&gt;</em> is the architecture
of your platform.</p> Alternatively, you can use a
graphical tool such as kpackage or yast2.</li>
<li>If the directory where you installed the Java Communications
API does not contain any other tools that you require, remove that
directory from your <strong>PATH</strong> statement.</li>
<li>If you copied the Java communications API libraries into the SDK
directory, delete the following files from the SDK directory.

<ul>
<li><samp>jre/lib/<em>&lt;arch&gt;</em>/libLinuxSerialParallel.so</samp></li>
<li><samp>jre/lib/ext/comm.jar</samp></li>
<li><samp>jre/lib/javax.comm.properties</samp></li></ul> 

<p>Where <em>&lt;arch&gt;</em> is
the architecture of your platform.</p> By default, the
SDK is installed in the /opt/ibm/java-&lt;arch&gt;-60/ directory.</li></ol>
<a name="javacomm_tar_remove"></a>
<h3 id="javacomm_tar_remove"><a href="#ToC_199">Uninstalling the compressed Tape Archive (TAR) package</a></h3>
<div>
<p>Uninstalling the Java Communications
API, if you installed the compressed TAR package.</p></div>
<p>
<a name="wq183"></a>
<h4 id="wq183">About this task</h4>
<p>Delete the following files from the directory where you
installed them:</p></p>
<ul>
<li><samp>jre/lib/<em>&lt;arch&gt;</em>/libLinuxSerialParallel.so</samp></li>
<li><samp>jre/lib/ext/comm.jar</samp></li>
<li><samp>jre/lib/javax.comm.properties</samp></li></ul>
<p>Where <em>&lt;arch&gt;</em> is
the architecture of your platform.</p>
<a name="javacomm_apidoc"></a>
<h2 id="javacomm_apidoc"><a href="#ToC_201">The Java Communications API documentation</a></h2>
<div>
<p>You can find API documentation and samples for the Java Communications
API at the Sun Web site.</p></div>
<p>
<p><a href="http://java.sun.com/products/javacomm/" target="_blank">http://java.sun.com/products/javacomm/</a>.</p></p>
<a name="support"></a>
<h1 id="support"><a href="#ToC_202">Service and support for independent software vendors</a></h1>
<div>
<p>Contact points for service:</p></div>
<p> If you are entitled to services for the Program code pursuant
to the IBM Solutions Developer
Program, contact the IBM Solutions
Developer Program through your usual method of access or on the Web
at: <a href="http://www.ibm.com/partnerworld/" target="_blank">http://www.ibm.com/partnerworld/</a>.</p>
<p>If you have purchased a service contract (that is, the IBM Personal Systems Support Line
or equivalent service by country), the terms and conditions of that
service contract determine what services, if any, you are entitled
to receive with respect to the Program.</p>
<a name="accessibility"></a>
<h1 id="accessibility"><a href="#ToC_203">Accessibility</a></h1>
<div>
<p>The user guides that are supplied
with this SDK and
the Runtime Environment have
been tested using screen readers.</p></div>
<p>To change the font sizes in the user guides, use
the function that is supplied with your browser, typically found under
the <strong>View</strong> menu option.</p>
<p>For users who require keyboard navigation, a description of useful
keystrokes for Swing applications is in <cite>Swing Key Bindings</cite> at <a href="http://www.ibm.com/developerworks/java/jdk/additional/" target="_blank">http://www.ibm.com/developerworks/java/jdk/additional/</a>.</p>
<a name="access_keyboard"></a>
<h2 id="access_keyboard"><a href="#ToC_204">Keyboard traversal of JComboBox components in Swing</a></h2>
<div>
<p>If you traverse the drop-down list of a JComboBox component with the cursor keys, the button or editable field of the JComboBox does not change value until an item is selected. This is the correct behavior for this release and improves accessibility and usability by ensuring that the keyboard traversal behavior is consistent with mouse traversal behavior.</p></div>
<a name="access_webstart"></a>
<h2 id="access_webstart"><a href="#ToC_205">Web Start accessibility (Linux IA
32-bit, PPC32, and PPC64 only)</a></h2>
<div>
<p>From Version 5.0, Java Web
Start contains several accessibility and usability improvements, including
better support for screen readers and improved keyboard navigation.</p></div>
<p>You can use the command line to start a Java application that is enabled for Web Start.
 To change preference options, you must edit a configuration file, <samp>.java/.deployment/.deployment.properties</samp> in
the user's home directory. Take a backup before you edit this file.
Not all of the preferences that can be set in the Java Application
Cache Viewer are available in the configuration file.</p>
<a name="rcf"></a>
<h1 id="rcf"><a href="#ToC_206">Any comments on this user guide?</a></h1>
<div>
<p>If you have any comments about this user guide, contact us through
one of the following channels. Note that these channels are not set up to
answer technical queries, but are for comments about the documentation only.</p></div>
<p>Send your comments:</p>
<ul>
<li>By e-mail to idrcf@hursley.ibm.com.</li>
<li>By fax:  

<ul>
<li>From the UK: 01962 842327</li>
<li>From elsewhere: +44 1962 842327</li></ul></li>
<li>By mail to: 
<div class="lines">IBM United Kingdom Ltd<br />
User Technologies,<br />
Mail Point 095<br />
Hursley Park<br />
Winchester<br />
Hampshire<br />
SO21 2JN<br />
United Kingdom <br />
</div></li></ul>
<p><strong>The fine print.</strong> By choosing to send a message to IBM, you acknowledge
that all information contained in your message, including feedback data, such
as questions, comments, suggestions, or the like, shall be deemed to be non-confidential
and IBM shall
have no obligation of any kind with respect to such information and shall
be free to reproduce, use, disclose, and distribute the information to others
without limitation. Further, IBM shall be free to use any ideas, concepts, know-how
or techniques contained in such information for any purpose whatsoever, including,
but not limited to, developing, manufacturing and marketing products incorporating
such information.</p>
<a name="cmdline"></a>
<h1 id="cmdline"><a href="#ToC_207">Appendix A. Command-line options</a></h1>
<div>
<p>You can specify the options on the command line while you are starting Java.
They override any relevant environment variables. For example, using <strong>-cp &lt;dir1&gt;</strong> with
the Java command
completely overrides setting the environment variable <strong>CLASSPATH=&lt;dir2&gt;</strong>.</p></div><a id="idx65" name="idx65"></a><a id="idx66" name="idx66"></a>
<a name="cmdline_specifying"></a>
<h2 id="cmdline_specifying"><a href="#ToC_208">Specifying command-line options</a></h2>
<div>
<p>Although the command line is the traditional way to specify
command-line options, you can pass options to the JVM in other ways.</p></div>
<p>Use only single or double quotation marks for command-line
options when explicitly directed to do so for the option in question.
Single and double quotation marks have different meanings on different
platforms, operating systems, and shells. Do not use <strong>'-X&lt;option&gt;' </strong> or <strong>"-X&lt;option&gt;"</strong>.
Instead, you must use <strong>-X&lt;option&gt;</strong>. For example,
do not use <samp class="xph">'-Xmx500m'</samp> and <samp class="xph">"-Xmx500m"</samp>.
Write this option as <samp class="xph">-Xmx500m</samp>.</p>
<p>These precedence rules (in descending order) apply to specifying
options: 
</p>
<ol type="1">
<li>Command line. 

<p>For example, <samp class="xph">java -X&lt;option&gt; MyClass</samp></p></li>
<li>A file containing a list of options, specified using the <strong>-Xoptionsfile</strong> option
on the command line. For example, <samp class="xph">java -Xoptionsfile=myoptionfile.txt
MyClass</samp>  

<p>In the options file, specify each option on a
new line; you can use the '\' character as a continuation character
if you want a single option to span multiple lines. Use the '#' character
to define comment lines. You cannot specify <strong>-classpath</strong> in an
options file. Here is an example of an options file: </p>
<pre class="xmp">#My options file
-X&lt;option1&gt;
-X&lt;option2&gt;=\
&lt;value1&gt;,\
&lt;value2&gt;
-D&lt;sysprop1&gt;=&lt;value1&gt;</pre></li>
<li><strong>IBM_JAVA_OPTIONS</strong> environment variable. You can set command-line
options using this environment variable. The options that you
specify with this environment variable are added to the command line
when a JVM starts in that environment. 

<p>For example, <samp class="xph">set
IBM_JAVA_OPTIONS=-X&lt;option1&gt; -X&lt;option2&gt;=&lt;value1&gt;</samp></p></li></ol>
<a name="cmdline_general"></a>
<h2 id="cmdline_general"><a href="#ToC_209">General command-line options</a></h2>
<div>
<p>Use these options to print help on assert-related options,
set the search path for application classes and resources, print a
usage method, identify memory leaks inside the JVM, print the product
version and continue, enable verbose output, and print the product
version.</p></div><a id="idx67" name="idx67"></a><a id="idx68" name="idx68"></a>
<dl class="parml">
<dt class="bold"><strong>-cp</strong>, <strong>-classpath</strong> &lt;directories
and compressed or jar files separated by <samp class="xph">:</samp> (<samp class="xph">;</samp> on Windows)&gt;</dt>
<dd>Sets the search path for application classes and resources. If <strong>-classpath</strong> and <strong>-cp</strong> are
not used, and the <strong>CLASSPATH</strong> environment variable is not set,
the user classpath is, by default, the current directory (<samp class="xph">.</samp>).
</dd>
<dt class="bold"><strong>-help</strong>, <strong>-?</strong> </dt>
<dd>Prints a usage message.
</dd>
<dt class="bold"><strong>-showversion</strong> </dt>
<dd>Prints product version and continues.
</dd>
<dt id="cmdline_general__verbose" class="bold">
<a name="cmdline_general__verbose"></a><strong>-verbose</strong>:<em>&lt;option&gt;</em>[,<em>&lt;option&gt;</em>...]</dt>
<dd>Enables verbose output. Separate multiple options using commas.
These options are available:

<dl class="parml">
<dt class="bold"><strong>class</strong></dt>
<dd>Writes an entry to <samp>stderr</samp> for each class
that is loaded.
</dd>
<dt class="bold"><strong>dynload</strong></dt>
<dd>Provides detailed information as each bootstrap class is loaded
by the JVM: 

<ul>
<li>The class name and package</li>
<li>For class files that were in a .jar file, the name and directory
path of the .jar</li>
<li>Details of the size of the class and the time taken to load the
class</li></ul>The data is written out to <samp>stderr</samp>. An example
of the output on a Windows platform
follows:  
<pre class="xmp">&lt;Loaded java/lang/String from C:\sdk\jre\lib\vm.jar&gt;
&lt;Class size 17258; ROM size 21080; debug size 0&gt;
&lt;Read time 27368 usec; Load time 782 usec; Translate time 927 usec&gt;</pre>
</dd>
<dt class="bold"><strong>gc</strong></dt>
<dd>Provide verbose garbage collection information.
</dd>
<dt class="bold"><strong>init</strong></dt>
<dd>Writes information to <samp>stderr</samp> describing JVM
initialization and termination.
</dd>
<dt class="bold"><strong>jni</strong></dt>
<dd>Writes information to <samp>stderr</samp> describing the
JNI services called by the application and JVM.
</dd>
<dt class="bold"><strong>sizes</strong></dt>
<dd>Writes information to <samp>stderr</samp> describing the
active memory usage settings.
</dd>
<dt class="bold"><strong>stack</strong></dt>
<dd>Writes information to <samp>stderr</samp> describing the Java and C stack usage for each
thread.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-version </strong></dt>
<dd>Prints product version.
</dd>
</dl>
<a name="cmdline_properties"></a>
<h2 id="cmdline_properties"><a href="#ToC_210">System property command-line options</a></h2>
<div>
<p>Use the system property command-line options to set up
your system.</p></div><a id="idx69" name="idx69"></a><a id="idx70" name="idx70"></a><a id="idx71" name="idx71"></a>
<dl class="parml">
<dt class="bold"><strong>-D</strong><em>&lt;name&gt;</em><strong>=</strong><em>&lt;value&gt;</em></dt>
<dd>Sets a system property.
</dd>
<dt class="bold"><strong>-Dcom.ibm.jsse2.renegotiate=</strong>[ALL | NONE |
ABBREVIATED]</dt>
<dd>If your Java application
uses JSSE for secure communication, you can disable TLS renegotiation
by installing APAR IZ65239. 

<dl>
<dt class="bold">ALL</dt>
<dd>Allow both abbreviated and unabbreviated (full) renegotiation
handshakes.
</dd>
<dt class="bold">NONE</dt>
<dd>Allow no renegotiation handshakes. This value is the default setting.
</dd>
<dt class="bold">ABBREVIATED</dt>
<dd>Allow only abbreviated renegotiation handshakes.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Dcom.ibm.lang.management.verbose</strong></dt>
<dd>Enables verbose information from java.lang.management operations
to be written to output channel during VM operation.
</dd>
<dt class="bold"><img src="../delta.gif" alt="Start of change" /><font color="RED"><strong>-Dcom.ibm.IgnoreMalformedInput=true</strong></font><img src="../deltaend.gif" alt="End of change" /></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">From Java 6
SR9, any invalid UTF8
or malformed byte sequences are replaced with the standard unicode
replacement character <samp class="xph">\uFFFD</samp>. To retain the old behavior,
where invalid UTF8 or malformed byte sequences are ignored, set this
system property to true.</font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><strong>-Dcom.ibm.tools.attach.enable=yes</strong></dt>
<dd>Enable the Attach API for this application. The Attach API allows
your application to connect to a virtual machine. Your application
can then load an agent application into the virtual machine. The agent
can be used to perform tasks such as monitoring the virtual machine
status.
</dd>
<dt class="bold"><img src="../delta.gif" alt="Start of change" /><font color="RED"><strong>-Dcom.ibm.zipfile.closeinputstreams=true</strong></font><img src="../deltaend.gif" alt="End of change" /></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">The Java.util.zip.ZipFile class allows you
to create InputStreams on files held in a compressed
archive. Under some conditions, using ZipFile.close() to
close all InputStreams that have been opened on
the compressed archive might result in a 56-byte-per-InputStream native
memory leak. Setting the <strong>-Dcom.ibm.zipfile.closeinputstreams=true</strong> forces
the JVM to track and close InputStreams without
the memory impact caused by retaining native-backed objects. Native-backed
objects are objects that are stored in native memory, rather than
the Java heap. By default, the
value of this system property is <strong>false</strong>.</font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><strong>-Dibm.jvm.bootclasspath</strong></dt>
<dd>The value of this property is used as an additional search path,
which is inserted between any value that is defined by <strong>-Xbootclasspath/p:</strong> and
the bootclass path. The bootclass path is either the default or the
one that you defined by using the <strong>-Xbootclasspath:</strong> option.
</dd>
<dt class="bold"><strong>-Dibm.stream.nio=</strong>[true | false]</dt>
<dd>From v1.4.1 onwards, by default the IO converters are used.  
This option addresses the ordering of IO and NIO converters.   When
this option is set to true,  the NIO converters are used instead of
the IO converters.
</dd>
<dt class="bold"><a id="cmdline_properties__djava.compiler" name="cmdline_properties__djava.compiler"></a><strong>-Djava.compiler=</strong>[NONE | j9jit24]</dt>
<dd>Disables the Java compiler
by setting to NONE. Enable JIT compilation by setting to j9jit24 (Equivalent
to <strong>-Xjit</strong>).
</dd>
<dt class="bold"><strong>-Djava.net.connectiontimeout=</strong>[n]</dt>
<dd>'n' is the number of seconds to wait for the connection to be
established with the server. If this option is not specified in the
command line, the default value of 0 (infinity) is used. The value
can be used as a timeout limit when an asynchronous java-net application
is trying to establish a connection with its server. If this value
is not set, a java-net application waits until the default connection
timeout value is met. For instance, <samp class="xph">java -Djava.net.connectiontimeout=2
TestConnect</samp>  causes the java-net client application to wait
only 2 seconds to establish a connection with its server.
</dd>
<dt class="bold"><img src="../delta.gif" alt="Start of change" /><font color="RED"><strong>-Dsun.awt.keepWorkingSetOnMinimize=true</strong></font><img src="../deltaend.gif" alt="End of change" /></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">When a Java application
using the Abstract Windowing Toolkit (AWT) is minimized, the default
behavior is to &quot;trim&quot; the &quot;working set&quot;. The working set
is the application memory stored in RAM. Trimming means that the working
set is marked as being available for swapping out if the memory is
required by another application. The advantage of trimming is that
memory is available for other applications. The disadvantage is that
a &quot;trimmed&quot; application might experience a delay as the working
set memory is brought back into RAM.

<p>The <strong>-Dsun.awt.keepWorkingSetOnMinimize=true</strong> system
property stops the JVM trimming an application when it is minimized.
The default behavior is to trim an application when it is minimized.</p></font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><strong>-Dsun.net.client.defaultConnectTimeout=</strong><em>&lt;value
in milliseconds&gt;</em></dt>
<dd>Specifies the default value for the connect timeout for the protocol
handlers used by the java.net.URLConnection class. The default value
set by the protocol handlers is -1, which means that no timeout is
set. 

<p>When a connection is made by an applet to a server and the
server does not respond properly, the applet might seem to hang. The
delay might also cause the browser to hang. The apparent hang occurs
because there is  no network connection timeout. To avoid this problem,
the Java Plug-in has added a
default value to the network timeout of 2 minutes for all HTTP connections.
You can override the default by setting this property.</p>
</dd>
<dt class="bold"><strong>-Dsun.net.client.defaultReadTimeout=</strong><em>&lt;value
in milliseconds&gt;</em></dt>
<dd>Specifies the default value for the read timeout for the protocol
handlers used by the java.net.URLConnection class  when reading from
an input stream when a connection is established to a resource. The
default value set by the protocol handlers is -1, which means that
no timeout is set.
</dd>
<dt class="bold"><strong>-Dsun.nio.MaxDirectMemorySize=</strong><em>&lt;value
in bytes&gt;</em></dt>
<dd>Limits the native memory size for nio Direct
Byte Buffer objects to the value specified.
</dd>
<dt class="bold"><strong>-Dsun.rmi.transport.tcp.connectionPool=</strong>[true
| any non-null value] 	</dt>
<dd>Enables thread pooling for the RMI ConnectionHandlers in the TCP
transport layer implementation.
</dd>
<dt class="bold"><strong>-Dswing.useSystemFontSettings=</strong>[false]</dt>
<dd>From v1.4.1 onwards, by default, Swing programs running with the Windows Look and Feel render
with the system font set by the user instead of a Java-defined font.
As a result, fonts for v1.4.1 differ from the fonts in earlier releases.
This option addresses compatibility problems like these for programs
that depend on the old behavior. By setting this option, v1.4.1 fonts
and those of earlier releases are the same for Swing programs running
with the Windows Look and
Feel.
</dd>
</dl>
<a name="commands_jvm"></a>
<h2 id="commands_jvm"><a href="#ToC_211">JVM command-line options</a></h2>
<div>
<p>Use these options to configure your JVM. The options prefixed
with <strong>-X</strong> are nonstandard.</p></div><a id="idx72" name="idx72"></a><a id="idx73" name="idx73"></a>
<p>For options that take a <em>&lt;size&gt;</em> parameter,
suffix the number with "k" or "K" to indicate kilobytes, "m" or "M"
to indicate megabytes, or "g" or "G" to indicate gigabytes.</p>
<p>For options that take a <em>&lt;percentage&gt;</em> parameter,
use a number from 0 to 1. For example, 50% is 0.5.</p>
<p> Options that relate to the JIT are listed under <a href="#commands_jit">JIT and AOT command-line options</a>. Options that relate to the Garbage
Collector are listed under <a href="#commands_gc">Garbage Collector command-line options</a>.</p>
<dl class="parml">
<dt class="bold"><strong>-X</strong></dt>
<dd>Displays help on nonstandard options.
</dd>
</dl>
<p></p>
<dl class="parml">
<dt class="bold"><strong>-Xaggressive</strong></dt>
<dd><span><em><span class="bold-italic">(Linux PPC32 only)</span></em> </span>Enables performance
optimizations that are expected to be the default in future releases.
</dd>
</dl>
<dl class="parml">
<dt class="bold"><strong>-Xargencoding</strong></dt>
<dd>You can put Unicode escape sequences in the argument list. This
option is set to off by default.
</dd>
<dt class="bold"><strong>-Xbootclasspath:</strong><em>&lt;directories
and compressed or Java archive files separated by : (; on</em> Windows<em>)&gt;</em></dt>
<dd>Sets the search path for bootstrap classes and resources. The
default is to search for bootstrap classes and resources in the internal
VM directories and .jar files.
</dd>
<dt class="bold"><strong>-Xbootclasspath/a:</strong><em>&lt;directories
and compressed or Java archive files separated by : (; on</em> Windows<em>)&gt;</em></dt>
<dd>Appends the specified directories, compressed files, or jar files
to the end of the bootstrap class path. The default is to search for
bootstrap classes and resources in the internal VM directories and
.jar files.
</dd>
<dt class="bold"><strong>-Xbootclasspath/p:</strong><em>&lt;directories
and compressed or Java archive files separated by : (; on</em> Windows<em>)&gt;</em></dt>
<dd>Adds a prefix of the specified directories, compressed files,
or Java archive files to the
front of the bootstrap class path. Do not deploy applications that
use the <strong>-Xbootclasspath:</strong> or the <strong>-Xbootclasspath/p:</strong> option
to override a class in the standard API. The reason is that such a
deployment contravenes the Java 2
Runtime Environment binary code license. The default is to search
for bootstrap classes and resources in the internal VM directories
and <samp>.jar</samp> files.
</dd>
<dt class="bold"><strong>-Xcheck:classpath</strong></dt>
<dd>Displays a warning message if an error is discovered in the class
path; for example, a missing directory or JAR file.
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xcheck:gc</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;scan
options&gt;</span><span class="delim">]</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;verify
options&gt;</span><span class="delim">]</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;misc
options&gt;</span><span class="delim">]</span></span></dt>
<dd> Performs additional checks on garbage collection. By default,
no checking is performed. See the output of <strong>-Xcheck:gc:help</strong> for
more information.
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xcheck:jni</span><span class="delim">[</span><span class="kwd">:help</span><span class="delim">]</span><span class="delim">[</span><span class="kwd">:</span><span class="var">&lt;option&gt;</span><span class="oper">=</span><span class="var">&lt;value&gt;</span><span class="delim">]</span></span></dt>
<dd><a id="idx74" name="idx74"></a><a id="idx75" name="idx75"></a> Performs
additional checks for JNI functions. This option is equivalent to <strong>-Xrunjnichk</strong>.
By default, no checking is performed.
</dd>
<dt class="bold"><a id="commands_jvm__xcheckmemory" name="commands_jvm__xcheckmemory"></a><span class="synph"><span class="kwd">-Xcheck:memory</span><span class="delim">[</span><span class="delim">:</span><span class="var">&lt;option&gt;</span><span class="delim">]</span></span></dt>
<dd><a id="idx76" name="idx76"></a><a id="idx77" name="idx77"></a> Identifies
memory leaks inside the JVM using strict checks that cause the JVM
to exit on failure. If no option is specified, <strong>all</strong> is
used by default. The available options are as follows:

<dl class="parml">
<dt class="bold"><strong>all</strong></dt>
<dd>Enables checking of all allocated and freed blocks on every free
and allocate call. This check of the heap is the most thorough. It
typically causes the JVM to exit on nearly all memory-related problems
soon after they are caused. This option has the greatest affect on
performance.
</dd>
<dt class="bold"><strong>callsite=</strong><em>&lt;number of allocations&gt;</em></dt>
<dd>
<p>Displays callsite information every <em>&lt;number of allocations&gt;</em>.
Deallocations are not counted. Callsite information is presented in
a table with separate information for each callsite. Statistics include:
</p>
<ul>
<li>The number and size of allocation and free requests since the
last report.</li>
<li>The number of the allocation request responsible for the largest
allocation from each site.</li></ul><p class="indatacontent"> Callsites are presented as <samp class="xph">sourcefile:linenumber</samp> for
C code and assembly function name for assembler code.</p>

<p>Callsites
that do not provide callsite information are accumulated into an "unknown"
entry.</p>
</dd>
<dt class="bold"><strong>failat=</strong><em>&lt;number of allocations&gt;</em></dt>
<dd>Causes memory allocation to fail (return NULL) after <em>&lt;number
of allocations&gt;</em>. Setting <em>&lt;number of allocations&gt;</em> to
13 causes the 14th allocation to return NULL. Deallocations are not
counted. Use this option to ensure that JVM code reliably handles
allocation failures. This option is useful for checking allocation
site behavior rather than setting a specific allocation limit.
</dd>
<dt class="bold"><strong>ignoreUnknownBlocks</strong></dt>
<dd>Ignores attempts to free memory that was not allocated using the <strong>-Xcheck:memory</strong> tool.
Instead, the <strong>-Xcheck:memory</strong> statistics printed out at the end
of a run indicates the number of &quot;unknown&quot; blocks that were freed.
</dd>
<dt class="bold"><strong>mprotect=</strong><em>&lt;top|bottom&gt;</em></dt>
<dd>Locks pages of memory on supported platforms, causing the program
to stop if padding before or after the allocated block is accessed
for reads or writes. An extra page is locked on each side of the block
returned to the user. 

<p>If you do not request an exact multiple of
one page of memory, a region on one side of your memory is not locked.
The <strong>top</strong> and <strong>bottom</strong> options
control which side of the memory area is locked. <strong>top</strong> aligns
your memory blocks to the top of the page (lower address), so buffer
underruns result in an application failure. <strong>bottom</strong> aligns
your memory blocks to the bottom of the page (higher address) so buffer
overruns result in an application failure.</p>

<p>Standard padding
scans detect buffer underruns when using <strong>top</strong> and
buffer overruns when using <strong>bottom</strong>.</p>
</dd>
<dt class="bold"><strong>nofree</strong></dt>
<dd>Keeps a list of blocks already used instead of freeing memory.
This list, and the list of currently allocated blocks, is checked
for memory corruption on every allocation and deallocation. Use this
option to detect a dangling pointer (a pointer that is "dereferenced"
after its target memory is freed). This option cannot be reliably
used with long-running applications (such as WebSphere Application Server), because &quot;freed&quot; memory
is never reused or released by the JVM.
</dd>
<dt class="bold"><strong>noscan</strong></dt>
<dd>Checks for blocks that are not freed. This option has little effect
on performance, but memory corruption is not detected. This option
is compatible only with <strong>subAllocator</strong>, <strong>callsite</strong>,
and <strong>callsitesmall</strong>.
</dd>
<dt class="bold"><strong>quick</strong></dt>
<dd>Enables block padding only and is used to detect basic heap corruption.
Every allocated block is padded with sentinel bytes, which are verified
on every allocate and free. Block padding is faster than the default
of checking every block, but is not as effective.
</dd>
<dt class="bold"><strong>skipto=</strong><em>&lt;number of allocations&gt;</em></dt>
<dd>Causes the program to check only on allocations that occur after <em>&lt;number
of allocations&gt;</em>. Deallocations are not counted. Use this
option to speed up JVM startup when early allocations are not causing
the memory problem. The JVM performs approximately 250+ allocations
during startup.
</dd>
<dt class="bold"><span class="synph"><span class="kwd">subAllocator</span><span class="delim">[</span><span class="oper">=</span><span class="var">&lt;size
in MB&gt;</span><span class="delim">]</span></span></dt>
<dd>Allocates a dedicated and contiguous region of memory for all
JVM allocations. This option helps to determine if user JNI code or
the JVM is responsible for memory corruption. Corruption in the JVM <strong>subAllocator</strong> heap
suggests that the JVM is causing the problem; corruption in the user-allocated
memory suggests that user code is corrupting memory. Typically, user
and JVM allocated memory are interleaved.
</dd>
<dt class="bold"><strong>zero</strong></dt>
<dd>Newly allocated blocks are set to 0 instead of being filled with
the <samp class="xph">0xE7E7xxxxxxxxE7E7</samp> pattern. Setting these blocks
to 0 helps you to determine whether a callsite is expecting zeroed
memory, in which case the allocation request is followed by <samp class="xph">memset(pointer,
0, size)</samp>.
</dd>
</dl>
</dd>
<dt class="bold"><a id="commands_jvm__xclassgc" name="commands_jvm__xclassgc"></a><strong>-Xclassgc</strong></dt>
<dd>Enables dynamic unloading of classes by the JVM. This unloading
is the default behavior. To disable dynamic class unloading, use the <a href="#commands_jvm__xnoclassgc"><strong>-Xnoclassgc</strong></a> option.
</dd>
<dt class="bold"><a id="commands_jvm__xcompressedrefs" name="commands_jvm__xcompressedrefs"></a><strong>-Xcompressedrefs</strong></dt>
<dd><strong><span class="bold-italic">(64-bit only)</span></strong> Uses 32-bit values for references. See the Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on &quot;Compressed references&quot; for
more information. By default, references are 64-bit. 

<p><img src="../delta.gif" alt="Start of change" /><font color="RED"><strong>-Xcompressedrefs</strong> cannot be included
in an <strong>-Xoptionsfile</strong>, but only specified on the
command line or using the <strong>IBM_JAVA_OPTIONS</strong> environment
variable.</font><img src="../deltaend.gif" alt="End of change" /></p>
</dd>
<dt class="bold"><strong>-Xdbg:</strong><em>&lt;options&gt;</em></dt>
<dd>Loads debugging libraries to support the remote debugging of applications.
This option is equivalent to <strong>-Xrunjdwp</strong>. By default,
the debugging libraries are not loaded, and the VM instance is not
enabled for debug.
</dd>
<dt class="bold"><strong>-Xdebug</strong></dt>
<dd>This option is deprecated. Use <strong>-Xdbg</strong> for
debugging.
</dd>
<dt class="bold"><strong>-Xdiagnosticscollector[:settings=&lt;filename&gt;]</strong></dt>
<dd>Enables the Diagnostics Collector. See the
Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on &quot;The Diagnostics Collector&quot; for
more information. The settings option allows you to specify a different
Diagnostics Collector settings file to use instead of the default <samp>dc.properties</samp> file
in the JRE.
</dd>
<dt class="bold"><strong>-Xdisablejavadump</strong></dt>
<dd>Turns off Javadump generation on errors and signals. By default,
Javadump generation is enabled.
</dd>
<dt class="bold"><strong>-Xdump</strong></dt>
<dd>See the Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on &quot;Using dump agents&quot; for
more information.
</dd>
<dt class="bold"><strong>-Xenableexplicitgc</strong></dt>
<dd>Signals to the VM that calls to System.gc() trigger
a garbage collection. This option is enabled by default.
</dd>
<dt class="bold"><img src="../delta.gif" alt="Start of change" /><font color="RED"><strong>-Xfastresolve</strong><em>&lt;n&gt;</em></font><img src="../deltaend.gif" alt="End of change" /></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">This option is used to tune performance by improving the resolution
time for classes when the field count exceeds the threshold specified
by <em>&lt;n&gt;</em>. If profiling tools show significant
costs in field resolution, change the threshold until the costs are
reduced. If you enable this option, additional memory is used when
the threshold is exceeded.</font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><strong>-Xfuture</strong></dt>
<dd>Turns on strict class-file format checks. Use this flag when you
are developing new code because stricter checks will become the default
in future releases. By default, strict format checks are disabled.
</dd>
<dt class="bold"><strong>-Xiss</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the initial stack size for Java threads.
By default, the stack size is set to 2 KB. Use the <strong>-verbose:sizes</strong> option
to output the value that the VM is using.
</dd>
<dt class="bold"><strong>-Xjarversion</strong></dt>
<dd>Produces output information about the version of each jar file
in the class path, the boot class path, and the extensions directory.
Version information is taken from the Implementation-Version and Build-Level properties
in the manifest of the jar.
</dd>
<dt class="bold"><strong>-Xjni:</strong><em>&lt;suboptions&gt;</em></dt>
<dd>Sets JNI options. You can use the following suboption with the <strong>-Xjni</strong> option:

<dl class="parml">
<dt class="bold"><strong>-Xjni:arrayCacheMax</strong>=[<em>&lt;size in
bytes&gt;</em>|unlimited]</dt>
<dd>Sets the maximum size of the array cache. The default size is
8096 bytes.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xlinenumbers</strong></dt>
<dd>Displays line numbers in stack traces for debugging. See also <strong>-Xnolinenumbers</strong>.
By default, line numbers are on.
</dd>
</dl>
<p></p>
<dl class="parml">
<dt class="bold"><strong>-Xlog</strong><strong></strong></dt>
<dd>
<p> Enables message logging. To prevent message
logging, use the <strong>-Xlog:none</strong> option. By default,
logging is enabled. This option is
available from Java 6 SR5. See <a href="./diag/appendixes/msgs/messages_generic.html">Messages</a>.</p>
</dd>
<dt class="bold"><a id="commands_jvm__xlp" name="commands_jvm__xlp"></a><strong>-Xlp</strong><em>&lt;size&gt;</em> </dt>
<dd><strong>Linux:</strong> Requests
the JVM to allocate the Java heap
with large pages. If large pages are not available, the JVM does not
start, displaying the error message <samp class="xph">GC: system configuration
does not support option --&gt; '-Xlp'</samp>. The JVM uses shmget() to
allocate large pages for the heap. Large pages are supported by systems
running Linux kernels v2.6
or higher. By default, large pages are not used.
<a name="wq188"></a>
<div class="note-noindent" id="wq188">
<span class="notetitle">Note:</span> <span class="notebody">Linux for System
z only supports a large page size of 1M.</span></div>

<p><strong>AIX&reg;, Linux,
and Windows only:</strong> If
a <em>&lt;size&gt;</em> is specified, the JVM attempts to allocate
the JIT code cache memory using pages of that size. If unsuccessful,
or if executable pages of that size are not supported, the JIT code
cache memory is allocated using the smallest available executable
page size.</p>
</dd>
<dt class="bold"><strong>-Xmso</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the initial stack size for
operating system threads. The
default value can be determined by running the command: 
<pre class="xmp">java -verbose:sizes</pre> The
maximum value for the stack size varies according to platform and
specific machine configuration. If you exceed the maximum value, a <samp>java/lang/OutOfMemoryError</samp> message
is reported.
</dd>
<dt class="bold"><strong>-Xnoagent</strong></dt>
<dd>Disables support for the old JDB debugger.
</dd>
<dt class="bold"><a id="commands_jvm__xnoclassgc" name="commands_jvm__xnoclassgc"></a><strong>-Xnoclassgc</strong></dt>
<dd>Disables dynamic class unloading. This option disables the release
of native and Java heap storage
associated with Java class loaders
and classes that are no longer being used by the JVM. The default
behavior is as defined by <a href="#commands_jvm__xclassgc"><strong>-Xclassgc</strong></a>.
Enabling this option is not recommended except under the direction
of the IBM Java support team. The reason is the option
can cause unlimited native memory growth, leading to out-of-memory
errors.
</dd>
<dt class="bold"><strong>-Xnolinenumbers</strong></dt>
<dd>Disables the line numbers for debugging. See also <strong>-Xlinenumbers</strong>.
By default, line number are on.
</dd>
<dt class="bold"><strong>-Xnosigcatch</strong></dt>
<dd>Disables JVM signal handling code. See also <strong>-Xsigcatch</strong>.
By default, signal handling is enabled.
</dd>
<dt class="bold"><strong>-Xnosigchain</strong></dt>
<dd>Disables signal handler chaining. See also <strong>-Xsigchain</strong>.
By default, the signal handler chaining is enabled.
</dd>
<dt class="bold"><a id="commands_jvm__xoptionsfile" name="commands_jvm__xoptionsfile"></a><strong>-Xoptionsfile=</strong><em>&lt;file&gt;</em></dt>
<dd>
<p>Specifies a file that contains JVM options and definitions.
By default, no option file is used.</p>

<p>The options file does not
support these options:
</p>
<ul><img src="../delta.gif" alt="Start of change" /><font color="RED">
<li><strong>-assert</strong></li>
<li><strong>-fullversion</strong></li>
<li><strong>-help</strong></li>
<li><strong>-memorycheck</strong></li>
<li><strong>-showversion</strong></li>
<li><strong>-version</strong></li>
<li><strong>-Xcompressedrefs</strong></li>
<li><strong>-Xjarversion</strong></li>
<li><strong>-Xoptionsfile</strong></li></font><img src="../deltaend.gif" alt="End of change" /></ul><p class="indatacontent">Although you cannot use <strong>-Xoptionsfile</strong> recursively
within an options file, you can use <strong>-Xoptionsfile</strong> multiple
times on the same command line to load more than one options files.</p>

<p><em>&lt;file&gt;</em> contains
options that are processed as if they had been entered directly as
command-line options. For example, the options file might contain:</p>
<pre class="xmp">-DuserString=ABC123
-Xmx256MB</pre><p class="indatacontent"> Some options use quoted strings as parameters.
Do not split quoted strings over multiple lines using the line continuation
character '\'. The '&yen;' character is not supported as a line continuation
character. For example, the following example is not valid in an options
file:</p>
<pre class="xmp">-Xevents=vmstop,exec="cmd /c \
echo %pid has finished."</pre><p class="indatacontent"> The following example is valid
in an options file:</p>
<pre class="xmp">-Xevents=vmstop, \
exec="cmd /c echo %pid has finished."</pre>
</dd>
<dt class="bold"><strong>-Xoss</strong><em>&lt;size&gt;</em></dt>
<dd>Recognized but deprecated. Use <strong>-Xss</strong> and <strong>-Xmso</strong>.
Sets the maximum Java stack
size for any thread. The maximum value for the stack
size varies according to platform and specific machine configuration.
If you exceed the maximum value, a <samp>java/lang/OutOfMemoryError</samp> message
is reported.
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xrdbginfo</span><span class="delim">:</span><span class="var">&lt;host&gt;</span><span class="delim">:</span><span class="var">&lt;port&gt;</span></span></dt>
<dd>Loads the remote debug information server with the specified host
and port. By default, the remote debug information server is disabled.
</dd>
<dt class="bold"><strong>-Xrs</strong></dt>
<dd> <span>Disables
signal handling in the JVM. Setting <strong>-Xrs</strong> prevents
the Java runtime from handling
any internally or externally generated signals such as SIGSEGV and SIGABRT.
Any signals raised are handled by the default operating system handlers.
Disabling signal handling in the JVM reduces performance by approximately
2-4%, depending on the application.</span>
<a name="wq189"></a>
<div class="note-noindent" id="wq189">
<span class="notetitle">Note:</span> <span class="notebody">Linux always uses SIGUSR1.</span></div>

<dl class="parml">
<dt class="bold"><strong>-Xrs:sync</strong></dt>
<dd>On UNIX systems,
this option disables signal handling in the JVM for SIGSEGV, SIGFPE,
SIGBUS, SIGILL, SIGTRAP, and SIGABRT signals. However, the JVM still
handles the SIGQUIT and SIGTERM signals, among others.   As with <strong>-Xrs</strong>, the use of <strong>-Xrs:sync</strong> reduces
performance by approximately 2-4%, depending on the application.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xrun</strong><em>&lt;library name&gt;</em>[:<em>&lt;options&gt;</em>]</dt>
<dd>Use the later option <strong>-agentlib</strong> instead. For
more information about <strong>-agentlib</strong>, see <a href="http://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=/com.ibm.java.doc.diagnostics.60/diag/tools/jvmti.html" target="_blank">http://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=/com.ibm.java.doc.diagnostics.60/diag/tools/jvmti.html</a>.

<p><strong>-Xrun</strong> loads
helper libraries. To load multiple libraries, specify it more than
once on the command line. Examples of these libraries are:</p>

<dl class="parml">
<dt class="bold"><strong>-Xrunhprof</strong>[:help] | [:<em>&lt;option&gt;</em>=<em>&lt;value&gt;</em>,
...]</dt>
<dd>Performs heap, CPU, or monitor profiling.
</dd>
<dt class="bold"><a id="commands_jvm__runjdwp" name="commands_jvm__runjdwp"></a><strong>-Xrunjdwp</strong>[:help] | [:<em>&lt;option&gt;</em>=<em>&lt;value&gt;</em>,
...]</dt>
<dd>Loads debugging libraries to support the remote debugging of applications.
This option is the same as <strong>-Xdbg</strong>.
</dd>
<dt class="bold"><a name="commands_jvm__xrunjnichk"></a><strong id="commands_jvm__xrunjnichk">-Xrunjnichk</strong>[:help] | [:<em>&lt;option&gt;</em>=<em>&lt;value&gt;</em>,
...]</dt>
<dd>Deprecated. Use <strong>-Xcheck:jni</strong> instead.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xscmx</strong><em>&lt;size&gt;</em></dt>
<dd>Specifies cache size. This option applies only if a cache is being
created and no cache of the same name exists. The default cache size
is platform-dependent. You can find out the size value being used
by adding <strong>-verbose:sizes</strong> as a command-line argument. Minimum
cache size is 4 KB. Maximum cache size is platform-dependent. The
size of cache that you can specify is limited by the amount of physical
memory and paging space available to the system. The virtual address
space of a process is shared between the shared classes cache and
the Java heap. Increasing the
maximum size of the Java heap
reduces the size of the shared classes cache that you can create.
</dd>
<dt class="bold"><a id="commands_jvm__xselectivedebug" name="commands_jvm__xselectivedebug"></a><strong>-XselectiveDebug</strong></dt>
<dd>Enables selective debugging. Use the com.ibm.jvm.Debuggable annotation
to mark classes and methods that must be available for debugging.
The JVM optimizes methods that do not need debugging to provide better
performance in a debugging environment. See the <cite>User Guide</cite> for
your platform for more information.
</dd>
<dt class="bold"><a id="commands_jvm__xshareclasses" name="commands_jvm__xshareclasses"></a><strong>-Xshareclasses:</strong><em>&lt;suboptions&gt;</em></dt>
<dd>
<p>Enables class sharing. This option can take a number of suboptions,
some of which are cache utilities. Cache utilities perform the required
operation on the specified cache, without starting the VM. You can
combine multiple suboptions, separated by commas, but the cache utilities
are mutually exclusive.</p>

<p>You can use the following suboptions
with the <strong>-Xshareclasses</strong> option:
</p>
<dl class="parml">
<dt class="bold"><strong>cacheDir=</strong><em>&lt;directory&gt;</em></dt>
<dd>Sets the directory in which cache data is read and written. By
default, <em>&lt;directory&gt;</em> is <samp>/tmp/javasharedresources</samp> on Linux, AIX, z/OS,
and IBM i. You must have sufficient
permissions in <em>&lt;directory&gt;</em>.  The JVM writes persistent cache
files directly into the directory specified. Persistent cache files
can be safely moved and deleted from the file system. Nonpersistent
caches are stored in shared memory and have control files that describe
the location of the memory. Control files are stored in a <samp>javasharedresources</samp> subdirectory
of the <strong>cacheDir</strong> specified. Do not move or delete
control files in this directory. The <strong>listAllCaches</strong> utility,
the <strong>destroyAll</strong> utility, and the <strong>expire</strong> suboption
work only in the scope of a given <strong>cacheDir</strong>.
</dd>
<dt class="bold"><strong>cacheRetransformed</strong></dt>
<dd>Enables caching of classes that have been transformed using the
JVMTI RetransformClasses function. See the Diagnostics Guide
(<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on the &quot;JVMTI redefinition and
retransformation of classes&quot; for more information.
</dd>
<dt class="bold"><strong>destroy</strong> (Utility option) </dt>
<dd>Destroys a cache specified by the <strong>name</strong>, <strong>cacheDir</strong>,
and <strong>nonpersistent</strong> suboptions. A cache can be
destroyed only if all JVMs using it have shut down and the user has
sufficient permissions.
</dd>
<dt class="bold"><strong>destroyAll</strong> (Utility option) </dt>
<dd>Tries to destroy all caches available using the
specified <strong>cacheDir</strong> and <strong>nonpersistent</strong> suboptions.
A cache can be destroyed only if all JVMs using it have shut down
and the user has sufficient permissions.
</dd>
<dt class="bold"><strong>expire=</strong><em>&lt;time in minutes&gt;</em> (Utility
option) </dt>
<dd>Destroys all caches that have been unused for the time specified
before loading shared classes. This option is not a utility option
because it does not cause the JVM to exit.
</dd>
<dt class="bold"><strong>groupAccess</strong></dt>
<dd>Sets operating system permissions on a new cache to allow group
access to the cache. The default is user access only.
</dd>
<dt class="bold"><strong>help</strong></dt>
<dd>Lists all the command-line options.
</dd>
<dt class="bold"><strong>listAllCaches</strong> (Utility option) </dt>
<dd>Lists all the compatible and incompatible caches
that exist in the specified cache directory. If you do not specify <strong>cacheDir</strong>,
the default directory is used. Summary information, such as Java version and current usage,
is displayed for each cache.
</dd>
<dt class="bold"><strong>mprotect=</strong>[all | default | none]</dt>
<dd>By default, the memory pages containing the cache are protected
at all times, unless a specific page is being updated. This protection
helps prevent accidental or deliberate corruption to the cache. The
cache header is not protected by default because this protection has
a small performance cost. Specifying <samp>all</samp> ensures
that all the cache pages are protected, including the header. Specifying <samp>none</samp> disables
the page protection.
</dd>
<dt class="bold"><strong>modified=</strong><em>&lt;modified context&gt;</em></dt>
<dd>Used when a JVMTI agent is installed that might modify bytecode
at run time. If you do not specify this suboption and a bytecode modification
agent is installed, classes are safely shared with an extra performance
cost. The <em>&lt;modified context&gt;</em> is a descriptor chosen by the
user; for example, <em>myModification1</em>. This option
partitions the cache, so that only JVMs using context <em>myModification1</em> can
share the same classes. For instance, if you run an application with
a modification context and then run it again with a different modification
context, all classes are stored twice in the cache. See the Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section &quot;Dealing with runtime bytecode
modification&quot; for more information.
</dd>
<dt class="bold"><strong>name=</strong><em>&lt;name&gt;</em></dt>
<dd>Connects to a cache of a given name, creating the cache if it
does not exist. This option is also used to indicate the cache that
is to be modified by cache utilities; for example, <strong>destroy</strong>.
Use the <strong>listAllCaches</strong> utility to show which named
caches are currently available. If you do not specify a name, the
default name &quot;sharedcc_%u&quot; is used. "%u" in the cache name inserts
the current user name. You can specify &quot;%g&quot; in
the cache name to insert the current group name.
</dd>
<dt class="bold"><strong>noaot</strong></dt>
<dd>Disables caching and loading of AOT code.
</dd>
<dt class="bold"><strong>noBootclasspath</strong></dt>
<dd>Disables the storage of classes loaded by the bootstrap class
loader in the shared classes cache. Often used with the SharedClassURLFilter API
to control exactly which classes are cached. See the Diagnostics
Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on the &quot;SharedClassHelper API&quot; for
more information about shared class filtering.
</dd>
<dt class="bold"><strong>none</strong></dt>
<dd>Added to the end of a command line, disables class data sharing.
This suboption overrides class sharing arguments found earlier on
the command line.
</dd>
<dt class="bold"><strong>nonfatal</strong></dt>
<dd>Allows the JVM to start even if class data sharing
fails. Normal behavior for the JVM is to refuse to start if class
data sharing fails. If you select <strong>nonfatal</strong> and
the shared classes cache fails to initialize, the JVM attempts to
connect to the cache in read-only mode. If this attempt fails, the
JVM starts without class data sharing.
</dd>
<dt class="bold"><strong>nonpersistent</strong> </dt>
<dd>Uses a nonpersistent cache. The cache is lost when the operating
system shuts down. Nonpersistent and persistent caches can have the
same name. You must always use
the <strong>nonpersistent</strong> suboption when running utilities
such as <strong>destroy</strong> on a nonpersistent cache.
</dd>
<dt class="bold"><strong>persistent</strong> (default
for Windows and Linux platforms)</dt>
<dd>Uses a persistent cache. The cache is created on disk, which persists
beyond operating system restarts. Nonpersistent and persistent caches
can have the same name.
</dd>
<dt class="bold"><strong>printAllStats</strong> (Utility option)</dt>
<dd>Displays detailed information about the contents of the cache
specified in the <strong>name=</strong><em>&lt;name&gt;</em> suboption.
If the name is not specified, statistics are displayed about the default
cache. Every class is listed in chronological order with a reference
to the location from which it was loaded. See the Diagnostics Guide
(<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on the &quot;printAllStats utility&quot; for
more information.
</dd>
<dt class="bold"><strong>printStats</strong> (Utility option) </dt>
<dd>Displays summary information for the cache specified
by the <strong>name</strong>, <strong>cacheDir</strong>, and <strong>nonpersistent</strong> suboptions.
The most useful information displayed is how full the cache is and
how many classes it contains. Stale classes are classes that have
been updated on the file system and which the cache has therefore
marked "stale". Stale classes are not purged from the cache and can
be reused. See the Diagnostics Guide
(<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on the &quot;printStats utility&quot; for
more information.
</dd>
<dt class="bold"><strong>readonly</strong></dt>
<dd>Opens an existing cache with read-only permissions. The JVM does
not create a new cache with this suboption. Opening a cache read-only
prevents the JVM from making any updates to the cache. It also allows
the JVM to connect to caches created by other users or groups without
requiring write access. By default, this suboption is not specified.
</dd>
<dt class="bold"><a id="commands_jvm__xshareclasses-reset" name="commands_jvm__xshareclasses-reset"></a><strong>reset</strong></dt>
<dd>Causes a cache to be destroyed and then re-created when the JVM
starts up. This option can be added to the end of a command line as <strong>-Xshareclasses:reset</strong>.
</dd>
<dt class="bold"><strong>safemode</strong></dt>
<dd>Forces the JVM to load all classes from disk and apply the modifications
to those classes (if applicable). See the Diagnostics Guide
(<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on &quot;Using the safemode option&quot; for
more information.
</dd>
<dt class="bold"><strong>silent</strong></dt>
<dd>Disables all shared class messages, including error messages.
Unrecoverable error messages, which prevent the JVM from initializing,
are displayed.
</dd>
<dt class="bold"><strong>verbose</strong></dt>
<dd>Gives detailed output on the cache I/O activity, listing information
about classes being stored and found. Each class loader is given a
unique ID (the bootstrap loader is always 0) and the output shows
the class loader hierarchy at work, where class loaders must ask their
parents for a class before they can load it themselves. It is typical
to see many failed requests; this behavior is expected for the class
loader hierarchy. The standard option <strong>-verbose:class</strong> also
enables class sharing verbose output if class sharing is enabled.
</dd>
<dt class="bold"><strong>verboseAOT</strong></dt>
<dd>Enables verbose output when compiled AOT code is being found or
stored in the cache. AOT code is generated heuristically. You might
not see any AOT code generated at all for a small application. You
can disable AOT caching using the <strong>noaot</strong> suboption. See the Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on &quot;JITM messages&quot; for a list
of the messages produced.
</dd>
<dt class="bold"><strong>verboseHelper</strong></dt>
<dd>Enables verbose output for the Java Helper
API. This output shows you how the Helper API is used by your class
loader.
</dd>
<dt class="bold"><strong>verboseIO</strong></dt>
<dd>Gives detailed output on the cache I/O activity, listing information
about classes being stored and found. Each class loader is given a
unique ID (the bootstrap loader is always 0) and the output shows
the class loader hierarchy at work, where class loaders must ask their
parents for a class before they can load it themselves. It is typical
to see many failed requests; this behavior is expected for the class
loader hierarchy.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xsigcatch</strong></dt>
<dd>Enables VM signal handling code. See also <strong>-Xnosigcatch</strong>.
By default, signal handling is enabled.
</dd>
<dt class="bold"><strong>-Xsigchain</strong></dt>
<dd>Enables signal handler chaining. See also <strong>-Xnosigchain</strong>.
By default, signal handler chaining is enabled.
</dd>
<dt class="bold"><strong>-Xss</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the maximum stack size for Java threads. The default is 256 KB for 32-bit
JVMs and 512 KB for 64-bit JVMs.<span> The maximum value
varies according to platform and specific machine configuration. If
you exceed the maximum value, a <samp>java/lang/OutOfMemoryError</samp> message
is reported.</span>
</dd>
<dt class="bold"><strong>-Xssi</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the stack size increment for Java threads. When the stack for a Java thread becomes full it is increased in
size by this value until the maximum size (<strong>-Xss</strong>)
is reached. The default is 16 KB.
</dd>
<dt class="bold"><strong>-Xthr:minimizeUserCPU</strong></dt>
<dd>Minimizes user-mode CPU usage in thread synchronization where
possible. The reduction in CPU usage might be a trade-off in exchange
for lower performance.
</dd>
</dl>
<p></p>
<dl class="parml">
<dt class="bold"><span class="synph"><span class="kwd">-Xtrace</span><span class="delim">[</span><span class="kwd">:help</span><span class="delim">]</span> <span class="delim">|</span> <span class="delim">[</span><span class="delim">:</span><span class="var">&lt;option&gt;</span><span class="oper">=</span><span class="var">&lt;value&gt;</span><span class="delim">,</span> <span class="delim">...</span><span class="delim">]</span></span></dt>
<dd>See the Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on the &quot;Controlling the trace&quot; for
more information.
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xverify</span>[:<span class="var">&lt;option&gt;</span>]</span></dt>
<dd>With no parameters, enables the verifier, which is the default.
Therefore, if used on its own with no parameters, for example, <strong>-Xverify</strong>,
this option does nothing. Optional parameters are as follows: 

<ul>
<li><strong>all</strong> - enable maximum verification</li>
<li><strong>none</strong> - disable the verifier</li>
<li><strong>remote</strong> - enables strict class-loading checks on remotely
loaded classes</li></ul>The verifier is on by default and must be enabled for all production
servers. Running with the verifier off is not a supported configuration.
If you encounter problems and the verifier was turned off using <strong>-Xverify:none</strong>,
remove this option and try to reproduce the problem.
</dd>
<dt class="bold"><span class="synph"><span class="kwd">-Xzero</span>[:<span class="var">&lt;option&gt;</span>]</span></dt>
<dd>
<p>Enables reduction of the memory footprint of Java when concurrently running multiple Java invocations. <strong>-Xzero</strong> might
not be appropriate for all types of applications because it changes
the implementation of <samp>java.util.ZipFile</samp>, which
might cause extra memory usage. <strong>-Xzero</strong> includes
the optional parameters: 
</p>
<ul>
<li><strong>j9zip</strong> - enables the j9zip sub option</li>
<li><strong>noj9zip</strong> - disables the j9zip sub option</li>
<li><strong>sharezip</strong> - enables the sharezip sub option</li>
<li><strong>nosharezip</strong> - disables the sharezip sub option</li>
<li> - enables the sharebootzip sub
option</li>
<li> - disables the sharebootzip
sub option</li>
<li><strong>none</strong> - disables all sub options</li>
<li><strong>describe</strong> - prints the sub options in effect</li></ul>

<p>Because future versions might include more default options, <strong>-Xzero</strong> options
are used to specify the sub options that you want to disable. By default, <strong>-Xzero</strong> enables <strong>j9zip</strong> and <strong>sharezip</strong>.
A combination of <strong>j9zip</strong> and <strong>sharezip</strong> enables
all jar files to have shared caches:
</p>
<ul>
<li><strong>j9zip</strong> - uses a new <samp>java.util.ZipFile</samp> implementation.
This suboption is not a requirement for <strong>sharezip</strong>;
however, if <strong>j9zip</strong> is not enabled, only the bootstrap
jars have shared caches.</li>
<li><strong>sharezip</strong> - puts the j9zip cache into shared memory. The
j9zip cache is a map of zip entry names to file positions used to
quickly find entries in the zip file. You must enable <strong>-Xshareclasses</strong> to
avoid a warning message. When using the <strong>sharezip</strong> suboption,
note that this suboption allows every opened .zip file and .jar file
to store the j9zip cache in shared memory, so you might fill the shared
memory when opening multiple new .zip files and .jar files. The affected
API is <samp>java.util.zip.ZipFile</samp> (superclass of <samp>java.util.jar.JarFile</samp>).
The .zip and .jar files do not have to be on a class path.</li></ul>

<p>The system property com.ibm.zero.version is
defined, and has a current value of 2. Although <strong>-Xzero</strong> is
accepted on all platforms, support for the sub options varies by platform:
</p>
<ul>
<li><strong>-Xzero</strong> with all other sub options are available
only on Windows x86-32 and Linux x86-32 platforms.</li></ul><p class="indatacontent">.</p>
</dd>
</dl>
<a name="xxcommand-lineoptions"></a>
<h3 id="xxcommand-lineoptions"><a href="#ToC_212">-XX command-line options</a></h3>
<div>
<p>JVM command-line options that are specified with -XX are
not stable and are not recommended for casual use.</p></div>
<p>These options are subject to change without notice.</p>
<dl class="parml">
<dt class="bold"><strong>-XXallowvmshutdown:[false|true]</strong></dt>
<dd>This option is provided as a workaround for customer applications
that cannot shut down cleanly, as described in APAR IZ59734. Customers
who need this workaround should use <strong>-XXallowvmshutdown:false</strong>.
The default option is <strong>-XXallowvmshutdown:true</strong> forJava 6 SR5 onwards.
</dd>
<dt class="bold"><strong>-XX:MaxDirectMemorySize=</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the maximum size for an nio direct buffer. By default, the
maximum size is 64 MB.
</dd>
<dt class="bold"><strong>-XX:-StackTraceInThrowable</strong></dt>
<dd>This option removes stack traces from exceptions. By default,
stack traces are available in exceptions. Including a stack trace
in exceptions requires walking the stack and that can affect performance.
Removing stack traces from exceptions can improve performance but
can also make problems harder to debug.

<p>When this option is enabled, Throwable.getStackTrace() returns
an empty array and the stack trace is displayed when an uncaught exception
occurs. Thread.getStackTrace() and Thread.getAllStackTraces() are
not affected by this option.</p>
</dd>
<dt class="bold"><strong>-XX:+UseCompressedOops</strong></dt>
<dd><strong><span class="bold-italic">(64-bit only)</span></strong> This option enables compressed references
in 64-bit JVMs and is provided to help when porting applications from
the Sun JVM to the IBM JVM.
This option might not be supported in subsequent releases. The <strong>-XX:+UseCompressedOops</strong> option
is similar to specifying <strong>-Xcompressedrefs</strong>, which
is detailed in the topic <a href="#commands_jvm">JVM command-line options</a> .
</dd>
<dt class="bold"><strong>-XX:-UseCompressedOops</strong></dt>
<dd><strong><span class="bold-italic">(64-bit only)</span></strong> This option prevents the use of compressed
references in 64-bit JVMs. The option is provided to help when porting
applications from the Sun JVM to the IBM JVM,
and might not be supported in subsequent releases.
</dd>
</dl>
<a name="commands_jit"></a>
<h2 id="commands_jit"><a href="#ToC_213">JIT and AOT command-line options</a></h2>
<div>
<p>Use these JIT and AOT compiler
command-line options to control code compilation.</p></div><a id="idx78" name="idx78"></a><a id="idx79" name="idx79"></a>
<p>For more information about JIT and AOT,
see the
Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>).</p>
<dl class="parml">
<dt class="bold"><a id="commands_jit__xaot" name="commands_jit__xaot"></a><strong>-Xaot</strong>[:<em>&lt;parameter&gt;</em>=<em>&lt;value&gt;</em>,
...] </dt>
<dd>With no parameters, enables the AOT compiler. The AOT compiler
is enabled by default but is not active unless shared classes are enabled.
Using this option on its own has no effect. Use this option to control
the behavior of the AOT compiler. These parameters are useful:

<dl class="parml">
<dt class="bold"><strong>count=</strong><em>&lt;n&gt;</em></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">Where <em>&lt;n&gt;</em> is the
number of times a method is called before it is compiled or loaded
from an existing shared class cache. For example, setting <samp class="xph">count=0</samp> forces
the AOT compiler to compile everything on first execution.</font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><span class="synph"><span class="kwd">limitFile=</span><span class="delim">(</span><span class="var">&lt;filename&gt;</span><span class="delim">,</span><span class="var">&lt;m&gt;</span><span class="delim">,</span><span class="var">&lt;n&gt;</span><span class="delim">)</span></span></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">Compile or load only the methods listed
on lines <em>&lt;m&gt;</em> to <em>&lt;n&gt;</em> in
the specified limit file. Methods not listed in the limit file and
methods listed on lines outside the range are not compiled or loaded.</font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><strong>loadExclude=</strong><em>&lt;methods&gt;</em></dt>
<dd>Do not load methods beginning with <em>&lt;methods&gt;</em>.
</dd>
<dt class="bold"><strong>loadLimit=</strong><em>&lt;methods&gt;</em></dt>
<dd>Load methods beginning with <em>&lt;methods&gt;</em> only.
</dd>
<dt class="bold"><span class="synph"><span class="kwd">loadLimitFile=</span><span class="delim">(</span><span class="var">&lt;filename&gt;</span><span class="delim">,</span><span class="var">&lt;m&gt;</span><span class="delim">,</span><span class="var">&lt;n&gt;</span><span class="delim">)</span></span></dt>
<dd>Load only the methods listed on lines <em>&lt;m&gt;</em> to <em>&lt;n&gt;</em> in
the specified limit file. Methods not listed in the limit file and
methods listed on lines outside the range are not loaded.
</dd>
<dt class="bold"><strong>verbose</strong></dt>
<dd>Reports information about the AOT and JIT compiler configuration
and method compilation.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xcodecache</strong><em>&lt;size&gt;</em></dt>
<dd>This option is used to tune performance. It sets the size of each
block of memory that is allocated to store the native code of compiled Java methods. By default, this size
is selected internally according to the processor architecture and
the capability of your system. If profiling tools show significant
costs in trampolines, that is a good reason to change the size until
the costs are reduced. Changing the size does not mean always increasing
the size. The option provides the mechanism to tune for the right
size until hot interblock calls are eliminated. A reasonable starting
point to tune for the optimal size is (totalNumberByteOfCompiledMethods
* 1.1).
<a name="wq191"></a>
<div class="note-noindent" id="wq191">
<span class="notetitle">Note:</span> <span class="notebody">Trampolines are where reflection is used to avoid inner
classes. JVMTI identifies trampolines in a methodLoad2 event.</span></div>
</dd>
<dt class="bold"><strong>-Xint</strong></dt>
<dd>Makes the JVM use the Interpreter only, disabling the Just-In-Time
(JIT) <span>and Ahead-Of-Time (AOT)</span> compilers.
By default, the JIT compiler is enabled. By default,
the AOT compiler is enabled, but is not used by the JVM unless shared
classes are also enabled.
</dd>
<dt class="bold"><a id="commands_jit__xjit" name="commands_jit__xjit"></a><strong>-Xjit</strong>[:<em>&lt;parameter&gt;</em>=<em>&lt;value&gt;</em>,
...] </dt>
<dd>With no parameters, enables the JIT compiler. The JIT compiler
is enabled by default, so using this option on its own has no effect.
Use this option to control the behavior of the JIT compiler. Useful
parameters are:

<dl class="parml">
<dt class="bold"><strong>count=</strong><em>&lt;n&gt;</em></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">Where <em>&lt;n&gt;</em> is the
number of times a method is called before it is compiled.
For example, setting <samp class="xph">count=0</samp> forces the JIT compiler
to compile everything on first execution.</font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><strong>limitFile=</strong>(<em>&lt;filename&gt;</em>, <em>&lt;m&gt;</em>, <em>&lt;n&gt;</em>)</dt>
<dd>Compile only the methods listed on lines <em>&lt;m&gt;</em> to <em>&lt;n&gt;</em> in
the specified limit file. Methods not listed in the limit file and
methods listed on lines outside the range are not compiled.
</dd>
<dt class="bold"><strong>optlevel=</strong>[ noOpt | cold | warm | hot | veryHot
| scorching ]</dt>
<dd>Forces the JIT compiler to compile all methods at a specific optimization
level. Specifying <strong>optlevel</strong> might have an unexpected
effect on performance, including lower overall performance.
</dd>
<dt class="bold"><strong>verbose</strong></dt>
<dd>Reports information about the JIT and AOT compiler configuration
and method compilation.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xnoaot</strong></dt>
<dd>Turns off the AOT compiler and disables the use of AOT-compiled
code. By default, the AOT compiler is enabled but is active only when
shared classes are also enabled. Using this option does not affect
the JIT compiler.
</dd>
<dt class="bold"><strong>-Xnojit</strong></dt>
<dd><img src="../delta.gif" alt="Start of change" /><font color="RED">Turns off the JIT compiler. By default,
the JIT compiler is enabled. This option does not affect the AOT compiler.</font><img src="../deltaend.gif" alt="End of change" />
</dd>
<dt class="bold"><strong>-Xquickstart</strong></dt>
<dd>Causes the JIT compiler to run with a subset of
optimizations. The effect is faster compilation times that improve
startup time, but longer running applications might run slower.<span> When the AOT compiler is active (both
shared classes and AOT compilation enabled), <strong>-Xquickstart</strong> causes
all methods to be AOT compiled. The AOT compilation improves the startup
time of subsequent runs, but might reduce performance for longer running
applications.</span> <strong>-Xquickstart</strong> can degrade performance
if it is used with long-running applications that contain hot methods.
The implementation of <strong>-Xquickstart</strong> is subject
to change in future releases. By default, <strong>-Xquickstart</strong> is
disabled.
</dd>
</dl>
<dl class="parml">
<dt class="bold"><strong>-XsamplingExpirationTime</strong><em>&lt;time&gt;</em></dt>
<dd>Disables the JIT sampling thread after <em>&lt;time&gt;</em> seconds.
When the JIT sampling thread is disabled, no processor cycles are
used by an idle JVM.
</dd>
<dt class="bold"><a id="commands_jit__xscmaxaot" name="commands_jit__xscmaxaot"></a><strong>-Xscmaxaot</strong><em>&lt;size&gt;</em></dt>
<dd>Optionally applies a maximum number of bytes in the class cache
that can be used for AOT data. This option is useful if you want a
certain amount of cache space guaranteed for non-AOT data. If this
option is not specified, the maximum limit for AOT data is the amount
of free space in the cache. The value of this option must not be smaller
than the value of <strong>-Xscminaot</strong> and must not be
larger than the value of <strong>-Xscmx</strong>.
</dd>
<dt class="bold"><strong>-Xscminaot</strong><em>&lt;size&gt;</em></dt>
<dd>Optionally applies a minimum number of bytes in the class cache
to reserve for AOT data. If this option is not specified, no space
is reserved for AOT data. However, AOT data is still written to the
cache until the cache is full or the <strong>-Xscmaxaot</strong> limit
is reached. The value of this option must not exceed the value of <strong>-Xscmx</strong> or <strong>-Xscmaxaot</strong>.
The value of <strong>-Xscminaot</strong> must always be considerably less than
the total cache size, because AOT data can be created only for cached
classes. If the value of <strong>-Xscminaot</strong> equals the
value of <strong>-Xscmx</strong>, no class data or AOT data can
be stored.
</dd>
</dl>
<a name="commands_gc"></a>
<h2 id="commands_gc"><a href="#ToC_214">Garbage Collector command-line options</a></h2>
<div>
<p>Use these Garbage Collector command-line options to control
garbage collection.</p></div><a id="idx80" name="idx80"></a><a id="idx81" name="idx81"></a>
<p>You might need to read the section on &quot;Memory
management&quot; in the Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) to understand some of the references that
are given here.</p>
<p>The <strong>-verbose:gc</strong> option detailed
in the section on &quot;-verbose:gc logging&quot; in the Diagnostics Guide
(<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) is the main diagnostic aid that is available
for runtime analysis of the Garbage Collector. However, additional
command-line options are available that affect the behavior of the
Garbage Collector and might aid diagnostics.</p>
<p>For options that take a <em>&lt;size&gt;</em> parameter,
suffix the number with "k" or "K" to indicate kilobytes, "m" or "M"
to indicate megabytes, or "g" or "G" to indicate gigabytes.</p>
<p>For options that take a <em>&lt;percentage&gt;</em> parameter,
use a number from 0 to 1, for example, 50% is 0.5.</p>
<dl class="parml">
<dt class="bold"><strong>-Xalwaysclassgc</strong></dt>
<dd>Always perform dynamic class unloading checks during global collection.
The default behavior is as defined by <strong>-Xclassgc</strong>.
</dd>
<dt class="bold"><strong>-Xclassgc</strong></dt>
<dd><span>Enables the collection of class objects only on
class loader changes. This behavior is the default.</span>
</dd>
<dt class="bold"><strong>-Xcompactexplicitgc</strong></dt>
<dd>Enables full compaction each time System.gc() is
called.
</dd>
<dt class="bold"><strong>-Xcompactgc</strong></dt>
<dd>Compacts on all garbage collections (system and global).  

<p>The
default (no compaction option specified) makes the GC compact based
on a series of triggers that attempt to compact only when it is beneficial
to the future performance of the JVM.</p>
</dd>
<dt class="bold"><strong>-Xconcurrentbackground</strong><em>&lt;number&gt;</em></dt>
<dd>Specifies the number of low-priority background
threads attached to assist the mutator threads in concurrent mark.
The default is 0 on Linux zSeries and 1 on all other platforms.
</dd>
<dt class="bold"><strong>-Xconcurrentlevel</strong><em>&lt;number&gt;</em></dt>
<dd>Specifies the allocation "tax" rate.  It indicates the ratio between
the amount of heap allocated and the amount of heap marked.  The default
is 8.
</dd>
<dt class="bold"><strong>-Xconcurrentslack</strong><em>&lt;size&gt;</em></dt>
<dd>Attempts to keep the specified amount of the heap space free in
concurrent collectors by starting the concurrent operations earlier.
This behavior can sometimes alleviate pause time problems in concurrent
collectors at the cost of longer concurrent cycles, affecting total
throughput. The default is 0, which is optimal for most applications.
</dd>
<dt class="bold"><strong>-Xconmeter:</strong><em>&lt;soa | loa | dynamic&gt;</em></dt>
<dd>This option determines the usage of which area, LOA (Large Object
Area) or SOA (Small Object Area),  is metered and hence which allocations
are taxed during concurrent mark. Using <strong>-Xconmeter:soa</strong> (the
default) applies the allocation tax to allocations from the small
object area (SOA). Using <strong>-Xconmeter:loa</strong> applies
the allocation tax to allocations from the large object area (LOA).
If <strong>-Xconmeter:dynamic </strong> is specified, the collector
dynamically determines  which area to meter based on which area is
exhausted first, whether it is the SOA or the LOA.
</dd>
<dt class="bold"><strong>-Xdisableexcessivegc</strong></dt>
<dd>Disables the throwing of an OutOfMemory exception
if excessive time is spent in the GC.
</dd>
<dt class="bold"><strong>-Xdisableexplicitgc</strong></dt>
<dd>
<p>Disables System.gc() calls.</p>

<p>Many applications
still make an excessive number of explicit calls to System.gc() to
request garbage collection. In many cases, these calls degrade performance
through premature garbage collection and compactions. However, you
cannot always remove the calls from the application.</p>

<p>The <strong>-Xdisableexplicitgc</strong> parameter
allows the JVM to ignore these garbage collection suggestions. Typically,
system administrators use this parameter in applications that show
some benefit from its use.</p>

<p>By default, calls to System.gc() trigger
a garbage collection.</p>
</dd>
<dt class="bold"><strong>-Xdisablestringconstantgc</strong></dt>
<dd>Prevents strings in the string intern table from being collected.
</dd>
<dt class="bold"><strong>-Xenableexcessivegc</strong></dt>
<dd>If excessive time is spent in the GC, the option returns null for
an allocate request and thus causes an OutOfMemory exception
to be thrown. This action occurs only when the heap has been fully
expanded and the time spent is making up at least 95%. This behavior
is the default.
</dd>
<dt class="bold"><strong>-Xenablestringconstantgc</strong></dt>
<dd>Enables strings from the string intern table to be collected.
This behavior is the default.
</dd>
<dt class="bold"><strong>-Xgc:</strong><em>&lt;options&gt;</em></dt>
<dd>Passes options such as verbose, compact,
and nocompact to the Garbage Collector.
</dd>
<dt class="bold"><strong>-Xgc:splitheap</strong></dt>
<dd>Allocates the new and old areas of the generational Java heap in separate areas of memory. Using
a split heap forces the Garbage Collector to use the <strong>gencon</strong> policy
and disables resizing of the new and old memory areas. See the section on the &quot;Split
heap&quot; in the Diagnostics Guide (<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) for more information. By default, the Java heap is allocated in a single
contiguous area of memory.
</dd>
<dt class="bold"><strong>-Xgcpolicy:</strong>&lt;<strong>gencon</strong> | <strong>optavgpause</strong> | <strong>optthruput</strong> | <strong>subpool</strong> (AIX, Linux and IBM i on IBM POWER architecture, Linux and z/OS on zSeries) &gt;</dt>
<dd>Controls the behavior of the Garbage Collector.  

<p>The <strong>gencon</strong> option requests the combined use of
concurrent and generational GC to help minimize the time that is spent
in any garbage collection pause.</p>

<p>The <strong>optavgpause</strong> option
reduces the time that is spent in these garbage collection pauses
and limits the effect of increasing heap size on the length of the
garbage collection pause. Use <strong>optavgpause</strong> if
your configuration has a large heap. Enables concurrent mark.</p>

<p>The <strong>optthruput</strong> option is the default and delivers high throughput
to applications, but at the cost of occasional pauses. Disables concurrent
mark.</p>

<p>The <strong>subpool</strong> option
(AIX, Linux and IBM i
on IBM POWER architecture, and z/OS) uses an improved object allocation algorithm
to achieve better performance when allocating objects on the heap.
 This option might improve performance on large SMP systems.</p>
</dd>
<dt class="bold"><strong>-Xgcthreads</strong><em>&lt;number&gt;</em></dt>
<dd>Sets the number of threads that the Garbage Collector uses for
parallel operations. <span>This total number of GC threads
is composed of one application thread with the remainder being dedicated
GC threads. By default, the number is set to the number of physical
CPUs present. </span><span>To set it to a different number
(for example 4), use <strong>-Xgcthreads4</strong>.</span> <span>The minimum valid value is 1, which</span> disables parallel
operations, at the cost of performance. No advantage is gained if
you increase the number of threads above the default setting; you
are recommended not to do so.

<p>On systems running
multiple JVMs or in LPAR environments where multiple JVMs can share
the same physical CPUs, you might want to restrict the number of GC
threads used by each JVM. The restriction helps prevent the total
number of parallel operation GC threads for all JVMs exceeding the
number of physical CPUs present, when multiple JVMs perform garbage
collection at the same time.</p>
</dd>
<dt class="bold"><strong>-Xgcworkpackets</strong><em>&lt;number&gt;</em></dt>
<dd>Specifies the total number of work packets available in the global
collector. If not specified, the collector allocates a number of packets
based on the maximum heap size.
</dd>
<dt class="bold"><strong>-Xloa</strong></dt>
<dd>Allocates a large object area (LOA). Objects are allocated in
this LOA rather than the SOA. By default, the LOA is enabled for all
GC policies except for subpool, where the LOA is not available.
</dd>
<dt class="bold"><strong>-Xloainitial</strong><em>&lt;percentage&gt;</em></dt>
<dd>Specifies the initial percentage (between 0 and 0.95) of the current
tenure space allocated to the large object area (LOA). The default
value is 0.05, which is 5%.
</dd>
<dt class="bold"><strong>-Xloamaximum</strong><em>&lt;percentage&gt;</em></dt>
<dd>Specifies the maximum percentage (between 0 and 0.95) of the current
tenure space allocated to the large object area (LOA). The default
value is 0.5, which is 50%.
</dd>
<dt class="bold"><strong>-Xloaminimum</strong><em>&lt;percentage&gt;</em></dt>
<dd>Specifies the minimum percentage (between 0 and 0.95) of the current
tenure space allocated to the large object area (LOA). The LOA does
not shrink below this value. The default value is 0, which is 0%.
</dd>
<dt class="bold"><strong>-Xmaxe</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the maximum amount by which the garbage collector expands
the heap. Typically, the garbage collector expands the heap when the
amount of free space falls below 30% (or by the amount specified using <strong>-Xminf</strong>),
by the amount required to restore the free space to 30%. The <strong>-Xmaxe</strong> option
limits the expansion to the specified value; for example <samp class="xph">-Xmaxe10M</samp> limits
the expansion to 10 MB. By default, there is no maximum expansion
size.
</dd>
<dt class="bold"><strong>-Xmaxf</strong><em>&lt;percentage&gt;</em></dt>
<dd>Specifies the maximum percentage of heap that must be free after
a garbage collection. If the free space exceeds this amount, the JVM
tries to shrink the heap. The default value is 0.6 (60%).
</dd>
<dt class="bold"><strong>-Xmaxt</strong><em>&lt;percentage&gt;</em></dt>
<dd>Specifies the maximum percentage of time to be spent in Garbage
Collection. If the percentage of time rises above this value, the
JVM tries to expand the heap. The default value is 13%.
</dd>
<dt class="bold"><strong>-Xmca</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the expansion step for the memory allocated to store the
RAM portion of loaded classes. Each time more memory is required to
store classes in RAM, the allocated memory is increased by this amount.
By default, the expansion step is 32 KB. Use the <strong>-verbose:sizes</strong> option
to determine the value that the VM is using. <span>If
the expansion step size you choose is too large, <samp>OutOfMemoryError</samp> is
reported. The exact value of a &quot;too large&quot; expansion step size
varies according to the platform and the specific machine configuration.</span>
</dd>
<dt class="bold"><strong>-Xmco</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the expansion step for the memory allocated to store the
ROM portion of loaded classes. Each time more memory is required to
store classes in ROM, the allocated memory is increased by this amount.
By default, the expansion step is 128 KB. Use the <strong>-verbose:sizes</strong> option
to determine the value that the VM is using. <span>If
the expansion step size you choose is too large, <samp>OutOfMemoryError</samp> is
reported. The exact value of a &quot;too large&quot; expansion step size
varies according to the platform and the specific machine configuration.</span>
</dd>
<dt class="bold"><strong>-Xmine</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the minimum amount by which the Garbage Collector expands
the heap. Typically, the garbage collector expands the heap by the
amount required to restore the free space to 30% (or the amount specified
using <strong>-Xminf</strong>). The <strong>-Xmine</strong> option
sets the expansion to be at least the specified value; for example, <samp class="xph">-Xmine50M</samp> sets
the expansion size to a minimum of 50 MB. By default, the minimum
expansion size is 1 MB.
</dd>
<dt class="bold"><strong>-Xminf</strong><em>&lt;percentage&gt;</em></dt>
<dd>Specifies the minimum percentage of heap to be left free after
a garbage collection.  If the free space falls below this amount,
the JVM attempts to expand the heap. The default value is 30%.
</dd>
<dt class="bold"><strong>-Xmint</strong><em>&lt;percentage&gt;</em></dt>
<dd>Specifies the minimum percentage of time to spend in Garbage Collection.
If the percentage of time drops below this value, the JVM tries to
shrink the heap. The default value is 5%.
</dd>
<dt class="bold"><strong>-Xmn</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the initial and maximum size of the new area to the specified
value when using <strong>-Xgcpolicy:gencon</strong>. Equivalent
to setting both <strong>-Xmns</strong> and <strong>-Xmnx</strong>.
 <span>If you set either <strong>-Xmns</strong> or <strong>-Xmnx</strong>,
you cannot set <strong>-Xmn</strong>. If you try to set <strong>-Xmn</strong> with
either <strong>-Xmns</strong> or <strong>-Xmnx</strong>, the
VM does not start, returning an error.</span> By default, <strong>-Xmn</strong> <span>is not set. </span><span>If the scavenger is
disabled, this option is ignored.</span>
</dd>
<dt class="bold"><strong>-Xmns</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the initial size of the new area to the specified value when
using <strong>-Xgcpolicy:gencon</strong>. By default, this option <span>is set to 25% of the value of the <strong>-Xms</strong> option.</span> <span>This
option returns an error if you try to use it with <strong>-Xmn</strong>.</span> <span>You can use the <strong>-verbose:sizes</strong> option
to find out the values that the VM is currently using.</span><span> If the scavenger is disabled, this option is ignored.</span>
</dd>
<dt class="bold"><strong>-Xmnx</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the maximum size of the new area to the specified value when
using <strong>-Xgcpolicy:gencon</strong>. By default, this option <span>is set to 25% of the value of the <strong>-Xmx</strong> option.</span> <span>This
option returns an error if you try to use it with <strong>-Xmn</strong>.</span> <span>You can use the <strong>-verbose:sizes</strong> option
to find out the values that the VM is currently using.</span><span> If the scavenger is disabled, this option is ignored.</span>
</dd>
<dt class="bold"><a id="commands_gc__xmo" name="commands_gc__xmo"></a><strong>-Xmo</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the initial and maximum size of the old (tenured) heap to
the specified value when using <strong>-Xgcpolicy:gencon</strong>.
Equivalent to setting both <strong>-Xmos</strong> and <strong>-Xmox</strong>. <span>If you set either <strong>-Xmos</strong> or <strong>-Xmox</strong>,
you cannot set <strong>-Xmo</strong>. If you try to set <strong>-Xmo</strong> with
either <strong>-Xmos</strong> or <strong>-Xmox</strong>, the
VM does not start, returning an error.</span> By default, <strong>-Xmo</strong> is <span>not set.</span>
</dd>
<dt class="bold"><strong>-Xmoi</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the amount the Java heap
is incremented when using <strong>-Xgcpolicy:gencon</strong>.
If set to zero, no expansion is allowed. By default, the increment
size is calculated on the expansion size, set by <strong>-Xmine</strong> and <strong>-Xminf</strong>.
</dd>
<dt class="bold"><strong>-Xmos</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the initial size of the old (tenure) heap to the specified
value when using <strong>-Xgcpolicy:gencon</strong>. <span>By default, this option is set to 75%
of the value of the <strong>-Xms</strong> option.</span> <span>This option returns an error if you try to use it with <strong>-Xmo</strong>.</span><span> You can use the <strong>-verbose:sizes</strong> option
to find out the values that the VM is currently using.</span>
</dd>
<dt class="bold"><strong>-Xmox</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the maximum size of the old (tenure) heap to the specified
value when using <strong>-Xgcpolicy:gencon</strong>. By default,
this option is <span>set to the same value as the <strong>-Xmx</strong> option.</span><span> This option returns an error if you try to use it with <strong>-Xmo</strong>.</span> <span>You can use the <strong>-verbose:sizes</strong> option
to find out the values that the VM is currently using.</span>
</dd>
<dt class="bold"><strong>-Xmr</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the size of the Garbage Collection "remembered set". This
set is a list of objects in the old (tenured) heap that have references
to objects in the new area. By default, this option is set to 16 K.
</dd>
<dt class="bold"><strong>-Xmrx</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the remembered maximum size setting.
</dd>
<dt class="bold"><strong>-Xms</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the initial Java heap
size. You can also use the <strong>-Xmo</strong> option. The minimum
size is 1 MB. 

<p>If scavenger is enabled, <strong>-Xms</strong> &gt;= <strong>-Xmn</strong> + <strong>-Xmo</strong>.</p> 

<p>If
scavenger is disabled, <strong>-Xms</strong> &gt;= <strong>-Xmo</strong>.</p>
</dd>
<dt class="bold"><strong>-Xmx</strong><em>&lt;size&gt;</em></dt>
<dd>Sets the maximum memory size  (<strong>-Xmx</strong> &gt;= <strong>-Xms</strong>) 

<p>Examples
of the use of <strong>-Xms</strong> and <strong>-Xmx</strong>: 
</p>
<dl class="parml">
<dt class="bold"><strong>-Xms2m -Xmx64m</strong></dt>
<dd>Heap starts at 2 MB and grows to a maximum of 64 MB.
</dd>
<dt class="bold"><strong>-Xms100m -Xmx100m</strong></dt>
<dd>Heap starts at 100 MB and never grows.
</dd>
<dt class="bold"><strong>-Xms20m -Xmx1024m</strong></dt>
<dd>Heap starts at 20 MB and grows to a maximum of 1 GB.
</dd>
<dt class="bold"><strong>-Xms50m</strong></dt>
<dd>Heap starts at 50 MB and grows to the default maximum.
</dd>
<dt class="bold"><strong>-Xmx256m</strong></dt>
<dd>Heap starts at default initial value and grows to a maximum of
256 MB.
</dd>
</dl>
</dd>
<dt class="bold"><strong>-Xnoclassgc</strong></dt>
<dd>Disables class garbage collection. This option switches off garbage
collection of storage associated with Java classes
that are no longer being used by the JVM. The default behavior is
as defined by <strong>-Xclassgc</strong>. By default, class garbage
collection is performed.
</dd>
<dt class="bold"><strong>-Xnocompactexplicitgc</strong></dt>
<dd>Disables compaction on System.gc() calls. Compaction
takes place on global garbage collections if you specify <strong>-Xcompactgc</strong> or
if compaction triggers are met. By default, compaction is enabled
on calls to System.gc().
</dd>
<dt class="bold"><strong>-Xnocompactgc</strong></dt>
<dd>Disables compaction on all garbage collections (system or global).
By default, compaction is enabled.
</dd>
<dt class="bold"><strong>-Xnoloa</strong></dt>
<dd>Prevents allocation of a large object area; all objects are allocated
in the SOA. See also <strong>-Xloa</strong>.
</dd>
<dt class="bold"><strong>-Xnopartialcompactgc</strong></dt>
<dd>Disables incremental compaction. See also <strong>-Xpartialcompactgc</strong>.
</dd>
<dt class="bold"><strong>-Xpartialcompactgc</strong></dt>
<dd>Enables incremental compaction. See also <strong>-Xnopartialcompactgc</strong>.
By default, this option is not set, so all compactions are full.
</dd>
<dt class="bold"><strong>-Xsoftmx</strong><em>&lt;size&gt;</em> (AIX only)</dt>
<dd>This option sets the initial maximum size of the Java heap. Use the <strong>-Xmx</strong> option
to set the maximum heap size. Use the AIX DLPAR
API in your application to alter the heap size limit between <strong>-Xms</strong> and <strong>-Xmx</strong> at
run time. By default, this option is set to the same value as <strong>-Xmx</strong>.
</dd>
<dt class="bold"><strong>-Xsoftrefthreshold</strong><em>&lt;number&gt;</em></dt>
<dd>Sets the value used by the GC
to determine the number of GCs after which a soft reference is cleared
if its referent has not been marked. The default is 32, meaning that
the soft reference is cleared after 32 * (percentage of free heap
space) GC cycles where its referent was not marked.
</dd>
<dt class="bold"><strong>-Xtgc:</strong><em>&lt;arguments&gt;</em></dt>
<dd>Provides GC tracing options, where <em>&lt;arguments&gt;</em> is
a comma-separated list containing one or more of the following arguments: 

<dl class="parml">
<dt class="bold"><strong>backtrace</strong></dt>
<dd>Before a garbage collection, a single line is printed containing
the name of the master thread for garbage collection, as well as the
value of the osThread slot in the J9VMThread structure.
</dd>
<dt class="bold"><strong>compaction</strong></dt>
<dd>Prints extra information showing the relative time spent by threads
in the &quot;move&quot; and &quot;fixup&quot; phases of compaction
</dd>
<dt class="bold"><strong>concurrent</strong></dt>
<dd>Prints extra information showing the activity of the concurrent
mark background thread
</dd>
<dt class="bold"><strong>dump</strong></dt>
<dd>Prints a line of output for every free chunk of memory in the
system, including "dark matter" (free chunks that are not on the free
list for some reason, typically because they are too small).  Each
line contains the base address and the size in bytes of the chunk.
 If the chunk is followed in the heap by an object, the size and class
name of the object is also printed. This argument has a similar effect
to the <strong>terse</strong> argument.
</dd>
<dt class="bold"><strong>freeList</strong></dt>
<dd>Before a garbage collection, prints information about the free
list and allocation statistics since the last GC.  Prints the number
of items on the free list, including "deferred" entries (with the
scavenger, the unused space is a deferred free list entry).  For TLH
and non-TLH allocations, prints the total number of allocations, the
average allocation size, and the total number of bytes discarded during
allocation.  For non-TLH allocations, also included is the average
number of entries that were searched before a sufficiently large entry
was found.
</dd>
<dt class="bold"><strong>parallel</strong></dt>
<dd>Produces statistics on the activity of the parallel threads during
the mark and sweep phases of a global GC.
</dd>
<dt class="bold"><strong>references</strong></dt>
<dd>Prints extra information every time that a reference object is
enqueued for finalization, showing the reference type, reference address,
and referent address.
</dd>
<dt class="bold"><strong>scavenger</strong></dt>
<dd>Prints extra information after each scavenger collection. A histogram
is produced showing the number of instances of each class, and their
relative ages, present in the survivor space. The information is obtained
by performing a linear walk-through of the space.
</dd>
<dt class="bold"><strong>terse</strong></dt>
<dd>Dumps the contents of the entire heap before and after a garbage
collection.  For each object or free chunk in the heap, a line of
trace output is produced.  Each line contains the base address, "a"
if it is an allocated object, and "f" if it is a free chunk, the size
of the chunk in bytes, and, if it is an object, its class name.
</dd>
</dl>
</dd>
<dt class="bold"><a id="commands_gc__xverbosegclog" name="commands_gc__xverbosegclog"></a><strong>-Xverbosegclog</strong>[:<em>&lt;file&gt;</em>[,&lt;X&gt;,&lt;Y&gt;]]</dt>
<dd>
<p>Causes <strong>-verbose:gc</strong> output to be written
to the specified file. If the file cannot be found, <strong>-verbose:gc</strong> tries
to create the file, and then continues as normal if it is successful.
If it cannot create the file (for example, if an invalid filename
is passed into the command), it redirects the output to stderr.</p>

<p>If
you specify <em>&lt;X&gt;</em> and <em>&lt;Y&gt;</em> the <strong>-verbose:gc</strong> output
is redirected to X files, each containing Y GC cycles.</p>

<p>The dump agent tokens can be used in the filename. See the Diagnostics Guide
(<a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>) section on the &quot;Dump agent tokens&quot; for
more information. If you do not specify <em>&lt;file&gt;</em>, <samp>verbosegc.%Y%m%d.%H%M%S.%pid.txt</samp> is
used.</p>

<p>By default, no verbose GC logging occurs.</p>
</dd>
</dl>
<a name="defaults"></a>
<h1 id="defaults"><a href="#ToC_215">Appendix B. Default settings for the JVM</a></h1>
<div>
<p>This appendix shows the default settings that the JVM uses.
These settings affect how the JVM operates if you do not apply any
changes to its environment. The tables show the JVM operation and
the default setting.</p></div><a id="idx82" name="idx82"></a><a id="idx83" name="idx83"></a>
<p>These tables are a quick reference to the state of the JVM when
it is first installed. The last column shows how the default setting
can be changed:
</p>
<dl>
<dt class="bold">c</dt>
<dd>The setting is controlled by a command-line parameter only.
</dd>
<dt class="bold">e</dt>
<dd>The setting is controlled by an environment variable only.
</dd>
<dt class="bold">ec</dt>
<dd>The setting is controlled by a command-line parameter or an environment
variable. The command-line parameter always takes precedence.
</dd>
</dl>
<a name="wq192"></a>
<table id="wq192" width="100%" summary="" border="1" frame="border" rules="all">
<thead valign="bottom">
<tr>
<th id="wq193" width="60%" align="center" valign="top">JVM setting</th>
<th id="wq194" width="21%" align="center" valign="top">Default</th>
<th id="wq195" width="17%" align="left" valign="top">Setting affected by</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td align="left" headers="wq193">Javadumps</td>
<td align="left" headers="wq194">Enabled</td>
<td align="center" headers="wq195">ec</td>
</tr>
<tr>
<td headers="wq193">Javadumps on out of memory</td>
<td headers="wq194">Enabled</td>
<td align="center" headers="wq195">ec</td>
</tr>
<tr>
<td align="left" headers="wq193">Heapdumps</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">ec</td>
</tr>
<tr>
<td headers="wq193">Heapdumps on out of memory</td>
<td headers="wq194">Enabled</td>
<td align="center" headers="wq195">ec</td>
</tr>
<tr>
<td headers="wq193">Sysdumps</td>
<td headers="wq194">Enabled</td>
<td align="center" headers="wq195"> ec</td>
</tr>
<tr>
<td align="left" headers="wq193">Where dump files are produced</td>
<td align="left" headers="wq194">Current&reg; directory</td>
<td align="center" headers="wq195">ec</td>
</tr>
<tr>
<td align="left" headers="wq193">Verbose output</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Boot classpath search</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">JNI checks</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Remote debugging</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Strict conformance checks</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Quickstart</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td headers="wq193">Remote debug info server</td>
<td headers="wq194">Disabled</td>
<td align="center" headers="wq195"> c</td>
</tr>
<tr>
<td align="left" headers="wq193">Reduced signaling</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Signal handler chaining</td>
<td align="left" headers="wq194">Enabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Classpath</td>
<td align="left" headers="wq194">Not set</td>
<td align="center" headers="wq195">ec</td>
</tr>
<tr>
<td headers="wq193">Class data sharing</td>
<td headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Accessibility support</td>
<td align="left" headers="wq194">Enabled</td>
<td align="center" headers="wq195">e</td>
</tr>
<tr>
<td align="left" headers="wq193">JIT compiler</td>
<td align="left" headers="wq194">Enabled</td>
<td align="center" headers="wq195">ec</td>
</tr>
<tr>
<td headers="wq193">AOT compiler (AOT is not
used by the JVM unless shared classes are also enabled)</td>
<td headers="wq194">Enabled</td>
<td align="center" headers="wq195"> c</td>
</tr>
<tr>
<td align="left" headers="wq193">JIT debug options</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">c</td>
</tr>
<tr>
<td align="left" headers="wq193">Java2D max size of fonts with algorithmic bold</td>
<td align="left" headers="wq194">14 point</td>
<td align="center" headers="wq195">e</td>
</tr>
<tr>
<td align="left" headers="wq193">Java2D use rendered bitmaps in scalable fonts</td>
<td align="left" headers="wq194">Enabled</td>
<td align="center" headers="wq195">e</td>
</tr>
<tr>
<td align="left" headers="wq193">Java2D freetype font rasterizing</td>
<td align="left" headers="wq194">Enabled</td>
<td align="center" headers="wq195">e</td>
</tr>
<tr>
<td align="left" headers="wq193">Java2D use AWT fonts</td>
<td align="left" headers="wq194">Disabled</td>
<td align="center" headers="wq195">e</td>
</tr>
</tbody>
</table>
<a name="wq196"></a>
<table id="wq196" width="100%" summary="" border="1" frame="border" rules="all">
<thead valign="bottom">
<tr>
<th id="wq197" width="32%" align="center" valign="top">JVM setting</th>
<th id="wq198" width="11%" align="left" valign="top">AIX</th>
<th id="wq199" width="11%" align="center" valign="top">IBM i</th>
<th id="wq200" width="11%" align="center" valign="top">Linux</th>
<th id="wq201" width="11%" align="center" valign="top">Windows</th>
<th id="wq202" width="11%" align="center" valign="top">z/OS</th>
<th id="wq203" width="11%" align="center" valign="top">Setting affected
by</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td align="left" headers="wq197">Default locale</td>
<td headers="wq198">None</td>
<td headers="wq199">None</td>
<td align="left" headers="wq200">None</td>
<td align="left" headers="wq201">N/A</td>
<td align="left" headers="wq202">None</td>
<td align="center" headers="wq203">e</td>
</tr>
<tr>
<td align="left" headers="wq197">Time to wait before starting plug-in</td>
<td headers="wq198">N/A</td>
<td headers="wq199">N/A</td>
<td align="left" headers="wq200">Zero</td>
<td align="left" headers="wq201">N/A</td>
<td align="left" headers="wq202">N/A</td>
<td align="center" headers="wq203">e</td>
</tr>
<tr>
<td align="left" headers="wq197">Temporary directory</td>
<td headers="wq198"><samp>/tmp</samp></td>
<td headers="wq199"><samp>/tmp</samp></td>
<td align="left" headers="wq200"><samp>/tmp</samp></td>
<td align="left" headers="wq201"><samp>c:\temp</samp></td>
<td align="left" headers="wq202"><samp>/tmp</samp></td>
<td align="center" headers="wq203">e</td>
</tr>
<tr>
<td align="left" headers="wq197">Plug-in redirection</td>
<td headers="wq198">None</td>
<td headers="wq199">None</td>
<td align="left" headers="wq200">None</td>
<td align="left" headers="wq201">N/A</td>
<td align="left" headers="wq202">None</td>
<td align="center" headers="wq203">e</td>
</tr>
<tr>
<td align="left" headers="wq197">IM switching</td>
<td headers="wq198">Disabled</td>
<td headers="wq199">Disabled</td>
<td align="left" headers="wq200">Disabled</td>
<td align="left" headers="wq201">N/A</td>
<td align="left" headers="wq202">Disabled</td>
<td align="center" headers="wq203">e</td>
</tr>
<tr>
<td align="left" headers="wq197">IM modifiers</td>
<td headers="wq198">Disabled</td>
<td headers="wq199">Disabled</td>
<td align="left" headers="wq200">Disabled</td>
<td align="left" headers="wq201">N/A</td>
<td align="left" headers="wq202">Disabled</td>
<td align="center" headers="wq203">e</td>
</tr>
<tr>
<td align="left" headers="wq197">Thread model</td>
<td headers="wq198">N/A</td>
<td headers="wq199">N/A</td>
<td align="left" headers="wq200">N/A</td>
<td align="left" headers="wq201">N/A</td>
<td align="left" headers="wq202">Native</td>
<td align="center" headers="wq203">e</td>
</tr>
<tr>
<td align="left" headers="wq197">Initial stack size for Java Threads 32-bit. Use: <strong>-Xiss&lt;size&gt;</strong></td>
<td headers="wq198">2 KB</td>
<td headers="wq199">2 KB</td>
<td align="left" headers="wq200">2 KB</td>
<td align="left" headers="wq201">2 KB</td>
<td align="left" headers="wq202">2 KB</td>
<td align="center" headers="wq203">c</td>
</tr>
<tr>
<td headers="wq197">Maximum stack size for Java Threads 32-bit. Use: <strong>-Xss&lt;size&gt;</strong></td>
<td headers="wq198">256 KB</td>
<td headers="wq199">256 KB</td>
<td headers="wq200">256 KB</td>
<td headers="wq201">256 KB</td>
<td headers="wq202">256 KB</td>
<td align="center" headers="wq203">c</td>
</tr>
<tr>
<td headers="wq197">Stack size for OS Threads 32-bit. Use <strong>-Xmso&lt;size&gt;</strong></td>
<td headers="wq198">256 KB</td>
<td headers="wq199">256 KB</td>
<td headers="wq200">256 KB</td>
<td headers="wq201">32 KB</td>
<td headers="wq202">256 KB</td>
<td align="center" headers="wq203">c</td>
</tr>
<tr>
<td headers="wq197">Initial stack size for Java Threads 64-bit. Use: <strong>-Xiss&lt;size&gt;</strong></td>
<td headers="wq198">2 KB</td>
<td headers="wq199">N/A</td>
<td headers="wq200">2 KB</td>
<td headers="wq201">2 KB</td>
<td headers="wq202">2 KB</td>
<td align="center" headers="wq203">c</td>
</tr>
<tr>
<td headers="wq197">Maximum stack size for Java Threads 64-bit. Use: <strong>-Xss&lt;size&gt;</strong></td>
<td headers="wq198">512 KB</td>
<td headers="wq199">N/A</td>
<td headers="wq200">512 KB</td>
<td headers="wq201">512 KB</td>
<td headers="wq202">512 KB</td>
<td align="center" headers="wq203">c</td>
</tr>
<tr>
<td headers="wq197">Stack size for OS Threads 64-bit. Use <strong>-Xmso&lt;size&gt;</strong></td>
<td headers="wq198">256 KB</td>
<td headers="wq199">N/A</td>
<td headers="wq200">256 KB</td>
<td headers="wq201">256 KB</td>
<td headers="wq202">256 KB</td>
<td align="center" headers="wq203">c</td>
</tr>
<tr>
<td headers="wq197">Initial heap size. Use <strong>-Xms&lt;size&gt;</strong></td>
<td headers="wq198">4 MB</td>
<td headers="wq199">4 MB</td>
<td headers="wq200">4 MB</td>
<td headers="wq201">4 MB</td>
<td headers="wq202">4 MB</td>
<td align="center" headers="wq203">c</td>
</tr>
<tr>
<td headers="wq197">Maximum Java heap size. Use <strong>-Xmx&lt;size&gt;</strong></td>
<td headers="wq198">Half the available memory with a minimum of
16 MB and a maximum of 512 MB</td>
<td headers="wq199">2 GB</td>
<td headers="wq200">Half the available memory with a minimum of
16 MB and a maximum of 512 MB</td>
<td headers="wq201">Half the real memory with a minimum of 16 MB
and a maximum of 2 GB</td>
<td headers="wq202">Half the available memory with a minimum of
16 MB and a maximum of 512 MB</td>
<td align="center" headers="wq203">c</td>
</tr>
</tbody>
</table>
<p>&quot;Available memory&quot; is defined
as being the smallest of two values:
</p>
<ul>
<li>The real or &quot;physical&quot; memory.</li>
<li>The <strong>RLIMIT_AS</strong> value.</li></ul>
<a name="limitations"></a>
<h1 id="limitations"><a href="#ToC_216">Appendix C. Known limitations</a></h1>
<div>
<p>Known limitations on the SDK and Runtime Environment
for Linux.</p></div>
<p>
<p>You can find more help
with problem diagnosis in the <cite>Diagnostics Guide</cite> at <a href="http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html" target="_blank">http://www.ibm.com/developerworks/java/jdk/diagnosis/60.html</a>.</p></p>
<p>
<a name="wq205"></a>
<h2 id="wq205">CUPS support</h2>
<p>The SDK and
Runtime Environment for Linux does
not support printing using the CUPS interface.</p></p>
<p>
<a name="wq206"></a>
<h2 id="wq206">BIOS settings on AMD64 SMP systems</h2>
<p>The <strong>Node
memory interleaving</strong> BIOS setting must be set to <samp class="xph">DISABLED</samp>.
Otherwise, unpredictable results might occur, including Java crashes and hangs. This instruction is
in accordance with recommendations from AMD.</p></p>
<p>
<a name="wq207"></a>
<h2 id="wq207">JConsole
monitoring tool Local tab</h2>
<p>In
the IBM JConsole tool, the <strong>Local</strong> tab,
which allows you to connect to other Virtual Machines on the same
system, is not available. Also, the corresponding command line <strong>pid</strong> option
is not supported. Instead, use the <strong>Remote</strong> tab
in JConsole to connect to the Virtual Machine that you want to monitor.
Alternatively, use the <strong>connection</strong> command-line
option, specifying a host of <samp class="xph">localhost</samp> and a port
number. When you start the application that you want to monitor, set
these command-line options:
</p>
<dl class="parml">
<dt class="bold"><strong>-Dcom.sun.management.jmxremote.port</strong>=<em>&lt;value&gt;</em></dt>
<dd>Specifies the port the management agent listens on.
</dd>
<dt class="bold"><strong>-Dcom.sun.management.jmxremote.authenticate=false</strong></dt>
<dd>Disables authentication unless you have created a user name file.
</dd>
<dt class="bold"><strong>-Dcom.sun.management.jmxremote.ssl=false</strong></dt>
<dd>Disables SSL encryption.
</dd>
</dl></p>
<p>
<a name="wq208"></a>
<h2 id="wq208">GUI
applications, such as the JConsole monitoring tool, on 64-bit Ubuntu
with a 32-bit JVM</h2>
<p>When running a 32-bit JVM on a 64-bit
Ubuntu system, GUI applications do not start because some AWT libraries
are missing. To fix the problem, install the 32-bit libraries using
the ia32-libs package:</p>
<pre class="xmp">sudo apt-get install ia32-libs</pre><p class="indatacontent"> The
following exception is thrown if the libraries are not available:</p>
<pre class="xmp">Exception in thread "main" java.lang.UnsatisfiedLinkError: awt (An exception was pending after running JNI_OnLoad)
        at java.lang.ClassLoader.loadLibraryWithPath(ClassLoader.java:993)
        at java.lang.ClassLoader.loadLibraryWithClassLoader(ClassLoader.java:962)
        at java.lang.System.loadLibrary(System.java:465)
        ... lines removed for clarity ...</pre>
<p>If problems
are encountered with DNS name resolution, install the package lib32nss-mdns.</p></p>
<p>
<a name="wq209"></a>
<h2 id="wq209">Incorrect stack traces when loading new classes after
an Exception is caught</h2>
<p>If new classes
are loaded after an Exception has been caught,
the stack trace contained in the Exception might
become incorrect. The stack trace becomes incorrect if classes in
the stack trace are unloaded, and new classes are loaded into their
memory segments.</p></p>
<p>
<a name="wq210"></a>
<h2 id="wq210">Web Start and Java 1.3 applications</h2>
<p>The IBM SDK
for Linux, v6 Web
Start does not support launching Java 1.3
applications.</p></p>
<p>
<a name="wq211"></a>
<h2 id="wq211">Slow DSA key pair generation</h2>
<p>Creating
DSA key pairs of unusual lengths can take a significant amount of
time on slow machines. Do not interpret the delay as a stop or endless
loop, because the process finishes if sufficient time is allowed.
The DSA key generation algorithm has been optimized to generate standard
key lengths (for instance, 512, 1024) more quickly than others.</p></p>
<p>
<a name="wq212"></a>
<h2 id="wq212">Creating a JVM using JNI</h2>
<p>Native
programs cannot create a VM with JNI_VERSION_1_1(0x00010001) interfaces.
You cannot call JNI_CreateJavaVM() and pass it
a version of JNI_VERSION_1_1(0x00010001). The versions that can be
passed are:</p></p>
<ul>
<li>JNI_VERSION_1_2(0x00010002)</li>
<li>JNI_VERSION_1_4(0x00010004)</li></ul>
<p>The VM created is determined by the Java libraries present (that is, 1.2.2, 1.3.x,
1.4.x, 5.x, 6.x),
not the one that is implied by the JNI interface version passed.</p>
<p>The
interface version does not affect any area of VM behavior other than
the functions available to native code.</p>
<p>
<a name="wq213"></a>
<h2 id="wq213">Window managers and keyboard
shortcuts</h2>
<p>Your window manager might override some of the Java keyboard shortcuts.  If you
need to use an overridden Java keyboard
shortcut, consult your operating system manual and change your window
manager keyboard shortcuts.</p></p>
<p>
<a name="wq214"></a>
<h2 id="wq214">X Window System file
descriptors</h2>
<p>The X Window System is unable to use file descriptors
above 255. Because the JVM holds file descriptors for open jar files,
X can run out of file descriptors. As a workaround, you can set the <strong>JAVA_HIGH_ZIPFDS</strong> environment
variable to tell the JVM to use higher file descriptors for jar files.</p>
<p>To
use the <strong>JAVA_HIGH_ZIPFDS</strong> environment variable,
set it to a value in the range 0 - 512. The JVM then opens the first
jar files using file descriptors up to 1024. For example, if your
program is likely to load 300 jar files:</p>
<p><samp class="xph">export JAVA_HIGH_ZIPFDS=300</samp></p>
<p>The
first 300 jar files are then loaded using the file descriptors 724
- 1023. Any jar files opened after that are opened in the typical
range.</p></p>
<p>
<a name="wq215"></a>
<h2 id="wq215">DBCS and the KDE clipboard</h2>
<p>You
might not be able to use the system clipboard with double-byte character
set (DBCS) to copy information between Linux applications
and Java applications if you
are running the K Desktop Environment (KDE).</p></p>
<p>
<a name="wq216"></a>
<h2 id="wq216">Limit on threads using
the LinuxThreads library</h2>
<p>On SLES9 and newer distributions, the default threading
library is NPTL, which implements Java threads
as native threads. On earlier distributions, the default threading
library is LinuxThreads, which implements threads as new processes.
If the number of Java threads
exceeds the maximum number of processes allowed, your program might
stop.</p>
<p>The maximum number of threads available is determined
by the lowest of:
</p>
<ul>
<li>The user processes setting (ulimit -u) in <samp>/etc/security/limits.conf</samp></li>
<li>The limit that is defined in <samp>/proc/sys/kernel/threads_max</samp></li>
<li>The limit <strong>PTHREAD_THREADS_MAX</strong> that is defined
in <samp>libpthreads.so</samp> (changing this value requires <samp>glibc</samp> to
be recompiled)</li></ul>
<p>However, you might run out of virtual storage before you
reach the maximum number of threads.</p></p>
<p>
<a name="wq217"></a>
<h2 id="wq217">ThreadMXBean
Thread User CPU Time limitation</h2>
<p>There is no way to distinguish
between user mode CPU time and system mode CPU time on this platform. ThreadMXBean.getThreadUserTime(), ThreadMXBean.getThreadCpuTime(), ThreadMXBean.getCurrentThreadUserTime(),
and ThreadMXBean.getCurrentThreadCpuTime() all
return the total CPU time for the required thread.</p></p>
<p>
<a name="wq218"></a>
<h2 id="wq218">KeyEvents and window managers</h2>
<p>KeyEvent results
that include the <strong>Alt</strong> key might differ between
window managers in Linux.
They also differ from results of other operating systems. When using
the default settings, <strong>Ctrl+Alt+A</strong> in the KWin
window manager produces a KeyEvent, whereas <strong>Ctrl+Alt+A</strong> in
the Metacity window manager does not produce a key event.</p></p>
<p>
<a name="wq219"></a>
<h2 id="wq219">The X Window System and the Meta
key</h2>
<p>On the Linux X
Window System, different key codes are generated when certain keys
are pressed at the same time. For example, the key code 64 is returned
when you press Alt_L or Meta_L. Similarly, the key code 113 is returned
when you press Alt_R or Meta_R. You can check the exact values by
typing the following instruction at a shell prompt:</p>
<pre class="xmp">xmodmap -pk</pre>
<p>With
these default settings, the SDK considers
that the Meta and Alt keys are pressed together. As a workaround,
remove the Meta_x mapping by typing the following instruction at a
shell prompt:</p>
<pre class="xmp">xmodmap -e "keysym Alt_L = Alt_L" -e "keysym Alt_R = Alt_R"  </pre>
<p>This
workaround might affect other X Window System applications that are
running on the same display if they use the Meta-key that was removed.</p></p>
<p>
<a name="wq220"></a>
<h2 id="wq220">SIGSEGV when creating a JVM using
JNI</h2>
<p>A call to JNI_CreateJavaVM() from
a JNI application might cause a segmentation fault (signal SIGSEGV);
to avoid this fault, rebuild your JNI program specifying the option <strong>-lpthread</strong>.</p></p>
<p>
<a name="wq221"></a>
<h2 id="wq221">Lack of resources with highly threaded
applications</h2>
<p>If you are running with many concurrent threads,
you might get a warning message:</p>
<pre class="xmp">java.lang.OutOfMemoryError</pre>
<p>The
message is an indication that your machine is running out of system
resources and messages can be caused by the following reasons:
</p>
<ul>
<li>If your Linux installation
uses LinuxThreads, rather than NPTL, the number of processes created
exceeds your user limit.</li>
<li>Not enough system resources are available to create new threads.
In this case, you might also see other Java exceptions,
depending on what your application is running.</li>
<li>Kernel memory is either running out or is fragmented.  You can
see corresponding Out of Memory kernel messages in <samp>/var/log/messages</samp>.
The messages are associated with the ID of the killed process.</li></ul>
<p>Try tuning your system to increase the corresponding system
resources.</p></p>
<p>
<a name="wq222"></a>
<h2 id="wq222">Globalization
on Ubuntu</h2>
<p><strong>For Chinese, Korean, and Japanese language
users of Ubuntu only.</strong></p>
<p>Chinese, Korean, and
Japanese locales do not display the correct fonts if CJK fonts are
not installed.</p></p>
<p>
<a name="wq223"></a>
<h2 id="wq223">X Server and client font problems</h2>
<p>When
running a Java AWT or Swing
application on a Linux machine
and exporting the display to a second machine, you might experience
 problems displaying some dialogs if the set of fonts loaded on the
X client machine is different from the set loaded on the X server
machine. To avoid this problem, install the same
fonts on both machines.</p></p>
<p>
<a name="wq224"></a>
<h2 id="wq224">UTF-8 encoding and MalformedInputExceptions</h2>
<p>If
your system locale is using a UTF-8 encoding, some tools might throw
a sun.io.MalformedInputException. To find out whether
your system is using a UTF-8 encoding, examine the locale-specific
environment variables such as <strong>LANG</strong> or <strong>LC_ALL</strong> to
see if they end with the &quot;.UTF-8&quot; suffix. If you get the warning sun.io.MalformedInputException,
change characters that are not in the 7-bit ASCII range (0x00 - 0x7f)
and are not represented as Java Unicode
character literals to Java Unicode
character literals (for example: '\u0080'). You can also work around
this problem by removing the &quot;.UTF-8&quot; suffix from the locale-specific
environment variables; for example, if your machine has a default
locale of &quot;en_US.UTF-8&quot;, set <strong>LANG</strong> to &quot;en_US&quot;.</p></p>
<p>
<a name="wq225"></a>
<h2 id="wq225">AMI and xcin problems
when exporting displays</h2>
<p>If you are using AMI and xcin in
a cross-platform environment, there might be a problem if you try
to export the display between a 32-bit and a 64-bit system, or between
a big-endian and a little-endian system. If you have this problem,
upgrade to the latest version of AMI and xcin.</p></p>
<p>
<a name="wq226"></a>
<h2 id="wq226">RHEL4 and XIM</h2>
<p><strong>For
Chinese, Korean and Japanese language users of RHEL4 only.</strong></p>
<p>No
XIM server is installed by default. To enter DBCS characters to a Java application, install a XIM
server package such as iiimf-x or kinput2.</p></p>
<p>
<a name="wq227"></a>
<h2 id="wq227">RHEL4 and
IIIMF</h2>
<p><strong>For Chinese, Korean, and Japanese language users
of RHEL4 only.</strong></p>
<p>If you are using the Internet/Intranet Input
Method Framework (IIIMF), use IIIMF packages that are included in
Red Hat Enterprise Linux 4
Update 2 or later. Contact Red Hat for guidance, at <a href="http://www.redhat.com" target="_blank">http://www.redhat.com</a>.</p>
<p><strong>(zSeries 64-bit only)</strong> You
might experience IIIMF failures or a failure to start. To resolve
the problem, upgrade to the latest IIIMF packages.</p>
<p><strong>(Traditional
Chinese on PPC, s390, or s390x only)</strong> IIIMF might not work. To
resolve the problem, use <samp>iiimf-le-xcin-0.1.7-13.EL4</samp> or
later.</p>
<p><strong>(Simplified Chinese on PPC, s390, or
s390x only)</strong> IIIMF might not work correctly. To resolve the problem,
use IIMF packages included in RHEL4 Update 5 or later.</p></p>
<p>
<a name="wq228"></a>
<h2 id="wq228">RHEL4 and
the zh_CN.GB18030 locale</h2>
<p><strong>Simplified Chinese language
users of RHEL4 only.</strong></p>
<p>The zh_CN.GB18030 locale is not supported
by xlib in RHEL4. xterm cannot activate Input Method
Server to enter GB18030 characters. Use the zh_CN.UTF8 locale instead.
If you have existing programs or data encoded with GB2312, GBK, or
GB18030, and you want to migrate them to RHEL4, you must preprocess
them with iconv to convert them to UTF-8 encoding
so that the programs can run and data can be displayed properly in
RHEL4 with the zh_CN.UTF8 locale.</p>
<p>This limitation is resolved
in RHEL4 U3.</p></p>
<p>
<a name="wq229"></a>
<h2 id="wq229">RHEL4 and
xcin</h2>
<p>You might experience hangs with xcin on RHEL4. To resolve
the problem, set <strong>ICCHECK_DISABLE</strong> to YES in the <samp>/etc/chinese/xcin/xcinrc</samp> file.</p>
<p><strong>64-bit
environments only</strong></p>
<p>On RHEL4 with xcin (Traditional Chinese
XIM server), you might experience unexpected behavior such as a segmentation
fault with Java on 64-bit environments
(such as AMD64 or zSeries 64-bit
platforms). To resolve the problem, upgrade to the latest xcin package.</p></p>
<p>
<a name="wq230"></a>
<h2 id="wq230">RHEL4 and
IIIMF focus change problems</h2>
<p><strong>RHEL4 only.</strong></p>
<p>When
using IIIMF (Internet Intranet Input Method Framework) to enter DBCS
characters, you might encounter focus change problems. The problem
occurs when minimizing active input components. After restoring the
component, the input method will switch back to SBCS. DBCS must then
be manually reactivated.</p>
<p>The following components have this
focus change problem: 
</p>
<ul>
<li>java.awt.Canvas</li>
<li>java.awt.Button</li>
<li>javax.swing.JButton</li>
<li>javax.swing.JSplitPane</li>
<li>javax.swing.JComboBox</li>
<li>javax.swing.JList</li></ul></p>
<p>
<a name="wq231"></a>
<h2 id="wq231">XIM
and the Java Plug-in</h2>
<p><strong>RHEL4, and SLES9 only</strong></p>
<p>For
Japanese, Chinese, and Korean language users, you cannot use XIM to
enter your own characters into text components on a Java applet in a Web browser. This
limitation occurs because XEmbed requires a fix to the X11 library
file. To work around this situation, specify the <strong>-Dsun.awt.noxembed=true</strong> system
parameter to disable XEmbed. You can set this option by using the
control panel: 
</p>
<ol type="1">
<li>Open the Java Plug-in control
panel and go to the <strong>Java</strong> tab.</li>
<li>Click the <strong>View</strong> button in the Java Applet Runtime Settings.</li>
<li>Enter <strong>-Dsun.awt.noxembed=true</strong> in the Java Runtime Parameters and click <strong>OK</strong>.</li>
<li>Click <strong>Apply</strong>.</li>
<li>Start a browser.</li></ol>
<p>This limitation is resolved in RHEL4
U3 and SLES9 SP3.</p></p>
<p>
<a name="wq233"></a>
<h2 id="wq233">Arabic characters and Matrox video
cards</h2>
<p><strong>Intel 32-bit
platforms only</strong></p>
<p>For Arabic text users, when using Linux with a Matrox video card
and acceleration enabled, distortion of characters can be seen when
using drawString to display large fonts. This problem
is caused by the driver for those cards. The suggested workaround
is to disable acceleration for the device.</p></p>
<p>
<a name="wq234"></a>
<h2 id="wq234">SLES9 NPTL and the
parallel port driver</h2>
<p><strong>Intel 32-bit
platforms only</strong></p>
<p>On SLES 9 NPTL, the parallel port driver
causes a kernel failure and brings down a Java thread. The JVM detects the failure when
it tries to suspend the thread for Garbage Collection and then stops,
producing a core file and the message &quot;JVMLH030: threads are disappearing
when trying to suspend all threads&quot;.</p>
<p>SUSE Bugzilla report
47947 is raised against this problem. This bug is fixed in SLES 9
Service Pack 1.</p></p>
<p>
<a name="wq235"></a>
<h2 id="wq235">JNI calls with more
than eight parameters on PPC platforms</h2>
<p><strong>PPC platforms
only</strong></p>
<p>If your Java code
uses JNI calls, and any specific call has more than eight float or
double parameters, your C code must be compiled with the gcc-2.95.3
Free Software Foundation (FSF) level of GNU C Compiler (GCC).</p></p>
<p>
<a name="wq236"></a>
<h2 id="wq236">Parallel
port operations on SLES9 before SP2</h2>
<p><strong>PPC platforms only</strong></p>
<p>The
JavaComm package cannot support parallel port operations on the SLES
9 GA and SP1 kernels. This limitation is resolved in the SP2 kernel.
The SUSE Bugzilla number is 50028.</p></p>
<p>
<a name="wq237"></a>
<h2 id="wq237">Compiling libFileStat.so
on PPC 64-bit platforms</h2>
<p><strong>PPC 64-bit platforms only</strong></p>
<p>The
default gcc cross compiler (version 3.2-49) causes several errors.
To generate the shared library <samp>libFileStat.so</samp>,
run:</p></p>
<pre class="xmp">/opt/cross/bin/powerpc64-linux-gcc -shared -o libFileStat.so -I<em>&lt;SDK_PATH&gt;</em>/include FileStat.c</pre>
<p> where <em>&lt;SDK_PATH&gt;</em> is
the path to the installed SDK directory.</p>
<p>
<a name="wq238"></a>
<h2 id="wq238">IPv6 on zSeries platforms</h2>
<p><strong>zSeries platforms only</strong></p>
<p>Although
the Linux kernel in the current
distributions provides support for Internet Protocol version 6 (IPv6),
you might encounter problems using it. Support for IPv6 from Java is included in this release,
but you are advised to turn off the support with the <strong>-Djava.net.preferIPv4Stack=true</strong> option
on the java command. If you install a kernel that
fully supports IPv6, you do not need this option.</p></p>
<p>
<a name="wq239"></a>
<h2 id="wq239">xcin on 64-bit zSeries platforms</h2>
<p><strong>zSeries 64-bit platforms only</strong></p>
<p>The
Chinese and Taiwanese input method server (xcin) has not been tested.</p></p>
<p>
<a name="wq240"></a>
<h2 id="wq240">Java Desktop API</h2>
<p>The Java Desktop API might not work because one
or more GNOME libraries are not available.</p></p>
<p>
<a name="wq241"></a>
<h2 id="wq241">NullPointerException with the GTK
Look and Feel</h2>
<p><strong>DBCS environments only</strong></p>
<p>If your
application fails with a NullPointerException using
the GTK Look and Feel, unset the <strong>GNOME_DESKTOP_SESSION_ID</strong> environment
variable.</p></p>
<p>
<a name="wq242"></a>
<h2 id="wq242">Unicode Shift_JIS code page alias</h2>
<p><strong>Japanese
users only</strong></p>
<p>The Unicode code page alias &quot;\u30b7\u30d5\u30c8\u7b26\u53f7\u5316\u8868\u73fe&quot; for
Shift_JIS has been removed. If you use this code page in your applications,
replace it with Shift_JIS.</p></p>
<p>
<a name="wq243"></a>
<h2 id="wq243">Unreadable
characters on Swing components on Ubuntu</h2>
<p>On Ubuntu systems
configured for Chinese, Japanese, or Korean globalization, some characters
on Java Swing components might
not be readable because the font is unclear when anti-aliasing is
not used. To improve the readability of the characters, set the <strong>swing.aatext</strong> property
in the java or javaw command
as follows: </p>
<pre class="xmp">-Dswing.aatext=true</pre><p class="indatacontent"> Alternatively,
use the <strong>IBM_JAVA_OPTIONS</strong> environment variable
to specify this property.</p></p>
<p>
<a name="wq244"></a>
<h2 id="wq244">-Xshareclasses:&lt;options&gt;</h2>
<p>Shared classes cache and control files are not compatible
between Java 6 SR4 and previous
releases.</p></p>
<p>
<a name="wq245"></a>
<h2 id="wq245">Java Kernel installation</h2>
<p>The Java kernel aims to reduce the startup
time imposed by an application when it finds that the installed JRE
needs an update. When this situation occurs, the Java kernel automatically downloads only the Java components that are needed
directly from the Sun Web site. This automated download is currently
not possible with the IBM implementation
of this Sun Java update.</p></p>
<p>
<a name="wq246"></a>
<h2 id="wq246">Java Deployment Toolkit</h2>
<p>The toolkit
implements the JavaScript DeployJava.js,
which can be used to automatically generate any HTML needed to deploy
applets and Java Web Start applications.
However, the automatic generation is not possible with the IBM release of Java, because the process involves downloading
and running the specific JRE from a public site, using public functions.</p></p>
<p><img src="../delta.gif" alt="Start of change" /><font color="RED">
<a name="wq247"></a>
<h2 id="wq247">Supported
browsers for Java plug-ins</h2>
<p>Next-generation Java plug-ins are supported only
on the Firefox 3, Firefox 3.5, and Firefox 3.6 browsers on Linux. These
plug-ins do not work with the SeaMonkey browser on Linux PPC32 systems. More information can be
found at: <a href="http://java.sun.com/javase/6/webnotes/6u10/plugin2/index.html#SUPPORTED_PLATFORMS" target="_blank">http://java.sun.com/javase/6/webnotes/6u10/plugin2/index.html#SUPPORTED_PLATFORMS</a></p></font><img src="../deltaend.gif" alt="End of change" /></p>
<p>
<a name="wq248"></a>
<h2 id="wq248">Supported
platforms for Java plug-ins</h2>
<p>Support
for Java plug-ins and Java Web Start on Linux AMD64 systems is not available at this
time.</p></p>
<p>
<a name="wq249"></a>
<h2 id="wq249">Linux Completely
Fair Scheduler affects Java performance</h2>
<p>Java applications that use synchronization
extensively might perform poorly on Linux distributions
that include the Completely Fair Scheduler. The Completely Fair Scheduler
(CFS) is a scheduler that was adopted into the mainline Linux kernel as of release 2.6.23. The CFS
algorithm is different from the scheduling algorithms for previous Linux releases. It might change
the performance properties of some applications. In particular, CFS
implements sched_yield() differently, making it
more likely that a yielding thread is given CPU time regardless.</p>
<p>If
you encounter this problem, you might observe high CPU usage by your Java application, and slow progress
through synchronized blocks. The application might appear to stop
because of the slow progress.</p>
<p>There are two possible workarounds:
</p>
<ul>
<li>Invoke the JVM with the additional argument <strong>-Xthr:minimizeUserCPU</strong>.</li>
<li>Configure the Linux kernel
to use a heuristic for sched_yield() that is more
compatible with earlier versions, by setting the sched_compat_yield tunable
kernel property to 1. For example:
<pre class="xmp">echo "1" &gt; /proc/sys/kernel/sched_compat_yield</pre></li></ul><p class="indatacontent">Do not use these workarounds unless you are experiencing poor
performance.</p>
<p>This problem might affect IBM Developer Kit and Runtime Environment for Linux 5.0 (all versions) and 6.0
(all versions up to and including SR 4) running on Linux kernels that include the Completely Fair
Scheduler.<span> For IBM Developer
Kit and Runtime Environment for Linux version
6.0 after SR 4, the use of CFS in the kernel is detected and the option <strong>-Xthr:minimizeUserCPU</strong> enabled
automatically.</span> Some Linux distributions
that include the Completely Fair Scheduler are Ubuntu 8.04 and SUSE Linux Enterprise Server 11.</p>
<p>More
information about CFS can be found at <a href="http://www.ibm.com/developerworks/linux/library/l-cfs/?ca=dgr-lnxw06CFC4Linux">Multiprocessing
with the Completely Fair Scheduler</a>.</p></p>
<p>
<a name="limitations__expiredcertificates"></a>
<h2 id="limitations__expiredcertificates">Expired
GTE Cybertrust Certificate</h2>
<p>The IBM Runtime
Environment for Java contains
an expired GTE CyberTrust Certificate in the <samp>CACERTS</samp> file
for compatibility reasons. The <samp>CACERTS</samp> file is
provided as a default truststore. Some common public certificates
are provided as a convenience.</p>
<p>If no applications require the
certificate, it can be left in the <samp>CACERTS</samp> file.
Alternatively, the certificate can be deleted. If applications do
require the certificate, modify them to use the newer GTE CyberTrust
Global root certificate that expires in 2018.</p>
<p>This certificate
might be removed for later versions of the SDK.</p></p>
<p>
<a name="wq250"></a>
<h2 id="wq250">Using Web Start to launch a JNLP application</h2>
<p>When
using Web Start to launch a Java Network
Launching Protocol (JNLP) application that requires an older version
of Java, you might see an error
containing the following message:</p>
<pre class="xmp">java.lang.NoClassDefFoundError: com/sun/deploy/util/BlackList</pre><p class="indatacontent"> This
results from a check controlled by the deployment configuration property <strong>deployment.security.blacklist.check</strong> The
property is enabled using the Enable blacklist revocation
check option in the Java Control
Panel.</p>
<p>To work around the problem:
</p>
<ol type="1">
<li>Launch the Java Control
Panel.</li>
<li>Select <strong>Advanced tab</strong> -&gt; <strong>Security</strong>.</li>
<li>Clear the Enable blacklist revocation check option.</li></ol></p>
<p>
<a name="wq252"></a>
<h2 id="wq252">Using -Xshareclasses:destroy during
JVM startup</h2>
<p>When running the command  java <strong>-Xshareclasses:destroy</strong> on
a shared cache that is being used by a second JVM during startup,
you might have the following issues: 
</p>
<ul>
<li>The second JVM fails.</li>
<li>The shared cache is deleted.</li></ul></p>
<p><img src="../delta.gif" alt="Start of change" /><font color="RED">
<a name="wq253"></a>
<h2 id="wq253">Problems accessing archive
files created using java.util.Zip*</h2>
<p>The <samp>java.util.Zip*</samp> files
can create archive files that are larger than 4 GB. However, some
third-party compression tools have file size limitations, and cannot
access files larger than 4 GB.</p></font><img src="../deltaend.gif" alt="End of change" /></p>
<p><img src="../delta.gif" alt="Start of change" /><font color="RED">
<a name="wq254"></a>
<h2 id="wq254">Java
applets fail with a network security exception</h2>
<p>(Affects Linux on 32-bit Intel and 64-bit AMD64/EMT64 architectures
only)</p>
<p>After installing Java 6 service refresh 9, some Java applets
might fail with a network security exception during name resolution.
The problem is caused by a fix for a security vulnerability in the
Next Generation Java plug-in technology. The problem affects Java
applets that are embedded in web pages and that contain JavaScript concerned with network security
permissions. The applet fails if the name service used to resolve
the website host name does not return a name that can be converted
by reverse address lookup back into the original web page URL host
name.</p>
<p>To avoid this problem, update your host settings to enable
Java to authenticate IPv4 and IPv6 name service mappings, as follows:</p>
<p>The
IPv4 general form is:</p>
<pre class="xmp">aaa.bbb.ccc.ddd
fully.qualified.domain.name.auth.ddd.ccc.bbb.aaa.in-addr.arpa</pre><p class="indatacontent">Add
the fully qualified host name <samp class="xph">myhost.mysite.com</samp> before
other mappings in your TCP/IP hosts file. For example:</p>
<pre class="xmp"># IPv4 host entries
#10.11.12.13 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;myhost loghost
10.11.12.13 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;myhost.mysite.com&nbsp;myhost loghost</pre><p class="indatacontent">Use
the equivalent form for IPv6 addresses.</p>
<p>If security is not important,
you can use a <samp>crossdomain.xml</samp> file to grant permission
to connect to the site from any Java applet. In this case, changes
to name service mappings are not required.</p></font><img src="../deltaend.gif" alt="End of change" /></p>
<p><img src="../delta.gif" alt="Start of change" /><font color="RED">
<a name="wq255"></a>
<h2 id="wq255">Linux Mini-Control Program (MCP)
V6.1 support</h2>
<p>MCP V6.1 is an IBM optimized Linux operating environment that
is provided for specific IBM products
and offerings.</p>
<p>MCP V6.1 is not supported on 31-bit Linux for System z. MCP V6.1 is supported on 64-bit Linux for System z, but there are no X11 libraries
or files provided as part of the operating environment.</p></font><img src="../deltaend.gif" alt="End of change" /></p>
<p><img src="../delta.gif" alt="Start of change" /><font color="RED">
<a name="wq256"></a>
<h2 id="wq256">Chinese,
Japanese, or Korean characters are not displayed properly in GUI applications
on RHEL 6</h2>
<p>This problem occurs when using the Motif AWT.
The problem has the effect that Chinese, Japanese, or Korean characters
are not displayed properly in GUI applications.</p>
<p>The workaround
is to use XAWT instead of Motif AWT.</p></font><img src="../deltaend.gif" alt="End of change" /></p>
<p><img src="../delta.gif" alt="Start of change" /><font color="RED">
<a name="wq257"></a>
<h2 id="wq257">Position
for ibus composition window is incorrect on RHEL 6</h2>
<p>This
problem occurs when using the ibus input method. The effect is that
the Input Method Editor (IME) composition window is not displayed
under the cursor position. An additional effect is that the composition
window does not follow the xterm window if it is moved.</p>
<p>This
problem only affects IBM POWER and s390 platforms.</p>
<p>If
you encounter this problem, contact Red Hat for further information.</p></font><img src="../deltaend.gif" alt="End of change" /></p>
<a name="supportforvirtualizationsoftware"></a>
<h1 id="supportforvirtualizationsoftware"><a href="#ToC_269">Appendix D. Support for virtualization software</a></h1>
<div>
<p>The IBM SDK for Java is supported on a number of
virtualized environments.</p></div><a id="idx84" name="idx84"></a>
<p>The virtualization capabilities of the AIX POWER hypervisor,
provided as part of the IBM POWER platform, have been fully
tested with all SDK supported releases of AIX.</p>
<p>The virtualization capabilities of the Processor Resource/System
Manager (PR/SM&trade;) provided as
part of the IBM z-31 and IBM z-64 platforms have been fully
tested with all SDK supported releases of z/OS.</p>
<p>In addition, the following virtualization software has been tested
for the IBM SDK for Java:
</p>
<a name="wq258"></a>
<table id="wq258" width="100%" summary="" border="1" frame="border" rules="all">
<caption>Table 8. Virtualization software tested for the IBM SDK for Java</caption>
<thead valign="bottom">
<tr valign="bottom">
<th id="wq259" width="55%" align="left">Virtualization software</th>
<th id="wq260" width="44%" align="left">SDK release tested</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td headers="wq259">z/VM&reg; v6.1</td>
<td headers="wq260"> <span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
</tr>
<tr>
<td headers="wq259">VMWare ESXi Server 4</td>
<td headers="wq260">GA</td>
</tr>
<tr>
<td headers="wq259">Kernel-based Virtual Machine (KVM) on Red Hat
Enterprise Virtualization V5</td>
<td headers="wq260"><span><img src="../delta.gif" alt="Start of change" /><font color="RED">SR9</font><img src="../deltaend.gif" alt="End of change" /></span></td>
</tr>
<tr>
<td headers="wq259">Novell SLES 10 Xen</td>
<td headers="wq260">GA</td>
</tr>
<tr>
<td headers="wq259">Microsoft Hyper-V
R2</td>
<td headers="wq260">GA</td>
</tr>
</tbody>
</table>
<a name="wq261"></a>
<div class="note-noindent" id="wq261">
<span class="notetitle">Note:</span> <span class="notebody"><strong>SDK release tested</strong> indicates
the earliest release of the SDK tested.</span></div>
<a name="notices"></a>
<h1 id="notices"><a href="#ToC_270">Notices</a></h1>
<p>This information was developed for products and services offered
in the U.S.A.</p>
<p>IBM may not offer the products, services, or features
discussed in this document in other countries. Consult your local
IBM representative for information on the products and services currently
available in your area. Any reference to an IBM product, program,
or service is not intended to state or imply that only that IBM product,
program, or service may be used. Any functionally equivalent product,
program, or service that does not infringe any IBM intellectual property
right may be used instead. However, it is the user's responsibility
to evaluate and verify the operation of any non-IBM product, program,
or service.</p>
<p>IBM may have patents or pending patent applications covering subject
matter described in this document. The furnishing of this document
does not grant you any license to these patents. You can send license
inquiries, in writing, to:

</p>
<ul class="simple">
<li>IBM Director of Licensing</li>
<li>IBM Corporation</li>
<li>North Castle Drive</li>
<li>Armonk, NY 10504-1758</li>
<li>U.S.A.</li></ul>
<p>For license inquiries regarding double-byte character set (DBCS) information,
contact the IBM Intellectual Property Department in your country or
send inquiries, in writing, to:

</p>
<ul class="simple">
<li>Intellectual Property Licensing</li>
<li>Legal and Intellectual Property Law</li>
<li>IBM Japan Ltd.</li>
<li>1623-14, Shimotsuruma, Yamato-shi</li>
<li>Kanagawa 242-8502 Japan</li></ul>
<p>The following paragraph does not apply to the United Kingdom
or any other country where such provisions are inconsistent with local
law:</p>
<p>INTERNATIONAL BUSINESS MACHINES CORPORATION PROVIDES THIS
PUBLICATION &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
Some states do not allow disclaimer of express or implied warranties
in certain transactions, therefore, this statement may not apply to
you.</p>
<p>This information could include technical inaccuracies or typographical
errors. Changes are periodically made to the information herein; these
changes will be incorporated in new editions of the publication. IBM
may make improvements and/or changes in the product(s) and/or the
program(s) described in this publication at any time without notice.</p>
<p>Any references in this information to non-IBM Web sites are provided
for convenience only and do not in any manner serve as an endorsement
of those Web sites. The materials at those Web sites are not part
of the materials for this IBM product and use of those Web sites is
at your own risk.</p>
<p>IBM may use or distribute any of the information you supply in
any way it believes appropriate without incurring any obligation to
you.</p>
<p>Licensees of this program who wish to have information about it
for the purpose of enabling: (i) the exchange of information between
independently created programs and other programs (including this
one) and (ii) the mutual use of the information which has been exchanged,
should contact:</p>
<ul class="simple">
<li>JIMMAIL@uk.ibm.com</li>
<li>[Hursley Java Technology Center (JTC) contact]</li></ul>
<p>Such information
may be available, subject to appropriate terms and conditions, including
in some cases, payment of a fee.</p>
<p>The licensed program described in this document and all licensed
material available for it are provided by IBM under terms of the IBM
Customer Agreement, IBM International Program License Agreement or
any equivalent agreement between us.</p>
<p>Any performance data contained herein was determined in a controlled
environment. Therefore, the results obtained in other operating
environments may vary significantly. Some measurements may have been
made on development-level systems and there is no guarantee that these
measurements will be the same on generally available systems.
Furthermore, some measurements may have been estimated through
extrapolation. Actual results may vary. Users of this document should
verify the applicable data for their specific environment.</p>
<p>Information concerning non-IBM products was obtained from the suppliers
of those products, their published announcements or other publicly
available sources. IBM has not tested those products and cannot confirm
the accuracy of performance, compatibility or any other claims related
to non-IBM products. Questions on the capabilities of non-IBM products
should be addressed to the suppliers of those products.</p>
<p>All statements regarding IBM's future direction or intent are subject
to change or withdrawal without notice, and represent goals and objectives
only.</p>
<p>COPYRIGHT LICENSE:</p>
<p>This information contains sample application programs in source
language, which illustrate programming techniques on various operating
platforms. You may copy, modify, and distribute these sample programs
in any form without payment to IBM, for the purposes of developing,
using, marketing or distributing application programs conforming to
the application programming interface for the operating platform for
which the sample programs are written. These examples have not been
thoroughly tested under all conditions. IBM, therefore, cannot
guarantee or imply reliability, serviceability, or function of these
programs. The sample programs are provided &quot;AS IS&quot;, without
warranty of any kind. IBM shall not be liable for any damages arising
out of your use of the sample programs.</p>
<p>Each copy or any portion of these sample programs or any derivative
work, must include a copyright notice as follows:</p>
<p>&copy; (your company name) (year). Portions of this code are derived
from IBM Corp. Sample Programs. &copy; Copyright IBM Corp. _enter the
year or years_.</p>
<p>If you are viewing this information softcopy, the photographs and
color illustrations may not appear.</p>
<a name="trademarks"></a>
<h2 id="trademarks"><a href="#ToC_271">Trademarks</a></h2>
<p>IBM, the IBM logo, and ibm.com are trademarks or registered trademarks
of International Business Machines Corporation in the United States, other
countries, or both. If these and other IBM trademarked terms are marked on
their first occurrence in this information with a trademark symbol (&reg; or &trade;),
these symbols indicate U.S. registered or common law trademarks owned by IBM
at the time this information was published. Such trademarks may also be registered
or common law trademarks in other countries. A current list of IBM trademarks
is available on the Web at "Copyright and trademark information" at <a href="http://www.ibm.com/legal/copytrade.shtml">http://www.ibm.com/legal/copytrade.shtml</a>.</p>
<p>Intel is a trademark of Intel Corporation in the
United States, other countries, or both.</p>
<p>Linux is a trademark of Linus Torvalds in the
United States, other countries, or both.</p>
<p>UNIX is a registered trademark of The Open Group
in the United States and other countries.</p>
<p>Java and all Java-based trademarks and logos are trademarks or registered
trademarks of  Sun Microsystems, Inc. in the United States, other countries,
or both.</p>
<p>Other company, product, or service names may be trademarks or service marks
of others.</p>
<a id="Bot_Of_Page" name="Bot_Of_Page"></a>
</body>
</html>
